import tkinter as tk
from tkinter import ttk, messagebox, filedialog
import os
import sys
import configparser
import shutil
from datetime import datetime
import webbrowser
import csv
import re
import colorsys # –î–æ–±–∞–≤–ª–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ü–≤–µ—Ç–æ–≤—ã–º–∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞–º–∏ HLS

# =============================================================================
# --- –£—Å–ª–æ–≤–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –∏ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è Windows ---
# –≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –∫–æ–¥–∞ –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã Windows,
# —Ç–∞–∫–∏–º–∏ –∫–∞–∫ —Å–∫—Ä—ã—Ç–∏–µ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ç–µ–º—ã Windows.
# =============================================================================
if os.name == 'nt':
    try:
        import ctypes
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è Windows, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
        # –≠—Ç–æ –ø–æ–ª–µ–∑–Ω–æ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π —Å –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º, —á—Ç–æ–±—ã –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —á–µ—Ä–Ω–æ–µ –æ–∫–Ω–æ –∫–æ–Ω—Å–æ–ª–∏.
        def hide_console_window():
            whnd = ctypes.windll.kernel32.GetConsoleWindow()
            if whnd != 0:
                ctypes.windll.user32.ShowWindow(whnd, 0)
        hide_console_window()
    except Exception as e:
        # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ—à–∏–±–∫—É, –µ—Å–ª–∏ ctypes –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –µ—Å—Ç—å –¥—Ä—É–≥–∞—è –ø—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ —Å–∫—Ä—ã—Ç–∏–∏ –∫–æ–Ω—Å–æ–ª–∏.
        print(f"Warning: Could not hide console window on Windows: {e}")

    try:
        import winreg
        def is_windows_dark_theme():
            """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–∏ Windows –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ç–µ–º–Ω—É—é —Ç–µ–º—É."""
            try:
                registry = winreg.ConnectRegistry(None, winreg.HKEY_CURRENT_USER)
                key = winreg.OpenKey(registry, r'SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Themes\\Personalize')
                val, _ = winreg.QueryValueEx(key, "AppsUseLightTheme")
                winreg.CloseKey(key)
                return val == 0  # 0 –æ–∑–Ω–∞—á–∞–µ—Ç —Ç–µ–º–Ω—ã–π —Ä–µ–∂–∏–º, 1 –æ–∑–Ω–∞—á–∞–µ—Ç —Å–≤–µ—Ç–ª—ã–π —Ä–µ–∂–∏–º.
            except Exception:
                # –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø –∫ —Ä–µ–µ—Å—Ç—Ä—É –Ω–µ —É–¥–∞–ª—Å—è –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞.
                return False
    except ImportError:
        # –ï—Å–ª–∏ winreg –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å—Ä–µ–¥–∞—Ö Python).
        def is_windows_dark_theme():
            return False
else:
    # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –Ω–µ-Windows —Å–∏—Å—Ç–µ–º, –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç False, —Ç–∞–∫ –∫–∞–∫ —Ç–µ–º–Ω–∞—è —Ç–µ–º–∞ Windows –Ω–µ –ø—Ä–∏–º–µ–Ω–∏–º–∞.
    def is_windows_dark_theme():
        return False
        
# =============================================================================
# --- –ö–ª–∞—Å—Å ToolTip –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ ---
# =============================================================================
class ToolTip:
    def __init__(self, widget, text):
        self.widget = widget
        self.text = text
        self.tooltip_window = None
        self.widget.bind("<Enter>", self.show_tooltip)
        self.widget.bind("<Leave>", self.hide_tooltip)
        self.widget.bind("<ButtonPress>", self.hide_tooltip) # –°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏

    def show_tooltip(self, event=None):
        # –ï—Å–ª–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∞ —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω–∞, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–Ω–æ–≤–∞
        if self.tooltip_window:
            return

        # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏
        # self.id = self.widget.after(500, self._show_tooltip_after_delay)
        # –£–±—Ä–∞–ª –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –Ω–æ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ.

        x = self.widget.winfo_rootx() + self.widget.winfo_width() # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ X –ø—Ä–∞–≤–æ–≥–æ –∫—Ä–∞—è –≤–∏–¥–∂–µ—Ç–∞
        y = self.widget.winfo_rooty() # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ Y –≤–µ—Ä—Ö–Ω–µ–≥–æ –∫—Ä–∞—è –≤–∏–¥–∂–µ—Ç–∞
        
        # –°–æ–∑–¥–∞–µ–º Toplevel –æ–∫–Ω–æ –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–∫–∏
        self.tooltip_window = tk.Toplevel(self.widget)
        self.tooltip_window.wm_overrideredirect(True) # –£–±–∏—Ä–∞–µ—Ç —Ä–∞–º–∫—É –æ–∫–Ω–∞ –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫
        self.tooltip_window.wm_geometry(f"+{x}+{y}")
        
        # –°–æ–∑–¥–∞–µ–º Label —Å —Ç–µ–∫—Å—Ç–æ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏
        label = tk.Label(self.tooltip_window, text=self.text, background="#ffffe0", # –°–≤–µ—Ç–ª–æ-–∂–µ–ª—Ç—ã–π —Ñ–æ–Ω
                         relief="solid", borderwidth=1,
                         font=("tahoma", "8", "normal"))
        label.pack(ipadx=1) # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –æ—Ç—Å—Ç—É–ø

    def hide_tooltip(self, event=None):
        if self.tooltip_window:
            self.tooltip_window.destroy()
        self.tooltip_window = None
        # if hasattr(self, 'id'): # –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∫–∞–∑, –µ—Å–ª–∏ –æ–Ω –±—ã–ª
        #    self.widget.after_cancel(self.id)

# =============================================================================
# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
# –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—É—Ç–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ –∏ –º–µ—Ç–∞–¥–∞–Ω–¥—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
# =============================================================================
DEFAULT_MODLOADER_SUBDIR = "modloader" # –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ modloader –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
OUTPUT_FILE_NAME = "modloader.ini"         # –ò–º—è —Ñ–∞–π–ª–∞, –≤ –∫–æ—Ç–æ—Ä—ã–π —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –º–æ–¥–æ–≤.
BACKUP_FILE_NAME = "modloader.ini.bak" # –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ modloader.ini.
APP_VERSION = "2.0"                      # –í–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
GITHUB_REPO_URL = "https://github.com/Maximka1993271/GTASAN/releases/download/ModloaderPriorityEditor/GTA.SA.Modloader.Priority.Editior.2.0.rar"
AUTHOR_EMAIL = "melnikovmaksim540@gmail.com"

# –°–∏–º–≤–æ–ª—ã –¥–ª—è –∑–≤–µ–∑–¥ —Ä–µ–π—Ç–∏–Ω–≥–∞
STAR_FILLED = "‚òÖ"
STAR_EMPTY = "‚òÜ"

# =============================================================================
# --- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –º–æ–¥–æ–≤ ---
# –≠—Ç–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è—é—Ç –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏ –Ω–∞–∑–Ω–∞—á–∞—é—Ç—Å—è –º–æ–¥–∞–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
# =============================================================================
custom_priorities = {
    "de palm": 78,
    "proper fixes": 40,
    "proper vehicles retex": 61,
    "revamped vehicles project": 62,
    "rosa project evolved": 30,
    "_essentials+": 99
}

# =============================================================================
# --- –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ ---
# –°–æ–¥–µ—Ä–∂–∞—Ç –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ, –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –∏ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–∞—Ö.
# =============================================================================
LANG_EN = {
    "app_title": "GTA SA Modloader Priority Editor 2.0",
    
    # –ú–µ–Ω—é
    "file_menu": "File",
    "file_open": "Open...",
    "file_save": "Save",
    "file_save_as": "Save As...",
    "file_exit": "Exit",
    
    "edit_menu": "Edit",
    "edit_import": "Import Priorities from File",
    "edit_export_csv": "Export to CSV",
    "edit_reset_priorities": "Reset All Priorities",
    "edit_restore_defaults": "Restore Default Priorities",
    "edit_delete_mod": "Delete Mod(s) from List",
    "delete_all_mods": "Delete All Mods from List",
    
    "settings_menu": "Settings",
    "theme_menu": "Theme",
    "theme_system": "System Theme",
    "theme_dark": "Dark Theme",
    "theme_light": "Light Theme",
    "settings_modloader_path": "Modloader Folder Path",
    
    "help_menu": "Help",
    "help_about": "About",
    "help_author": "About Author",
    "help_updates": "Check for Updates",
    "help_help": "Usage Guide",
    "help_contact": "Contact Support",
    
    # –ü–æ–∏—Å–∫
    "search_mod": "Search Mod:",
    "update_mod_list": "Refresh Mod List",
    "generate_ini": "Generate modloader.ini",
    
    # –¢–∞–±–ª–∏—Ü–∞
    "mod_column": "Mod",
    "priority_column": "Priority",
    
    # –õ–æ–≥–∏
    "log_label": "Log:",
    "clear_log": "Clear Log",
    "select_all_log": "Select All",
    "copy_all_log": "Copy All",
    "logs_cleared": "Logs cleared.", # New string for logs cleared
    
    # –ê–≤—Ç–æ—Ä
    "author_label": "Author: Maxim Melnikov",
    
    # –û—à–∏–±–∫–∏ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    "modloader_folder_not_found": "‚ùå Folder '{0}' not found or not a directory! Please check the path in Settings.",
    "mods_not_found": "No mods found in '{0}' or the folder is empty/inaccessible.",
    "mods_loaded": "Loaded mods: {0}",
    "priority_conflicts_found": "‚ö†Ô∏è Priority conflicts detected:",
    "priority_conflict_detail": "  Priority {0} assigned to mods: {1}",
    "no_priority_conflicts": "‚úÖ No priority conflicts detected.",
    
    "priority_value_error_title": "Error",
    "priority_value_error": "Priority must be an integer between 0 and 99.",
    
    "no_mods_to_generate": "No mods to generate. Please load mods first.",
    "backup_created": "üì¶ Backup file '{0}' created.",
    "backup_error": "‚ö†Ô∏è Error creating backup: {0}",
    
    "file_saved_success": "‚úÖ File '{0}' successfully saved.",
    "file_saved_info": "File '{0}' successfully saved.",
    "file_save_error": "‚ùå Error saving file: {0}",
    "file_save_error_details": "Could not save file:\n{0}",
    "file_read_error": "Could not read file:\n{0}",
    
    "no_priority_sections": "No priority sections found in the file or the 'Profiles.Default.Priority' section is missing.",
    "priorities_imported": "‚úÖ Priorities imported from file '{0}'.",
    "export_csv_complete": "‚úÖ Export to CSV file '{0}' complete.",
    "export_csv_info": "File '{0}' successfully exported.",
    "export_csv_error": "‚ùå Error exporting to CSV: {0}",
    "export_csv_error_details": "Could not export file:\n{0}",
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    "reset_priorities_confirm_title": "Confirmation",
    "reset_priorities_confirm": "Are you sure you want to reset all priorities?",
    "priorities_reset": "‚úÖ All priorities reset to 0.",
    
    "restore_defaults_confirm_title": "Confirmation",
    "restore_defaults_confirm": "Are you sure you want to restore default priorities?",
    "priorities_restored": "‚úÖ Default priorities restored.",
    
    "modloader_path_changed": "Modloader path changed to: {0}",
    
    # –û –ø—Ä–æ–≥—Ä–∞–º–º–µ –∏ –∞–≤—Ç–æ—Ä–µ
    "about_title": "About Program",
    "about_message": "GTA SA Modloader Priority Editor\nVersion {0}\n\nA program for managing GTA San Andreas modloader priorities.".format(APP_VERSION),
    
    "author_title": "About Author",
    "author_message": "Maxim Melnikov\nEmail: melnikovmaksim540@gmail.com",
    
    "updates_title": "Check for Updates",
    "updates_message": "Checking for updates. You have the latest version {0}.".format(APP_VERSION),
    
    "help_title": "Help",
    "help_message": "1. Use 'Refresh Mod List' button to scan modloader folder.\n2. Double-click the 'Priority' column to change priorities.\n3. Generate modloader.ini to apply changes.\n4. Use the menu to open/save files and import/export data.",
    
    "contact_support_subject": "GTA SA Modloader Priority Editor Support",
    
    "open_ini_file_title": "Open INI File",
    
    "theme_changed_to": "Theme changed to: {0}",
    
    "language_menu": "Language",
    "language_en": "English",
    "language_ru": "–†—É—Å—Å–∫–∏–π",
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    "priority_changed_log": "Priority for mod '{0}' changed to {1}.",
    "mod_deleted_confirm_title": "Confirm Deletion",
    "mod_deleted_confirm": "Are you sure you want to delete '{0}' from the list? This will NOT remove the mod from your file system.",
    
    "multiple_mods_deleted_confirm": "Are you sure you want to delete {0} selected mods from the list? This will NOT remove them from your file system.",
    "delete_all_mods_confirm_title": "Confirm Deletion of All Mods",
    "delete_all_mods_confirm": "Are you sure you want to delete ALL mods from the list? This will NOT remove them from your file system.",
    
    "mod_deleted_log": "Mod '{0}' deleted from the list.",
    "all_mods_deleted_log": "All mods deleted from the list.",
    
    "loading_mods_from": "Loading mods from: {0}",
    "scanning_modloader_folder": "Scanning modloader folder: {0}",
    "found_mod_folder": "Found mod folder: {0}",
    "skipping_entry": "Skipping entry (not a folder or ignored prefix): {0}",
    "no_valid_mod_folders": "No valid mod folders found.",
    "no_mods_to_export": "No mods to export. The list is empty.",
    
    "file_not_found": "File not found: {0}",
    "invalid_priority_value": "Invalid priority value for mod '{0}' in INI: '{1}'. Skipping.",
    "mod_deleted_count": "Deleted {0} mod(s) from the list.",
    
    "priority_auto_assigned": "Automatically assigned priority: {0} for mod '{1}'",
    "priority_from_mod_ini": "Priority {0} for mod '{1}' extracted from the mod's INI file.",
    
    # –ü–æ–∏—Å–∫
    "search_syntax_help": "Search syntax: Use | for OR, - for NOT, p: for priority (e.g., 'mod1 | mod2 -mod3 p:>50').",
    "search_applied": "Search applied: '{0}'. Found {1} mods.",
    "invalid_search_syntax": "‚ùå Invalid search syntax. Please check your query.",
    
    "yes_button": "Yes",
    "no_button": "No",
    "no_mods_selected_for_deletion": "No mods selected for deletion.",
    "save_button": "Save",
    "edit_priority_title": "Edit Priority",
    "info_title": "Information",
    "rate_program_label": "Rate this program:",
    "installed_mods_count": "Installed Mods: {0}" # New string for mod count
}

# –ú–æ–¥—É–ª—å –¥–ª—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
# =============================================================================
# --- –ö–ª–∞—Å—Å Localization ---
# –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —è–∑—ã–∫–æ–≤—ã–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏,
# –ø–æ–∑–≤–æ–ª—è—è –ª–µ–≥–∫–æ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å—Å—è –º–µ–∂–¥—É —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —è–∑—ã–∫–∞–º–∏.
# =============================================================================
class Localization:
    def __init__(self, language_dict):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–ª–∞—Å—Å –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏.
        :param language_dict: –°–ª–æ–≤–∞—Ä—å, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —è–∑—ã–∫–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–æ–≤.
        """
        self.language_dict = language_dict
        self.language = "ru"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∏–π

    def set_language(self, language_code):
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.
        :param language_code: –ö–æ–¥ —è–∑—ã–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "en", "ru").
        """
        if language_code in self.language_dict:
            self.language = language_code
        else:
            print(f"Warning: Language '{language_code}' not found. Using default language 'ru'.")
            self.language = 'ru'

    def get_text(self, key, *args):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ —Å—Ç—Ä–æ–∫—É.
        :param key: –ö–ª—é—á –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω—É–∂–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ —Å–ª–æ–≤–∞—Ä–µ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏.
        :param args: –ê—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ (–µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã).
        :return: –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞.
        """
        try:
            text = self.language_dict[self.language][key]
            if args:
                text = text.format(*args)
            return text
        except KeyError:
            return f"Missing translation for '{key}'"

# =============================================================================
# --- –î–∞–Ω–Ω—ã–µ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ ---
# –°–æ–¥–µ—Ä–∂–∞—Ç –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ, –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
# =============================================================================
LANG_RU = {
    "app_title": "GTA SA Modloader Priority Editor 2.0",
    "file_menu": "–§–∞–π–ª",
    "file_open": "–û—Ç–∫—Ä—ã—Ç—å...",
    "file_save": "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
    "file_save_as": "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫...",
    "file_exit": "–í—ã—Ö–æ–¥",
    "edit_menu": "–ü—Ä–∞–≤–∫–∞",
    "edit_import": "–ò–º–ø–æ—Ä—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞",
    "edit_export_csv": "–≠–∫—Å–ø–æ—Ä—Ç –≤ CSV",
    "edit_reset_priorities": "–°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã",
    "edit_restore_defaults": "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã",
    "edit_delete_mod": "–£–¥–∞–ª–∏—Ç—å –º–æ–¥(—ã) –∏–∑ —Å–ø–∏—Å–∫–∞",
    "delete_all_mods": "–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –º–æ–¥—ã –∏–∑ —Å–ø–∏—Å–∫–∞",
    "settings_menu": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏",
    "theme_menu": "–¢–µ–º–∞",
    "theme_system": "–°–∏—Å—Ç–µ–º–Ω–∞—è —Ç–µ–º–∞",
    "theme_dark": "–¢—ë–º–Ω–∞—è —Ç–µ–º–∞",
    "theme_light": "–°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞",
    "settings_modloader_path": "–ü—É—Ç—å –∫ –ø–∞–ø–∫–µ modloader",
    "help_menu": "–ü–æ–º–æ—â—å",
    "help_about": "–û –ø—Ä–æ–≥—Ä–∞–º–º–µ",
    "help_author": "–û–± –∞–≤—Ç–æ—Ä–µ",
    "help_updates": "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π",
    "help_help": "–°–ø—Ä–∞–≤–∫–∞",
    "help_contact": "–°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π",
    "search_mod": "–ü–æ–∏—Å–∫ –º–æ–¥–∞:",
    "update_mod_list": "–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–æ–≤",
    "generate_ini": "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å modloader.ini",
    "mod_column": "–ú–æ–¥",
    "priority_column": "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç",
    "log_label": "–õ–æ–≥:",
    "clear_log": "–û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥",
    "logs_cleared": "–õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã.", # –ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—ã—Ö –ª–æ–≥–æ–≤
    "select_all_log": "–í—ã–¥–µ–ª–∏—Ç—å –≤—Å—ë",
    "copy_all_log": "–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤—Å—ë",
    "author_label": "–ê–≤—Ç–æ—Ä: –ú–∞–∫—Å–∏–º –ú–µ–ª—å–Ω–∏–∫–æ–≤",
    "modloader_folder_not_found": "‚ùå –ü–∞–ø–∫–∞ '{0}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å –≤ –ù–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.",
    "mods_not_found": "–ú–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ '{0}' –∏–ª–∏ –ø–∞–ø–∫–∞ –ø—É—Å—Ç–∞/–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.",
    "mods_loaded": "–ó–∞–≥—Ä—É–∂–µ–Ω–æ –º–æ–¥–æ–≤: {0}",
    "priority_conflicts_found": "‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤:",
    "priority_conflict_detail": "  –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç {0} –Ω–∞–∑–Ω–∞—á–µ–Ω –º–æ–¥–∞–º: {1}",
    "no_priority_conflicts": "‚úÖ –ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã.",
    "priority_value_error_title": "–û—à–∏–±–∫–∞",
    "priority_value_error": "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º –æ—Ç 0 –¥–æ 99.",
    "no_mods_to_generate": "–ù–µ—Ç –º–æ–¥–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –º–æ–¥—ã.",
    "backup_created": "üì¶ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Ñ–∞–π–ª–∞ {0}.",
    "backup_error": "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {0}",
    "file_saved_success": "‚úÖ –§–∞–π–ª {0} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.",
    "file_saved_info": "–§–∞–π–ª '{0}' —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.",
    "file_save_error": "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {0}",
    "file_save_error_details": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª:\n{0}",
    "file_read_error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª:\n{0}",
    "no_priority_sections": "–í —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —Å–µ–∫—Ü–∏–∏ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–µ–∫—Ü–∏—è 'Profiles.Default.Priority'.",
    "priorities_imported": "‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∏–∑ —Ñ–∞–π–ª–∞ '{0}'.",
    "export_csv_complete": "‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV —Ñ–∞–π–ª '{0}' –∑–∞–≤–µ—Ä—à—ë–Ω.",
    "export_csv_info": "–§–∞–π–ª '{0}' —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω.",
    "export_csv_error": "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –≤ CSV: {0}",
    "export_csv_error_details": "–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª:\n{0}",
    "reset_priorities_confirm_title": "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
    "reset_priorities_confirm": "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã?",
    "priorities_reset": "‚úÖ –í—Å–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã —Å–±—Ä–æ—à–µ–Ω—ã –Ω–∞ 0.",
    "restore_defaults_confirm_title": "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
    "restore_defaults_confirm": "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã?",
    "priorities_restored": "‚úÖ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.",
    "modloader_path_changed": "–ü—É—Ç—å –∫ modloader –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: {0}",
    "about_title": "–û –ø—Ä–æ–≥—Ä–∞–º–º–µ",
    "about_message": "GTA SA Modloader Priority Editor\n–í–µ—Ä—Å–∏—è {0}\n\n–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏ –º–æ–¥–æ–≤ GTA San Andreas modloader.".format(APP_VERSION),
    "author_title": "–û–± –∞–≤—Ç–æ—Ä–µ",
    "author_message": "–ú–∞–∫—Å–∏–º –ú–µ–ª—å–Ω–∏–∫–æ–≤\nEmail: melnikovmaksim540@gmail.com",
    "updates_title": "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π",
    "updates_message": "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π. –£ –≤–∞—Å —Å–∞–º–∞—è –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è. {0}".format(APP_VERSION),
    "help_title": "–°–ø—Ä–∞–≤–∫–∞",
    "help_message": "1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–æ–≤' –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–ø–∫–∏ modloader.\n2. –ò–∑–º–µ–Ω—è–π—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –¥–≤–æ–π–Ω—ã–º –∫–ª–∏–∫–æ–º –ø–æ –∫–æ–ª–æ–Ω–∫–µ '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç'.\n3. –ì–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª modloader.ini –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π.\n4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –∏ –∏–º–ø–æ—Ä—Ç–∞/—ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö.",
    "contact_support_subject": "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ GTA SA Modloader Priority Editor",
    "open_ini_file_title": "–û—Ç–∫—Ä—ã—Ç—å INI —Ñ–∞–π–ª",
    "theme_changed_to": "–¢–µ–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {0}",
    "language_menu": "–Ø–∑—ã–∫",
    "language_en": "English",
    "language_ru": "–†—É—Å—Å–∫–∏–π",
    "priority_changed_log": "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –º–æ–¥–∞ '{0}' –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {1}.",
    "mod_deleted_confirm_title": "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è",
    "mod_deleted_confirm": "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å '{0}' –∏–∑ —Å–ø–∏—Å–∫–∞? –≠—Ç–æ –ù–ï —É–¥–∞–ª–∏—Ç –º–æ–¥ –∏–∑ –≤–∞—à–µ–π —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã.",
    "multiple_mods_deleted_confirm": "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å {0} –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–æ–¥–∞(–æ–≤) –∏–∑ —Å–ø–∏—Å–∫–∞? –≠—Ç–æ –ù–ï —É–¥–∞–ª–∏—Ç –∏—Ö –∏–∑ –≤–∞—à–µ–π —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã.",
    "delete_all_mods_confirm_title": "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –º–æ–¥–æ–≤",
    "delete_all_mods_confirm": "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï –º–æ–¥—ã –∏–∑ —Å–ø–∏—Å–∫–∞? –≠—Ç–æ –ù–ï —É–¥–∞–ª–∏—Ç –º–æ–¥—ã –∏–∑ –≤–∞—à–µ–π —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã.",
    "mod_deleted_log": "–ú–æ–¥ '{0}' —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞.",
    "all_mods_deleted_log": "–í—Å–µ –º–æ–¥—ã —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–ø–∏—Å–∫–∞.",
    "loading_mods_from": "–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–æ–≤ –∏–∑: {0}",
    "scanning_modloader_folder": "–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ modloader: {0}",
    "found_mod_folder": "–ù–∞–π–¥–µ–Ω –º–æ–¥: {0}",
    "skipping_entry": "–ü—Ä–æ–ø—É—Å–∫ –∑–∞–ø–∏—Å–∏ (–Ω–µ –ø–∞–ø–∫–∞ –∏–ª–∏ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–π –ø—Ä–µ—Ñ–∏–∫—Å): {0}",
    "no_valid_mod_folders": "–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞–ø–æ–∫ –º–æ–¥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
    "no_mods_to_export": "–ù–µ—Ç –º–æ–¥–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞. –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.",
    "file_not_found": "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {0}",
    "invalid_priority_value": "–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –¥–ª—è –º–æ–¥–∞ '{0}' –≤ INI: '{1}'. –ü—Ä–æ–ø—É—â–µ–Ω–æ.",
    "mod_deleted_count": "–£–¥–∞–ª–µ–Ω–æ {0} –º–æ–¥(–æ–≤) –∏–∑ —Å–ø–∏—Å–∫–∞.",
    "priority_auto_assigned": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {0} –¥–ª—è –º–æ–¥–∞ '{1}'",
    "priority_from_mod_ini": "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç {0} –¥–ª—è –º–æ–¥–∞ '{1}' –∏–∑–≤–ª–µ—á–µ–Ω –∏–∑ INI —Ñ–∞–π–ª–∞ –º–æ–¥–∞.",
    "search_syntax_help": "–°–∏–Ω—Ç–∞–∫—Å–∏—Å –ø–æ–∏—Å–∫–∞: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ | –¥–ª—è –ò–õ–ò, - –¥–ª—è –ù–ï, p: –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'mod1 | mod2 -mod3 p:>50').",
    "search_applied": "–ü–æ–∏—Å–∫ –ø—Ä–∏–º–µ–Ω–µ–Ω: '{0}'. –ù–∞–π–¥–µ–Ω–æ –º–æ–¥–æ–≤: {1}.",
    "invalid_search_syntax": "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –ø–æ–∏—Å–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–ø—Ä–æ—Å.",
    "yes_button": "–î–∞",
    "no_button": "–ù–µ—Ç",
    "no_mods_selected_for_deletion": "–ú–æ–¥—ã –¥–ª—è —É–¥—Ñ–∞–ª–µ–Ω–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω—ã.",
    "save_button": "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
    "edit_priority_title": "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç",
    "info_title": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
    "rate_program_label": "–†–µ–π—Ç–∏–Ω–≥ –ü—Ä–æ–≥—Ä–∞–º–º—ã:",
    "installed_mods_count": "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –º–æ–¥–æ–≤: {0}" # –ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–æ–¥–æ–≤
}

# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
localization = Localization({"ru": LANG_RU, "en": LANG_EN})

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
localization.set_language("ru")

# =============================================================================
# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
# –°–æ–¥–µ—Ä–∂–∞—Ç –æ–±—â–∏–µ –ø–æ–ª–µ–∑–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é –∫ –∫–ª–∞—Å—Å—É GUI.
# =============================================================================
def is_valid_priority(priority):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã–º (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 99)."""
    return isinstance(priority, int) and 0 <= priority <= 99

# =============================================================================
# --- –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ ---
# –≠—Ç–æ—Ç –∫–ª–∞—Å—Å —É–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ–º–∏ –∞—Å–ø–µ–∫—Ç–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏ –ª–æ–≥–∏–∫–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
# =============================================================================
class ModPriorityGUI(tk.Tk):
    def __init__(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –µ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã.
        """
        super().__init__()

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –∏–∫–æ–Ω–æ–∫.
        # –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é —Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞, —Ç–∞–∫ –∏ –ø–æ—Å–ª–µ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ PyInstaller.
        self.program_root_dir = os.path.dirname(sys.executable) if getattr(sys, 'frozen', False) else \
                                 os.path.abspath(os.path.dirname(sys.argv[0]))

        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—É—Ç–∏ modloader, –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–∏—Å–∫–∞, —Ç–µ–º—ã –∏ —è–∑—ã–∫–∞).
        self.config_file = os.path.join(self.program_root_dir, "config.ini")
        self.app_config = configparser.ConfigParser()
        self.load_app_config()

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø—É—Ç—å –∏–ª–∏ –ø—É—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
        # –ï—Å–ª–∏ –ø—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥–µ, —Ç–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è "modloader"
        # –≤–Ω—É—Ç—Ä–∏ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã.
        self.modloader_dir = self.app_config.get("Paths", "modloader_path",
                                                 fallback=os.path.join(self.program_root_dir, DEFAULT_MODLOADER_SUBDIR))
        # –ü—É—Ç—å –¥–ª—è modloader.ini —Ç–µ–ø–µ—Ä—å –≤—Å–µ–≥–¥–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–∞–ø–∫–µ modloader, –∫–æ—Ç–æ—Ä—É—é –≤—ã–±—Ä–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.
        self.output_ini_path = os.path.join(self.modloader_dir, OUTPUT_FILE_NAME)

        self.ini_config_data = configparser.ConfigParser()

        # –ù–∞—á–∞–ª—å–Ω—ã–π —è–∑—ã–∫, –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ –ø–æ–∑–∂–µ.
        self.current_lang = localization.language_dict[localization.language]
        self.title(self.current_lang["app_title"])
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞.
        self.geometry("1000x700") # –£–≤–µ–ª–∏—á–µ–Ω–∞ —à–∏—Ä–∏–Ω–∞ –æ–∫–Ω–∞ –¥–æ 1000 –ø–∏–∫—Å–µ–ª–µ–π
        self.resizable(True, True) # –†–∞–∑—Ä–µ—à–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞.

        self.mods = [] # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –º–æ–¥–æ–≤.
        self.filtered_mods = [] # –°–ø–∏—Å–æ–∫ –º–æ–¥–æ–≤ –ø–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ–∏—Å–∫–∞.

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º —Ç–µ–º—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ –∏–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–∏—Å—Ç–µ–º–Ω—ã–π.
        self.theme_mode = tk.StringVar(value=self.app_config.get("Theme", "mode", fallback="system"))
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —è–∑—ã–∫ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ –∏–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∏–π.
        self.language_mode = tk.StringVar(value=self.app_config.get("Language", "mode", fallback="ru"))

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —à—Ä–∏—Ñ—Ç—ã –°–†–ê–ó–£, —á—Ç–æ–±—ã –æ–Ω–∏ –±—ã–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏–¥–∂–µ—Ç–æ–≤.
        self.font_main = ("Segoe UI", 11)
        self.font_small = ("Segoe UI", 10, "italic")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ttk.Style –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –≤–∏–¥–∂–µ—Ç–æ–≤ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º.
        self.style = ttk.Style(self)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ü–≤–µ—Ç–æ–≤ –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤—ã—Ö –æ–∫–æ–Ω –∏ –ª–æ–≥–∞.
        # –≠—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è –±—É–¥—É—Ç –æ–±–Ω–æ–≤–ª–µ–Ω—ã —Ñ—É–Ω–∫—Ü–∏–µ–π set_theme.
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Å–≤–µ—Ç–ª–æ–π —Ç–µ–º—ã, —Ç–∞–∫ –∫–∞–∫ –≤–∏–¥–∂–µ—Ç—ã —Å–æ–∑–¥–∞—é—Ç—Å—è –¥–æ –ø–µ—Ä–≤–æ–≥–æ –≤—ã–∑–æ–≤–∞ set_theme
        self.dialog_bg = "#FFFFFF"
        self.dialog_fg = "#222222"
        self.dialog_btn_bg = "#E0E0E0"
        self.dialog_btn_fg = "#222222"
        self.dialog_error_fg = "#FF0000"
        self.log_current_bg = "#FFFFFF"
        self.log_current_fg = "#222222"

        # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å 5 –∑–≤–µ–∑–¥–∞–º–∏
        self.rating_var = tk.IntVar(value=10) # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è rating_var –ü–ï–†–ï–î create_widgets()

        # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –º–µ–Ω—é –∏ –≤–∏–¥–∂–µ—Ç—ã, —á—Ç–æ–±—ã self.log_text —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª
        self.create_menu() # –°–æ–∑–¥–∞–µ–º –º–µ–Ω—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
        self.create_widgets() # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–∏–¥–∂–µ—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ.
        self.set_theme() # –£–¥–∞–ª–µ–Ω initial_setup=True, —Ç–∞–∫ –∫–∞–∫ –≤—Å–µ –≤–∏–¥–∂–µ—Ç—ã —É–∂–µ —Å–æ–∑–¥–∞–Ω—ã.

        # –ü–æ–∏—Å–∫ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–∫–æ–Ω–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
        self._set_app_icon()

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —è–∑—ã–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
        self.set_language(self.language_mode.get(), initial_setup=True)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞.
        last_search_query = self.app_config.get("Search", "last_query", fallback="")
        self.search_var.set(last_search_query)

        self.load_mods_and_assign_priorities()
        self.update_mod_count_label()  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–æ–≤
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–æ–ª–æ—Å–∫–∏
        self.hue_offset = 0.0 # –°–º–µ—â–µ–Ω–∏–µ –æ—Ç—Ç–µ–Ω–∫–∞ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
        self.animation_speed = 0.01 # –°–∫–æ—Ä–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏ (—á–µ–º –º–µ–Ω—å—à–µ, —Ç–µ–º –±—ã—Å—Ç—Ä–µ–µ)
        self.segment_count = 50 # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–ª–æ—Å–∫–∏
        self.animate_colorful_line() # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–æ–ª–æ—Å–∫–∏

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
        self.protocol("WM_DELETE_WINDOW", self.on_closing)

    def _set_app_icon(self):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏–∫–æ–Ω–∫—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ icon.ico."""
        icon_path_candidates = [
            os.path.join(os.getcwd(), 'icon.ico'), # –¢–µ–∫—É—â–∞—è —Ä–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è.
            os.path.join(self.program_root_dir, 'icon.ico'), # –ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã.
        ]
        if getattr(sys, 'frozen', False): # –î–ª—è —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö PyInstaller –ø–∞–∫–µ—Ç–æ–≤.
            # PyInstaller –∫–ª–∞–¥–µ—Ç —Ñ–∞–π–ª—ã –≤ sys._MEIPASS
            icon_path_candidates.append(os.path.join(sys._MEIPASS, 'icon.ico'))

        icon_loaded = False
        for icon_path in icon_path_candidates:
            if os.path.exists(icon_path):
                try:
                    self.iconbitmap(icon_path)
                    icon_loaded = True
                    break
                except tk.TclError as e:
                    print(f"WARNING: Failed to load icon from '{icon_path}'. Details: {e}")
                except Exception as e:
                    print(f"WARNING: An unexpected error occurred while loading icon '{icon_path}': {e}")
            
        if not icon_loaded:
            print("INFO: No 'icon.ico' found or could not be loaded. Running without custom icon.")

    def on_closing(self):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
        """
        self.save_app_config()
        self.destroy() # –ó–∞–∫—Ä—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.

    def load_app_config(self):
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ config.ini.
        """
        if os.path.exists(self.config_file):
            try:
                self.app_config.read(self.config_file, encoding='utf-8')
            except Exception as e:
                # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —á—Ç–µ–Ω–∏—è, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å, —Ç–∞–∫ –∫–∞–∫ –ª–æ–≥ –µ—â–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å–µ–∫—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ –∫–æ–Ω—Ñ–∏–≥–µ, —Å–æ–∑–¥–∞–µ–º –∏—Ö, –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.
        for section in ["Paths", "Search", "Theme", "Language"]:
            if not self.app_config.has_section(section):
                self.app_config.add_section(section)

    def save_app_config(self):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ —Ñ–∞–π–ª config.ini.
        """
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∫–æ–Ω—Ñ–∏–≥–∞.
        self.app_config.set("Search", "last_query", self.search_var.get())
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–º—ã –∏ —è–∑—ã–∫–∞.
        self.app_config.set("Theme", "mode", self.theme_mode.get())
        self.app_config.set("Language", "mode", self.language_mode.get())
        try:
            with open(self.config_file, 'w', encoding='utf-8') as configfile:
                self.app_config.write(configfile)
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")

    def set_language(self, lang_code, initial_setup=False):
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.
        :param lang_code: –ö–æ–¥ —è–∑—ã–∫–∞ ("en" –¥–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ, "ru" –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ).
        :param initial_setup: –ï—Å–ª–∏ True, —Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ,
                              –∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥ –Ω–µ –±—É–¥—É—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫.
        """
        localization.set_language(lang_code)
        self.current_lang = localization.language_dict[localization.language] # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
        self.update_ui_texts() # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —Ç–µ–∫—Å—Ç—ã –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ.
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ log_text —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–µ–∂–¥–µ —á–µ–º –ø—ã—Ç–∞—Ç—å—Å—è —á—Ç–æ-—Ç–æ –≤ –Ω–µ–≥–æ –∑–∞–ø–∏—Å–∞—Ç—å,
        # –∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞.
        if hasattr(self, 'log_text'):
            self.log(f"{self.current_lang['language_menu']}: {self.current_lang[f'language_{lang_code}']}", add_timestamp=False)

    def update_ui_texts(self):
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —è–∑—ã–∫–æ–º.
        """
        self.title(self.current_lang["app_title"])

        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–¥–ø–∏—Å–∏ –≤ –º–µ–Ω—é. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ menubar, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ.
        if hasattr(self, 'menubar'):
            menu_labels = {
                "file_menu": self.file_menu,
                "edit_menu": self.edit_menu,
                "settings_menu": self.settings_menu,
                "help_menu": self.help_menu,
            }
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ—Ä–Ω–µ–≤—ã—Ö –º–µ–Ω—é
            for i, (key, menu_obj) in enumerate(menu_labels.items()):
                self.menubar.entryconfig(i + 1, label=self.current_lang[key])

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ–¥–º–µ–Ω—é "–§–∞–π–ª"
            self.file_menu.entryconfig(0, label=self.current_lang["file_open"])
            self.file_menu.entryconfig(1, label=self.current_lang["file_save"])
            self.file_menu.entryconfig(2, label=self.current_lang["file_save_as"])
            self.file_menu.entryconfig(4, label=self.current_lang["file_exit"])

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ–¥–º–µ–Ω—é "–ü—Ä–∞–≤–∫–∞"
            self.edit_menu.entryconfig(0, label=self.current_lang["edit_import"])
            self.edit_menu.entryconfig(1, label=self.current_lang["edit_export_csv"])
            self.edit_menu.entryconfig(3, label=self.current_lang["edit_reset_priorities"])
            self.edit_menu.entryconfig(4, label=self.current_lang["edit_restore_defaults"])
            self.edit_menu.entryconfig(5, label=self.current_lang["edit_delete_mod"])
            self.edit_menu.entryconfig(6, label=self.current_lang["delete_all_mods"])

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ–¥–º–µ–Ω—é "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
            self.settings_menu.entryconfig(0, label=self.current_lang["theme_menu"])
            self.theme_menu.entryconfig(0, label=self.current_lang["theme_system"])
            self.theme_menu.entryconfig(1, label=self.current_lang["theme_dark"])
            self.theme_menu.entryconfig(2, label=self.current_lang["theme_light"])

            self.settings_menu.entryconfig(1, label=self.current_lang["language_menu"])
            self.language_menu.entryconfig(0, label=self.current_lang["language_en"])
            self.language_menu.entryconfig(1, label=self.current_lang["language_ru"])
            self.settings_menu.entryconfig(3, label=self.current_lang["settings_modloader_path"])

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ–¥–º–µ–Ω—é "–ü–æ–º–æ—â—å"
            self.help_menu.entryconfig(0, label=self.current_lang["help_about"])
            self.help_menu.entryconfig(1, label=self.current_lang["help_author"])
            self.help_menu.entryconfig(2, label=self.current_lang["help_updates"])
            self.help_menu.entryconfig(3, label=self.current_lang["help_help"])
            self.help_menu.add_command(label=self.current_lang["help_contact"], command=self.contact_support)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç—ã –≤–∏–¥–∂–µ—Ç–æ–≤
        self.search_label.config(text=self.current_lang["search_mod"])
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç—ã –∫–Ω–æ–ø–æ–∫, –µ—Å–ª–∏ –æ–Ω–∏ —è–≤–ª—è—é—Ç—Å—è –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
        if hasattr(self, 'update_mods_button_frame'):
            self.update_mods_button_frame.button_widget.config(text=self.current_lang["update_mod_list"])
        if hasattr(self, 'generate_ini_button_frame'):
            self.generate_ini_button_frame.button_widget.config(text=self.current_lang["generate_ini"])
        if hasattr(self, 'clear_log_button_frame'):
            self.clear_log_button_frame.button_widget.config(text=self.current_lang["clear_log"])
        if hasattr(self, 'select_all_log_button_frame'):
            self.select_all_log_button_frame.button_widget.config(text=self.current_lang["select_all_log"])
        if hasattr(self, 'copy_all_log_button_frame'):
            self.copy_all_log_button_frame.button_widget.config(text=self.current_lang["copy_all_log"])

        self.log_label.config(text=self.current_lang["log_label"])
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤ Treeview
        self.tree.heading("mod_name", text=self.current_lang["mod_column"])
        self.tree.heading("priority", text=self.current_lang["priority_column"])

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø–æ–¥–ø–∏—Å–∏ –∞–≤—Ç–æ—Ä–∞
        self.author_label.config(text=self.current_lang["author_label"])

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏
        ToolTip(self.search_entry, self.current_lang["search_syntax_help"])
        if hasattr(self, 'update_mods_button_frame'):
            ToolTip(self.update_mods_button_frame.button_widget, self.current_lang["update_mod_list"])
        if hasattr(self, 'generate_ini_button_frame'):
            ToolTip(self.generate_ini_button_frame.button_widget, self.current_lang["generate_ini"])
        if hasattr(self, 'clear_log_button_frame'):
            ToolTip(self.clear_log_button_frame.button_widget, self.current_lang["clear_log"])
        if hasattr(self, 'select_all_log_button_frame'):
            ToolTip(self.select_all_log_button_frame.button_widget, self.current_lang["select_all_log"])
        if hasattr(self, 'copy_all_log_button_frame'):
            ToolTip(self.copy_all_log_button_frame.button_widget, self.current_lang["copy_all_log"])
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞
        if hasattr(self, 'rate_label'):
            self.rate_label.config(text=self.current_lang["rate_program_label"])

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –ª–µ–π–±–ª–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–æ–¥–æ–≤
        self.update_mod_count_label()


    def create_menu(self):
        """
        –°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –ø—É–Ω–∫—Ç–∞–º–∏ "–§–∞–π–ª", "–ü—Ä–∞–≤–∫–∞", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏" –∏ "–ü–æ–º–æ—â—å".
        """
        self.menubar = tk.Menu(self)
        self.config(menu=self.menubar)

        # --- –ú–µ–Ω—é "–§–∞–π–ª" ---
        self.file_menu = tk.Menu(self.menubar, tearoff=0)
        self.menubar.add_cascade(label=self.current_lang["file_menu"], menu=self.file_menu)
        self.file_menu.add_command(label=self.current_lang["file_open"], command=self.open_ini_file)
        self.file_menu.add_command(label=self.current_lang["file_save"], command=self.save_ini_file)
        self.file_menu.add_command(label=self.current_lang["file_save_as"], command=self.save_ini_file_as)
        self.file_menu.add_separator()
        self.file_menu.add_command(label=self.current_lang["file_exit"], command=self.on_closing)

        # --- –ú–µ–Ω—é "–ü—Ä–∞–≤–∫–∞" ---
        self.edit_menu = tk.Menu(self.menubar, tearoff=0)
        self.menubar.add_cascade(label=self.current_lang["edit_menu"], menu=self.edit_menu)
        self.edit_menu.add_command(label=self.current_lang["edit_import"], command=self.import_priorities_from_file)
        self.edit_menu.add_command(label=self.current_lang["edit_export_csv"], command=self.export_to_csv)
        self.edit_menu.add_separator()
        self.edit_menu.add_command(label=self.current_lang["edit_reset_priorities"], command=self.reset_all_priorities)
        self.edit_menu.add_command(label=self.current_lang["edit_restore_defaults"], command=self.restore_default_priorities)
        self.edit_menu.add_command(label=self.current_lang["edit_delete_mod"], command=self.delete_selected_mods)
        self.edit_menu.add_command(label=self.current_lang["delete_all_mods"], command=self.delete_all_mods)

        # --- –ú–µ–Ω—é "–ù–∞—Å—Ç—Ä–æ–π–∫–∏" ---
        self.settings_menu = tk.Menu(self.menubar, tearoff=0)
        self.menubar.add_cascade(label=self.current_lang["settings_menu"], menu=self.settings_menu)

        # –ü–æ–¥–º–µ–Ω—é "–¢–µ–º–∞"
        self.theme_menu = tk.Menu(self.settings_menu, tearoff=0)
        self.settings_menu.add_cascade(label=self.current_lang["theme_menu"], menu=self.theme_menu)
        self.theme_menu.add_radiobutton(label=self.current_lang["theme_system"], variable=self.theme_mode, value="system", command=lambda: self.set_theme("system"))
        self.theme_menu.add_radiobutton(label=self.current_lang["theme_dark"], variable=self.theme_mode, value="dark", command=lambda: self.set_theme("dark"))
        self.theme_menu.add_radiobutton(label=self.current_lang["theme_light"], variable=self.theme_mode, value="light", command=lambda: self.set_theme("light"))

        # –ü–æ–¥–º–µ–Ω—é "–Ø–∑—ã–∫"
        self.language_menu = tk.Menu(self.settings_menu, tearoff=0)
        self.settings_menu.add_cascade(label=self.current_lang["language_menu"], menu=self.language_menu)
        self.language_menu.add_radiobutton(label=self.current_lang["language_en"], variable=self.language_mode, value="en", command=lambda: self.set_language("en"))
        self.language_menu.add_radiobutton(label=self.current_lang["language_ru"], variable=self.language_mode, value="ru", command=lambda: self.set_language("ru"))

        self.settings_menu.add_separator()
        self.settings_menu.add_command(label=self.current_lang["settings_modloader_path"], command=self.change_modloader_path)

        # --- –ú–µ–Ω—é "–ü–æ–º–æ—â—å" ---
        self.help_menu = tk.Menu(self.menubar, tearoff=0)
        self.menubar.add_cascade(label=self.current_lang["help_menu"], menu=self.help_menu)
        self.help_menu.add_command(label=self.current_lang["help_about"], command=self.show_about)
        self.help_menu.add_command(label=self.current_lang["help_author"], command=self.show_author_info)
        self.help_menu.add_command(label=self.current_lang["help_updates"], command=self.check_for_updates)
        self.help_menu.add_command(label=self.current_lang["help_help"], command=self.show_help)
        self.help_menu.add_command(label=self.current_lang["help_contact"], command=self.contact_support)

    def set_theme(self, mode=None):
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–º—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (—Å–≤–µ—Ç–ª–∞—è, —Ç–µ–º–Ω–∞—è, —Å–∏—Å—Ç–µ–º–Ω–∞—è).
        :param mode: 'light', 'dark', 'system' –∏–ª–∏ None (–¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è self.theme_mode.get()).
        """
        if mode is None:
            mode = self.theme_mode.get()
        else:
            self.theme_mode.set(mode) # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é, —á—Ç–æ–±—ã —Ä–∞–¥–∏–æ–∫–Ω–æ–ø–∫–∏ –±—ã–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã.

        if mode == "system":
            if os.name == 'nt' and is_windows_dark_theme():
                selected_theme = "dark"
            else:
                selected_theme = "light"
        else:
            selected_theme = mode

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º—ã
        if selected_theme == "dark":
            self.style.theme_use("clam") # 'clam' - —ç—Ç–æ —Ö–æ—Ä–æ—à–∞—è –±–∞–∑–∞ –¥–ª—è —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã
            bg_color = "#2e2e2e"
            fg_color = "#ffffff"
            tree_bg = "#3c3c3c"
            tree_fg = "#ffffff"
            tree_heading_bg = "#4a4a4a"
            tree_selected_bg = "#555555"
            tree_selected_fg = "#ffffff"
            input_bg = "#4a4a4a"
            input_fg = "#ffffff"
            log_bg = "#1e1e1e"
            log_fg = "#cccccc"
            button_bg = "#4a4a4a"
            button_fg = "#ffffff"
            # –¶–≤–µ—Ç–∞ –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤ –≤ —Ç–µ–º–Ω–æ–π —Ç–µ–º–µ
            self.dialog_bg = "#3c3c3c"
            self.dialog_fg = "#ffffff"
            self.dialog_btn_bg = "#555555"
            self.dialog_btn_fg = "#ffffff"
            self.dialog_error_fg = "#FF6B6B" # –ë–æ–ª–µ–µ –º—è–≥–∫–∏–π –∫—Ä–∞—Å–Ω—ã–π –¥–ª—è —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã

            # –¶–≤–µ—Ç–∞ –¥–ª—è —Å–∫—Ä–æ–ª–ª–±–∞—Ä–∞ –≤ —Ç–µ–º–Ω–æ–π —Ç–µ–º–µ
            scrollbar_trough_color = "#3a3a3a"
            scrollbar_thumb_color = "#6a6a6a"
            scrollbar_active_thumb_color = "#8a8a8a"
            scrollbar_border_color = "#5a5a5a"
        else: # light theme
            self.style.theme_use("clam") # 'clam' —Ç–æ–∂–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Å–≤–µ—Ç–ª–æ–π —Ç–µ–º—ã
            bg_color = "#f0f0f0"
            fg_color = "#000000"
            tree_bg = "#ffffff"
            tree_fg = "#000000"
            tree_heading_bg = "#e0e0e0"
            tree_selected_bg = "#a8d8ff"
            tree_selected_fg = "#000000"
            input_bg = "#ffffff"
            input_fg = "#000000"
            log_bg = "#ffffff"
            log_fg = "#333333"
            button_bg = "#e0e0e0"
            button_fg = "#000000"
            # –¶–≤–µ—Ç–∞ –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤ –≤ —Å–≤–µ—Ç–ª–æ–π —Ç–µ–º–µ
            self.dialog_bg = "#FFFFFF"
            self.dialog_fg = "#222222"
            self.dialog_btn_bg = "#E0E0E0"
            self.dialog_btn_fg = "#222222"
            self.dialog_error_fg = "#FF0000"

            # –¶–≤–µ—Ç–∞ –¥–ª—è —Å–∫—Ä–æ–ª–ª–±–∞—Ä–∞ –≤ —Å–≤–µ—Ç–ª–æ–π —Ç–µ–º–µ
            scrollbar_trough_color = "#e0e0e0"
            scrollbar_thumb_color = "#b0b0b0"
            scrollbar_active_thumb_color = "#909090"
            scrollbar_border_color = "#c0c0c0"

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ–Ω –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
        self.config(bg=bg_color)

        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç–∏–ª–µ–π ttk
        self.style.configure(".", background=bg_color, foreground=fg_color, font=self.font_main)
        # TFrame style handles background for ttk.Frame
        self.style.configure("TFrame", background=bg_color)
        self.style.configure("TLabel", background=bg_color, foreground=fg_color)
        self.style.configure("TButton", background=button_bg, foreground=button_fg, borderwidth=1, focusthickness=3, focuscolor='none')
        self.style.map("TButton", background=[('active', button_bg)], foreground=[('active', button_fg)]) # Fix for active state

        self.style.configure("TEntry", fieldbackground=input_bg, foreground=input_fg, borderwidth=1)
        self.style.configure("Treeview",
                             background=tree_bg,
                             foreground=tree_fg,
                             fieldbackground=tree_bg,
                             rowheight=25)
        self.style.map("Treeview",
                       background=[('selected', tree_selected_bg)],
                       foreground=[('selected', tree_selected_fg)])
        self.style.configure("Treeview.Heading",
                             background=tree_heading_bg,
                             foreground=fg_color,
                             font=self.font_main)
        self.style.map("Treeview.Heading",
                       background=[('active', tree_heading_bg)]) # Prevent heading background change on hover

        # Scrollbar styling
        self.style.configure("Vertical.TScrollbar",
                             troughcolor=scrollbar_trough_color,
                             background=scrollbar_thumb_color,
                             bordercolor=scrollbar_border_color,
                             arrowcolor=fg_color, # Arrows might not be visible depending on layout
                             relief="flat",
                             borderwidth=0) # Remove border for a cleaner look

        self.style.map("Vertical.TScrollbar",
                       background=[('active', scrollbar_active_thumb_color)],
                       troughcolor=[('active', scrollbar_trough_color)],
                       bordercolor=[('active', scrollbar_border_color)])

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç–∞ –ª–æ–≥–∞
        self.log_current_bg = log_bg
        self.log_current_fg = log_fg
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ self.log_text –ø–µ—Ä–µ–¥ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        if hasattr(self, 'log_text'):
            self.log_text.config(bg=self.log_current_bg, fg=self.log_current_fg, insertbackground=self.log_current_fg)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç–∞ –¥–ª—è –≤–∏–¥–∂–µ—Ç–∞ Entry
        if hasattr(self, 'search_entry'):
            self.search_entry.config(bg=input_bg, fg=input_fg, insertbackground=input_fg)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ–Ω Canvas –¥–ª—è –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø–æ–ª–æ—Å–∫–∏
        if hasattr(self, 'colorful_line'):
            self.colorful_line.config(bg=bg_color)
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ–Ω Canvas –¥–ª—è —Ä–∞–º–∫–∏ –ø–æ–∏—Å–∫–∞
        if hasattr(self, 'search_border_canvas'):
            self.search_border_canvas.config(bg=bg_color)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç–∞ –¥–ª—è –∫–Ω–æ–ø–æ–∫ tk.Button, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ Canvas
        # –≠—Ç–æ –Ω—É–∂–Ω–æ, –ø–æ—Ç–æ–º—É —á—Ç–æ tk.Button –Ω–µ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ ttk.Style
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ button_frame —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –ø—Ä–µ–∂–¥–µ —á–µ–º –ø—ã—Ç–∞—Ç—å—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∏—Ö –∞—Ç—Ä–∏–±—É—Ç–∞–º
        if hasattr(self, 'update_mods_button_frame') and self.update_mods_button_frame:
            self.update_mods_button_frame.button_widget.config(bg=button_bg, fg=button_fg)
        if hasattr(self, 'generate_ini_button_frame') and self.generate_ini_button_frame:
            self.generate_ini_button_frame.button_widget.config(bg=button_bg, fg=button_fg)
        if hasattr(self, 'clear_log_button_frame') and self.clear_log_button_frame:
            self.clear_log_button_frame.button_widget.config(bg=button_bg, fg=button_fg)
        if hasattr(self, 'copy_all_log_button_frame') and self.copy_all_log_button_frame:
            self.copy_all_log_button_frame.button_widget.config(bg=button_bg, fg=button_fg)
        if hasattr(self, 'select_all_log_button_frame') and self.select_all_log_button_frame:
            self.select_all_log_button_frame.button_widget.config(bg=button_bg, fg=button_fg)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç–∞ –¥–ª—è –∑–≤–µ–∑–¥
        if hasattr(self, 'star_labels'):
            for star_label in self.star_labels:
                star_label.config(bg=bg_color)
            self.update_stars() # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç–∞ –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–≤–µ–∑–¥

        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–º–µ–Ω–µ —Ç–µ–º—ã
        if selected_theme == "dark":
            theme_name = self.current_lang["theme_dark"]
        elif selected_theme == "light":
            theme_name = self.current_lang["theme_light"]
        else: # Should not happen, but for safety
            theme_name = self.current_lang["system_theme"]
        self.log(self.current_lang["theme_changed_to"].format(theme_name), add_timestamp=False)

    def create_widgets(self):
        """
        –°–æ–∑–¥–∞–µ—Ç –∏ —Ä–∞–∑–º–µ—â–∞–µ—Ç –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–∏–¥–∂–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.
        """
        # --- –§—Ä–µ–π–º –¥–ª—è –ø–æ–∏—Å–∫–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –∏ –∫–Ω–æ–ø–æ–∫ ---
        self.top_frame = ttk.Frame(self)
        self.top_frame.pack(side=tk.TOP, fill=tk.X, padx=10, pady=5)

        self.search_label = ttk.Label(self.top_frame, text=self.current_lang["search_mod"], font=self.font_main)
        self.search_label.pack(side=tk.LEFT, padx=(0, 5))

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
        # –£–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å modloader.ini" —Å–ø—Ä–∞–≤–∞
        self.generate_ini_button_frame = self._create_animated_button(
            self.top_frame,
            self.current_lang["generate_ini"],
            self.generate_modloader_ini,
            self.current_lang["generate_ini"]
        )
        self.generate_ini_button_frame.pack(side=tk.RIGHT, fill=tk.X, expand=True) # pack —Å expand

        # –£–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–æ–≤" —Å–ø—Ä–∞–≤–∞, –ø–µ—Ä–µ–¥ –∫–Ω–æ–ø–∫–æ–π "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å"
        self.update_mods_button_frame = self._create_animated_button(
            self.top_frame,
            self.current_lang["update_mod_list"],
            self.load_mods_and_assign_priorities,
            self.current_lang["update_mod_list"]
        )
        self.update_mods_button_frame.pack(side=tk.RIGHT, fill=tk.X, expand=True, padx=(0, 5)) 

        # –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –ø–æ–ª—è –ø–æ–∏—Å–∫–∞ –∏ –µ–≥–æ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞–º–∫–∏
        # –¢–µ–ø–µ—Ä—å search_input_frame –±—É–¥–µ—Ç —Ä–∞—Å—à–∏—Ä—è—Ç—å—Å—è, —á—Ç–æ–±—ã –∑–∞–Ω—è—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ —Å–ª–µ–≤–∞
        self.search_input_frame = ttk.Frame(self.top_frame, style="TFrame")
        self.search_input_frame.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=(0, 10))

        # –°–æ–∑–¥–∞–µ–º Canvas –¥–ª—è –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞–º–∫–∏ –≤–æ–∫—Ä—É–≥ –ø–æ–ª—è –ø–æ–∏—Å–∫–∞
        self.search_border_canvas = tk.Canvas(self.search_input_frame, height=30, highlightthickness=0)
        self.search_border_canvas.pack(side=tk.TOP, fill=tk.BOTH, expand=True) # Canvas –∑–∞–ø–æ–ª–Ω—è–µ—Ç —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —Ñ—Ä–µ–π–º
        
        self.search_var = tk.StringVar()
        self.search_entry = tk.Entry(self.search_border_canvas, textvariable=self.search_var, font=self.font_main, relief=tk.FLAT)
        # –í—Å—Ç—Ä–∞–∏–≤–∞–µ–º Entry –≤–∏–¥–∂–µ—Ç –≤–Ω—É—Ç—Ä—å Canvas.
        # –ï–≥–æ –ø–æ–∑–∏—Ü–∏—è –∏ —Ä–∞–∑–º–µ—Ä –±—É–¥—É—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Ñ—É–Ω–∫—Ü–∏–µ–π resize_search_entry_and_border.
        self.search_entry_window_id = self.search_border_canvas.create_window(
            0, 0, # –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è, –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∞
            anchor="nw",
            window=self.search_entry
        )
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ Canvas –∫ —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä–∞—è –∏–∑–º–µ–Ω–∏—Ç —Ä–∞–∑–º–µ—Ä Entry –∏ —Ä–∞–º–∫–∏
        self.search_border_canvas.bind("<Configure>", self.resize_search_entry_and_border)

        self.search_entry.bind("<KeyRelease>", self.apply_search_filter)
        ToolTip(self.search_entry, self.current_lang["search_syntax_help"]) # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Ä–∞–º–∫–∏ –ø–æ–∏—Å–∫–∞
        self.search_hue_offset = 0.0
        self.search_animation_speed = 0.02 # –ù–µ–º–Ω–æ–≥–æ –±—ã—Å—Ç—Ä–µ–µ –∞–Ω–∏–º–∞—Ü–∏—è –¥–ª—è —Ä–∞–º–∫–∏
        self.animate_search_border()

        # --- –í–µ—Ä—Ö–Ω—è—è –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–∞–∑–Ω–æ—Ü–≤–µ—Ç–Ω–∞—è –ø–æ–ª–æ—Å–∫–∞ (–Ω–æ–≤–∞—è) ---
        self.super_top_colorful_line = tk.Canvas(self, height=5, bg=self.cget('bg'), highlightthickness=0)
        self.super_top_colorful_line.pack(fill=tk.X, padx=10, pady=(5, 0))
        self.super_top_color_segment_count = 50
        self.super_top_color_hue_offset = 0.75 # –û—Ç–ª–∏—á–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–π –ø–æ–ª–æ—Å–∫–∏
        self.animate_super_top_colorful_line()
        self.super_top_colorful_line.bind("<Configure>", self.draw_super_top_colorful_line)


        # --- –°—á—ë—Ç—á–∏–∫ –º–æ–¥–æ–≤ ---
        self.mod_count_var = tk.StringVar()
        self.mod_count_label = ttk.Label(self, textvariable=self.mod_count_var, font=self.font_main)
        self.mod_count_label.pack(fill=tk.X, padx=10, pady=(0, 2))
        self.update_mod_count_label()

        # --- –í–µ—Ä—Ö–Ω—è—è –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–∞–∑–Ω–æ—Ü–≤–µ—Ç–Ω–∞—è –ø–æ–ª–æ—Å–∫–∞ (—Å—Ç–∞—Ä–∞—è) ---
        self.top_colorful_line = tk.Canvas(self, height=5, bg=self.cget('bg'), highlightthickness=0)
        self.top_colorful_line.pack(fill=tk.X, padx=10, pady=(5, 0))
        self.top_color_segment_count = 50
        self.top_color_hue_offset = 0.0
        self.animate_top_colorful_line()
        self.top_colorful_line.bind("<Configure>", self.draw_top_colorful_line)

        # --- –§—Ä–µ–π–º –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –º–æ–¥–æ–≤ ---
        self.tree_frame = ttk.Frame(self)
        self.tree_frame.pack(side=tk.TOP, fill=tk.BOTH, expand=True, padx=10, pady=5)

        self.tree = ttk.Treeview(self.tree_frame, columns=("mod_name", "priority"), show="headings")
        self.tree.heading("mod_name", text=self.current_lang["mod_column"], command=lambda: self.sort_treeview("mod_name", False))
        self.tree.heading("priority", text=self.current_lang["priority_column"], command=lambda: self.sort_treeview("priority", False))
        self.tree.column("mod_name", width=300, anchor=tk.W)
        self.tree.column("priority", width=100, anchor=tk.CENTER)
        self.tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)

        # –°–∫—Ä–æ–ª–ª–±–∞—Ä –¥–ª—è Treeview
        self.tree_scrollbar = ttk.Scrollbar(self.tree_frame, orient="vertical", command=self.tree.yview, style="Vertical.TScrollbar")
        self.tree_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        self.tree.configure(yscrollcommand=self.tree_scrollbar.set)

        self.tree.bind("<Double-1>", self.on_item_double_click) # –î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
        self.tree.bind("<Delete>", lambda e: self.delete_selected_mods()) # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏—à–∏ Delete

        # --- –†–∞–∑–Ω–æ—Ü–≤–µ—Ç–Ω–∞—è –ø–æ–ª–æ—Å–∫–∞ (–Ω–∏–∂–Ω—è—è) ---
        # –°–æ–∑–¥–∞–µ–º Canvas –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –ø–æ–ª–æ—Å–∫–∏
        self.colorful_line = tk.Canvas(self, height=5, bg=self.cget('bg'), highlightthickness=0)
        self.colorful_line.pack(fill=tk.X, padx=10, pady=5)
        # –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å–µ–≥–º–µ–Ω—Ç—ã –ø–æ–ª–æ—Å–∫–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
        self.colorful_line.bind("<Configure>", self.draw_colorful_line)

        # --- –ù–∏–∂–Ω—è—è —Å–µ–∫—Ü–∏—è (–ª–æ–≥, —Ä–µ–π—Ç–∏–Ω–≥, –∞–≤—Ç–æ—Ä) ---
        self.bottom_section_frame = ttk.Frame(self)
        self.bottom_section_frame.pack(side=tk.BOTTOM, fill=tk.X, padx=10, pady=5)

        # --- –§—Ä–µ–π–º –¥–ª—è –ª–æ–≥–∞ (–≤–Ω—É—Ç—Ä–∏ bottom_section_frame) ---
        self.log_frame = ttk.Frame(self.bottom_section_frame)
        self.log_frame.pack(side=tk.TOP, fill=tk.X, pady=(0, 5)) # –û—Ç—Å—Ç—É–ø —Å–Ω–∏–∑—É –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º

        self.log_label = ttk.Label(self.log_frame, text=self.current_lang["log_label"], font=self.font_main)
        self.log_label.pack(side=tk.TOP, anchor=tk.W)

        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è tk.Text –∏ –µ–≥–æ ttk.Scrollbar
        self.log_text_container = ttk.Frame(self.log_frame)
        self.log_text_container.pack(side=tk.TOP, fill=tk.BOTH, expand=True, pady=(5, 0))

        self.log_text = tk.Text(self.log_text_container, wrap=tk.WORD, height=8, state='disabled',
                                                 font=("Consolas", 9), relief=tk.FLAT,
                                                 bg=self.log_current_bg, fg=self.log_current_fg,
                                                 insertbackground=self.log_current_fg)
        self.log_text.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)

        # –°–∫—Ä–æ–ª–ª–±–∞—Ä –¥–ª—è –ª–æ–≥–∞
        self.log_scrollbar = ttk.Scrollbar(self.log_text_container, orient="vertical", command=self.log_text.yview, style="Vertical.TScrollbar")
        self.log_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        self.log_text.config(yscrollcommand=self.log_scrollbar.set)

        # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –ª–æ–≥–∞
        self.log_context_menu = tk.Menu(self.log_text, tearoff=0)
        self.log_context_menu.add_command(label=self.current_lang["select_all_log"], command=self.select_all_log)
        self.log_context_menu.add_command(label=self.current_lang["copy_all_log"], command=self.copy_all_log)
        self.log_context_menu.add_command(label=self.current_lang["clear_log"], command=self.clear_log)
        self.log_text.bind("<Button-3>", self.show_log_context_menu)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–æ–º
        self.log_buttons_frame = ttk.Frame(self.log_frame)
        self.log_buttons_frame.pack(side=tk.BOTTOM, fill=tk.X, pady=(5, 0))

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –¥–ª—è –ª–æ–≥–∞
        self.clear_log_button_frame = self._create_animated_button(
            self.log_buttons_frame,
            self.current_lang["clear_log"],
            self.clear_log,
            self.current_lang["clear_log"]
        )
        self.clear_log_button_frame.pack(side=tk.RIGHT)

        self.copy_all_log_button_frame = self._create_animated_button(
            self.log_buttons_frame,
            self.current_lang["copy_all_log"],
            self.copy_all_log,
            self.current_lang["copy_all_log"]
        )
        self.copy_all_log_button_frame.pack(side=tk.RIGHT, padx=(0, 5))

        self.select_all_log_button_frame = self._create_animated_button(
            self.log_buttons_frame,
            self.current_lang["select_all_log"],
            self.select_all_log,
            self.current_lang["select_all_log"]
        )
        self.select_all_log_button_frame.pack(side=tk.RIGHT, padx=(0, 5))

        # --- –§—Ä–µ–π–º –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞ (–≤–Ω—É—Ç—Ä–∏ bottom_section_frame, –ø–æ—Å–ª–µ log_frame) ---
        self.rating_frame = ttk.Frame(self.bottom_section_frame)
        self.rating_frame.pack(side=tk.TOP, pady=(0, 0)) # –û—Ç—Å—Ç—É–ø—ã –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
        
        # –ü–æ–º–µ—â–∞–µ–º –≤—Å—ë –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø–æ–¥—Ñ—Ä–µ–π–º —Å–ø—Ä–∞–≤–∞
        self.rating_inner_frame = ttk.Frame(self.rating_frame)
        self.rating_inner_frame.pack(side=tk.RIGHT)

        self.rate_label = ttk.Label(self.rating_inner_frame, text=self.current_lang["rate_program_label"], font=self.font_main)
        self.rate_label.pack(side=tk.LEFT, padx=(0, 5))

        self.star_labels = []
        for i in range(5):
            star_label = tk.Label(self.rating_inner_frame, text=STAR_EMPTY, font=("Segoe UI", 16)) # –£–¥–∞–ª–µ–Ω—ã cursor –∏ bind
            star_label.pack(side=tk.LEFT, padx=1)
            self.star_labels.append(star_label)
            # –£–¥–∞–ª–µ–Ω—ã –ø—Ä–∏–≤—è–∑–∫–∏ –∫ —Å–æ–±—ã—Ç–∏—è–º –¥–ª—è –Ω–µ–∏–∑–º–µ–Ω—è–µ–º–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞
            # star_label.bind("<Button-1>", lambda e, rating=i+1: self.set_rating(rating))
            # star_label.bind("<Enter>", lambda e, rating=i+1: self.hover_stars(rating))
            # star_label.bind("<Leave>", lambda e: self.hover_stars(0)) # Reset on leave
            self.star_labels.append(star_label)

        # Update star appearance initially
        self.update_stars() # –û–±–Ω–æ–≤–ª—è–µ–º, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å 5 –∑–≤–µ–∑–¥ —Å—Ä–∞–∑—É

        # –ù–∞–¥–ø–∏—Å—å –∞–≤—Ç–æ—Ä–∞ (–≤–Ω—É—Ç—Ä–∏ bottom_section_frame, –ø–æ—Å–ª–µ rating_frame)
        self.author_label = ttk.Label(self.bottom_section_frame, text=self.current_lang["author_label"], font=self.font_small)
        self.author_label.place(relx=1.0, rely=1.0, anchor='se', x=-10, y=-10)
        self.author_label.bind("<Button-1>", lambda e: self.contact_support()) # –ü–æ–∑–≤–æ–ª—è–µ—Ç –∫–ª–∏–∫–Ω—É—Ç—å –Ω–∞ –∞–≤—Ç–æ—Ä–∞ –¥–ª—è —Å–≤—è–∑–∏

    def _create_animated_button(self, parent, text, command, tooltip_text, animation_speed=0.02, border_width=2):
        """
        –°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É —Å –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞–∑–Ω–æ—Ü–≤–µ—Ç–Ω–æ–π —Ä–∞–º–∫–æ–π.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ—Ä–µ–π–º, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π Canvas —Å –∫–Ω–æ–ø–∫–æ–π –≤–Ω—É—Ç—Ä–∏.
        """
        button_frame = ttk.Frame(parent, style="TFrame")
        
        # –°–æ–∑–¥–∞–µ–º Canvas –¥–ª—è —Ä–∞–º–∫–∏
        button_canvas = tk.Canvas(button_frame, height=30, highlightthickness=0)
        button_canvas.pack(side=tk.TOP, fill=tk.BOTH, expand=True)

        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é –∫–Ω–æ–ø–∫—É –≤–Ω—É—Ç—Ä–∏ Canvas
        button = tk.Button(button_canvas, text=text, command=command,
                           relief=tk.FLAT, borderwidth=0,
                           font=self.font_main,
                           bg=self.dialog_btn_bg, fg=self.dialog_btn_fg) # –ù–∞—á–∞–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞
        
        # –í—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ Canvas
        button_window_id = button_canvas.create_window(
            border_width, border_width, # –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è, –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∞
            anchor="nw",
            window=button
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ set_theme –∏ –∞–Ω–∏–º–∞—Ü–∏–∏
        button_frame.button_canvas = button_canvas
        button_frame.button_widget = button
        button_frame.button_window_id = button_window_id
        button_frame.hue_offset = 0.0 # –°–º–µ—â–µ–Ω–∏–µ –æ—Ç—Ç–µ–Ω–∫–∞ –¥–ª—è —ç—Ç–æ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–Ω–æ–ø–∫–∏
        button_frame.animation_speed = animation_speed
        button_frame.border_width = border_width

        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ Canvas –∫ —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä–∞—è –∏–∑–º–µ–Ω–∏—Ç —Ä–∞–∑–º–µ—Ä –∫–Ω–æ–ø–∫–∏ –∏ —Ä–∞–º–∫–∏
        button_canvas.bind("<Configure>", lambda e, bf=button_frame: self._resize_animated_button(e, bf))

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Ä–∞–º–∫–∏
        self._animate_button_border(button_frame)

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
        ToolTip(button, tooltip_text)

        return button_frame

    def _resize_animated_button(self, event, button_frame):
        """–ò–∑–º–µ–Ω—è–µ—Ç —Ä–∞–∑–º–µ—Ä –∫–Ω–æ–ø–∫–∏ –∏ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –µ–µ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ä–∞–º–∫—É."""
        canvas = button_frame.button_canvas
        button = button_frame.button_widget
        border_thickness = button_frame.border_width

        canvas_width = event.width
        canvas_height = event.height

        # –í—ã—á–∏—Å–ª—è–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –∫–Ω–æ–ø–∫–∏
        button_x1 = border_thickness
        button_y1 = border_thickness
        button_width = max(1, canvas_width - 2 * border_thickness)
        button_height = max(1, canvas_height - 2 * border_thickness)

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∏ —Ä–∞–∑–º–µ—Ä –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ Button –≤–∏–¥–∂–µ—Ç–∞
        canvas.coords(button_frame.button_window_id, button_x1, button_y1)
        canvas.itemconfigure(button_frame.button_window_id, width=button_width, height=button_height)

        self._draw_button_border(button_frame) # –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Ä–∞–º–∫—É

    def _draw_button_border(self, button_frame):
        """–û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ä–∞–º–∫—É –≤–æ–∫—Ä—É–≥ –∫–Ω–æ–ø–∫–∏."""
        canvas = button_frame.button_canvas
        canvas.delete("button_border_rect") # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Ä–∞–º–∫—É
        canvas_width = canvas.winfo_width()
        canvas_height = canvas.winfo_height()
        border_width = button_frame.border_width

        # –í—ã—á–∏—Å–ª—è–µ–º —Ü–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–º–µ—â–µ–Ω–∏—è –æ—Ç—Ç–µ–Ω–∫–∞
        hue = button_frame.hue_offset % 1.0
        r, g, b = colorsys.hls_to_rgb(hue, 0.6, 1.0) # –ù–µ–º–Ω–æ–≥–æ –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∞—è —Å–≤–µ—Ç–ª–æ—Ç–∞ –¥–ª—è —Ä–∞–º–∫–∏
        color = f'#{int(r*255):02x}{int(g*255):02x}{int(b*255):02x}'

        # –†–∏—Å—É–µ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∫—Ä—ã–≤–∞–µ—Ç –≤—Å—é –æ–±–ª–∞—Å—Ç—å Canvas, –¥–µ–π—Å—Ç–≤—É—è –∫–∞–∫ —Ä–∞–º–∫–∞
        canvas.create_rectangle(
            border_width / 2, border_width / 2,
            canvas_width - border_width / 2, canvas_height - border_width / 2,
            outline=color,
            width=border_width,
            tags="button_border_rect"
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ–Ω Canvas –¥–ª—è –∫–Ω–æ–ø–∫–∏
        canvas.config(bg=self.cget('bg')) # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–Ω Canvas –≤ —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ –æ–∫–Ω–∞

    def _animate_button_border(self, button_frame):
        """–ê–Ω–∏–º–∏—Ä—É–µ—Ç —Ü–≤–µ—Ç —Ä–∞–º–∫–∏ –∫–Ω–æ–ø–∫–∏."""
        button_frame.hue_offset = (button_frame.hue_offset + button_frame.animation_speed) % 1.0
        self._draw_button_border(button_frame)
        self.after(30, self._animate_button_border, button_frame) # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∫–∞–¥—Ä

    def draw_colorful_line(self, event=None):
        """–û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç —Ä–∞–∑–Ω–æ—Ü–≤–µ—Ç–Ω—É—é –ø–æ–ª–æ—Å–∫—É –≤ Canvas."""
        canvas = self.colorful_line
        canvas.delete("all")
        canvas_width = canvas.winfo_width()
        canvas_height = canvas.winfo_height()

        # –í—ã—á–∏—Å–ª—è–µ–º —à–∏—Ä–∏–Ω—É –∫–∞–∂–¥–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞
        segment_width = canvas_width / self.segment_count

        for i in range(self.segment_count):
            # –í—ã—á–∏—Å–ª—è–µ–º –æ—Ç—Ç–µ–Ω–æ–∫ (hue) –≤ —Ü–≤–µ—Ç–æ–≤–æ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ HSL
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–æ–∑–∏—Ü–∏—é –æ—Ç 0 –¥–æ 1, –¥–æ–±–∞–≤–ª—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
            normalized_position = i / self.segment_count
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º 0.5 –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –æ—Ç—Ç–µ–Ω–∫–æ–≤, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª–µ–µ —à–∏—Ä–æ–∫–∏–π —Å–ø–µ–∫—Ç—Ä
            hue = (self.hue_offset + normalized_position * 0.5) % 1.0 
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º HLS (–æ—Ç—Ç–µ–Ω–æ–∫, —Å–≤–µ—Ç–ª–æ—Ç–∞, –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å) –≤ RGB
            # –ù–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å 1.0 –¥–ª—è —è—Ä–∫–∏—Ö —Ü–≤–µ—Ç–æ–≤, —Å–≤–µ—Ç–ª–æ—Ç–∞ 0.5 –¥–ª—è —Å—Ä–µ–¥–Ω–∏—Ö
            r, g, b = colorsys.hls_to_rgb(hue, 0.5, 1.0) 
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º RGB –∑–Ω–∞—á–µ–Ω–∏—è (0-1) –≤ —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (0-255)
            color = f'#{int(r*255):02x}{int(g*255):02x}{int(b*255):02x}'
            
            # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–µ–≥–º–µ–Ω—Ç–∞
            x1 = i * segment_width
            y1 = 0
            x2 = (i + 1) * segment_width
            y2 = canvas_height
            
            # –†–∏—Å—É–µ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞
            canvas.create_rectangle(x1, y1, x2, y2, fill=color, outline=color)

    def animate_colorful_line(self):
        """
        –§—É–Ω–∫—Ü–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä–∞—è –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–º–µ—â–µ–Ω–∏–µ –æ—Ç—Ç–µ–Ω–∫–∞ –∏ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –ø–æ–ª–æ—Å–∫—É.
        """
        self.hue_offset = (self.hue_offset + self.animation_speed) % 1.0 # –û–±–Ω–æ–≤–ª—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ –æ—Ç—Ç–µ–Ω–∫–∞
        self.draw_colorful_line() # –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –ø–æ–ª–æ—Å–∫—É —Å –Ω–æ–≤—ã–º —Å–º–µ—â–µ–Ω–∏–µ–º

        # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∫–∞–¥—Ä –∞–Ω–∏–º–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ 20 –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥ (50 –∫–∞–¥—Ä–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É)
        self.after(20, self.animate_colorful_line)

    def resize_search_entry_and_border(self, event):
        """–ò–∑–º–µ–Ω—è–µ—Ç —Ä–∞–∑–º–µ—Ä –ø–æ–ª—è –ø–æ–∏—Å–∫–∞ –∏ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –µ–≥–æ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ä–∞–º–∫—É."""
        canvas = self.search_border_canvas
        canvas_width = event.width
        canvas_height = event.height

        border_thickness = 2 # –¢–æ–ª—â–∏–Ω–∞ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞–º–∫–∏

        # –í—ã—á–∏—Å–ª—è–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –ø–æ–ª—è –≤–≤–æ–¥–∞
        entry_x1 = border_thickness
        entry_y1 = border_thickness
        entry_width = max(1, canvas_width - 2 * border_thickness)
        entry_height = max(1, canvas_height - 2 * border_thickness)

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∏ —Ä–∞–∑–º–µ—Ä –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ Entry –≤–∏–¥–∂–µ—Ç–∞
        canvas.coords(self.search_entry_window_id, entry_x1, entry_y1)
        canvas.itemconfigure(self.search_entry_window_id, width=entry_width, height=entry_height)

        self.draw_search_border() # –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Ä–∞–º–∫—É

    def draw_search_border(self, event=None):
        """–û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ä–∞–º–∫—É –≤–æ–∫—Ä—É–≥ –ø–æ–ª—è –ø–æ–∏—Å–∫–∞."""
        canvas = self.search_border_canvas
        canvas.delete("border_rect") # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Ä–∞–º–∫—É
        canvas_width = canvas.winfo_width()
        canvas_height = canvas.winfo_height()

        # –í—ã—á–∏—Å–ª—è–µ–º —Ü–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–º–µ—â–µ–Ω–∏—è –æ—Ç—Ç–µ–Ω–∫–∞
        hue = self.search_hue_offset % 1.0
        r, g, b = colorsys.hls_to_rgb(hue, 0.6, 1.0) # –ù–µ–º–Ω–æ–≥–æ –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∞—è —Å–≤–µ—Ç–ª–æ—Ç–∞ –¥–ª—è —Ä–∞–º–∫–∏
        color = f'#{int(r*255):02x}{int(g*255):02x}{int(b*255):02x}'

        # –†–∏—Å—É–µ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∫—Ä—ã–≤–∞–µ—Ç –≤—Å—é –æ–±–ª–∞—Å—Ç—å Canvas, –¥–µ–π—Å—Ç–≤—É—è –∫–∞–∫ —Ä–∞–º–∫–∞
        border_width = 2 # –¢–æ–ª—â–∏–Ω–∞ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞–º–∫–∏
        canvas.create_rectangle(
            border_width / 2, border_width / 2,
            canvas_width - border_width / 2, canvas_height - border_width / 2,
            outline=color,
            width=border_width,
            tags="border_rect"
        )

    def animate_search_border(self):
        """–ê–Ω–∏–º–∏—Ä—É–µ—Ç —Ü–≤–µ—Ç —Ä–∞–º–∫–∏ –ø–æ–ª—è –ø–æ–∏—Å–∫–∞."""
        self.search_hue_offset = (self.search_hue_offset + self.search_animation_speed) % 1.0
        self.draw_search_border()
        self.after(30, self.animate_search_border) # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∫–∞–¥—Ä

    def log(self, message, add_timestamp=True):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥-–æ–∫–Ω–æ.
        :param message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
        :param add_timestamp: –ï—Å–ª–∏ True, –¥–æ–±–∞–≤–ª—è–µ—Ç –æ—Ç–º–µ—Ç–∫—É –≤—Ä–µ–º–µ–Ω–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é.
        """
        self.log_text.config(state='normal') # –í–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
        timestamp = datetime.now().strftime("[%H:%M:%S]")
        log_message = f"{timestamp} {message}\n" if add_timestamp else f"{message}\n"
        self.log_text.insert(tk.END, log_message)
        self.log_text.see(tk.END) # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –ª–æ–≥ –¥–æ –∫–æ–Ω—Ü–∞.
        self.log_text.config(state='disabled') # –í—ã–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.

    def clear_log(self):
        """
        –û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –ª–æ–≥–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—á–∏—Å—Ç–∫–µ.
        """
        self.log_text.config(state="normal")
        self.log_text.delete(1.0, "end")
        self.log_text.config(state="disabled")
        self.log(self.current_lang["logs_cleared"], add_timestamp=False) # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É

    def select_all_log(self):
        """–í—ã–¥–µ–ª—è–µ—Ç –≤–µ—Å—å —Ç–µ–∫—Å—Ç –≤ –ª–æ–≥-–æ–∫–Ω–µ."""
        self.log_text.tag_add("sel", "1.0", tk.END)
        self.log_text.mark_set(tk.INSERT, "1.0")
        self.log_text.see(tk.INSERT)

    def copy_all_log(self):
        """–ö–æ–ø–∏—Ä—É–µ—Ç –≤–µ—Å—å —Ç–µ–∫—Å—Ç –∏–∑ –ª–æ–≥-–æ–∫–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞."""
        try:
            self.clipboard_clear()
            self.clipboard_append(self.log_text.get(1.0, tk.END).strip())
            self.update() # –û–±–Ω–æ–≤–ª—è–µ–º –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
        except tk.TclError:
            self.log("Failed to copy to clipboard.", add_timestamp=False)

    def show_log_context_menu(self, event):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –ª–æ–≥–∞."""
        try:
            self.log_context_menu.tk_popup(event.x_root, event.y_root)
        finally:
            self.log_context_menu.grab_release()

    def change_modloader_path(self):
        """
        –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–æ–≤–æ–≥–æ –ø—É—Ç–∏ –∫ modloader.
        """
        new_path = filedialog.askdirectory(title=self.current_lang["settings_modloader_path"], initialdir=self.modloader_dir)
        if new_path and os.path.isdir(new_path):
            self.modloader_dir = new_path
            self.output_ini_path = os.path.join(self.modloader_dir, OUTPUT_FILE_NAME)
            self.app_config.set("Paths", "modloader_path", self.modloader_dir)
            self.save_app_config()
            self.log(self.current_lang["modloader_path_changed"].format(self.modloader_dir))
            self.load_mods_and_assign_priorities() # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–æ–≤ —Å –Ω–æ–≤—ã–º –ø—É—Ç–µ–º
        else:
            self.log(self.current_lang["modloader_folder_not_found"].format(self.modloader_dir))

    def load_mods_and_assign_priorities(self):
        """
        –°–∫–∞–Ω–∏—Ä—É–µ—Ç –ø–∞–ø–∫—É modloader, –∑–∞–≥—Ä—É–∂–∞–µ—Ç –º–æ–¥—ã –∏ –Ω–∞–∑–Ω–∞—á–∞–µ—Ç –∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã.
        –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –º–æ–≥—É—Ç –±—ã—Ç—å –≤–∑—è—Ç—ã –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ modloader.ini, –∏–∑ ini-—Ñ–∞–π–ª–æ–≤ –º–æ–¥–æ–≤
        –∏–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
        """
        self.mods.clear() # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –º–æ–¥–æ–≤.
        self.tree.delete(*self.tree.get_children()) # –û—á–∏—â–∞–µ–º Treeview.

        self.log(self.current_lang["scanning_modloader_folder"].format(self.modloader_dir))

        if not os.path.isdir(self.modloader_dir):
            self.log(self.current_lang["modloader_folder_not_found"].format(self.modloader_dir))
            return

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ modloader.ini
        current_ini_priorities = self._read_ini_priorities(self.output_ini_path)

        found_mod_count = 0
        for entry_name in os.listdir(self.modloader_dir):
            entry_path = os.path.join(self.modloader_dir, entry_name)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø–∏—Å—å –ø–∞–ø–∫–æ–π –∏ –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ —Å —Å–∏–º–≤–æ–ª–∞ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
            if os.path.isdir(entry_path) and not entry_name.startswith(('_', '.')):
                self.log(self.current_lang["found_mod_folder"].format(entry_name))
                priority = None

                # 1. –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –≤–∑—è—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏–∑ modloader.ini
                if entry_name in current_ini_priorities:
                    priority = current_ini_priorities[entry_name]
                    self.log(self.current_lang["priority_from_mod_ini"].format(priority, entry_name))
                else:
                    # 2. –ó–∞—Ç–µ–º –∏—â–µ–º modname.ini –≤–Ω—É—Ç—Ä–∏ –ø–∞–ø–∫–∏ –º–æ–¥–∞
                    mod_ini_path = os.path.join(entry_path, f"{entry_name}.ini")
                    if os.path.exists(mod_ini_path):
                        mod_ini_config = configparser.ConfigParser()
                        try:
                            mod_ini_config.read(mod_ini_path, encoding='utf-8')
                            if 'modloader' in mod_ini_config and 'priority' in mod_ini_config['modloader']:
                                try:
                                    priority = int(mod_ini_config['modloader']['priority'])
                                    if not is_valid_priority(priority):
                                        self.log(self.current_lang["invalid_priority_value"].format(entry_name, mod_ini_config['modloader']['priority']))
                                        priority = None # –°–±—Ä–∞—Å—ã–≤–∞–µ–º, –µ—Å–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π
                                except ValueError:
                                    self.log(self.current_lang["invalid_priority_value"].format(entry_name, mod_ini_config['modloader']['priority']))
                                    priority = None
                                if priority is not None:
                                    self.log(self.current_lang["priority_from_mod_ini"].format(priority, entry_name))
                        except Exception as e:
                            self.log(f"‚ö†Ô∏è Error reading mod INI for '{entry_name}': {e}")

                # 3. –ï—Å–ª–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã
                if priority is None and entry_name.lower() in custom_priorities:
                    priority = custom_priorities[entry_name.lower()]
                    self.log(self.current_lang["priority_auto_assigned"].format(priority, entry_name))

                # 4. –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞, –Ω–∞–∑–Ω–∞—á–∞–µ–º 0 (–∏–ª–∏ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π –¥–µ—Ñ–æ–ª—Ç)
                if priority is None:
                    priority = 0
                    self.log(self.current_lang["priority_auto_assigned"].format(priority, entry_name))


                self.mods.append({"name": entry_name, "priority": priority})
                found_mod_count += 1
            elif not entry_name.startswith(('_', '.')):
                # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –∑–∞–ø–∏—Å–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –ø–∞–ø–∫–∞–º–∏ –∏ –Ω–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
                self.log(self.current_lang["skipping_entry"].format(entry_name))

        if not self.mods:
            self.log(self.current_lang["mods_not_found"].format(self.modloader_dir))
            self.log(self.current_lang["no_valid_mod_folders"])
        else:
            self.log(self.current_lang["mods_loaded"].format(found_mod_count))

        self.apply_search_filter() # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–∏–ª–∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—Å–µ, –µ—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä –ø—É—Å—Ç)
        self._check_priority_conflicts()

    def _read_ini_priorities(self, ini_path):
        """
        –ß–∏—Ç–∞–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –º–æ–¥–æ–≤ –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ modloader.ini —Ñ–∞–π–ª–∞.
        :param ini_path: –ü—É—Ç—å –∫ modloader.ini.
        :return: –°–ª–æ–≤–∞—Ä—å {mod_name: priority}.
        """
        priorities = {}
        config = configparser.ConfigParser()
        if os.path.exists(ini_path):
            try:
                config.read(ini_path, encoding='utf-8')
                if 'Profiles.Default.Priority' in config:
                    for mod_name, priority_str in config['Profiles.Default.Priority'].items():
                        try:
                            priority = int(priority_str)
                            if is_valid_priority(priority):
                                priorities[mod_name] = priority
                            else:
                                self.log(self.current_lang["invalid_priority_value"].format(mod_name, priority_str))
                        except ValueError:
                            self.log(self.current_lang["invalid_priority_value"].format(mod_name, priority_str))
                else:
                    self.log(self.current_lang["no_priority_sections"])
            except Exception as e:
                self.log(self.current_lang["file_read_error"].format(e))
        else:
            self.log(self.current_lang["file_not_found"].format(ini_path))
        return priorities

    def _check_priority_conflicts(self):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ (–Ω–µ—Å–∫–æ–ª—å–∫–æ –º–æ–¥–æ–≤ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º)
        –∏ –ª–æ–≥–∏—Ä—É–µ—Ç –∏—Ö.
        """
        priority_map = {} # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è {priority: [mod1, mod2, ...]}
        for mod in self.mods:
            priority = mod["priority"]
            mod_name = mod["name"]
            if priority not in priority_map:
                priority_map[priority] = []
            priority_map[priority].append(mod_name)

        conflicts_found = False
        for priority, mods_list in priority_map.items():
            if len(mods_list) > 1:
                self.log(self.current_lang["priority_conflict_detail"].format(priority, ", ".join(mods_list)))
                conflicts_found = True

        if conflicts_found:
            self.log(self.current_lang["priority_conflicts_found"])
        else:
            self.log(self.current_lang["no_priority_conflicts"])

    def on_item_double_click(self, event):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É Treeview –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞.
        """
        region = self.tree.identify("region", event.x, event.y)
        if region == "cell":
            column = self.tree.identify_column(event.x)
            if column == "#2": # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∏–∫–Ω—É–ª–∏ –ø–æ –∫–æ–ª–æ–Ω–∫–µ "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç"
                item_id = self.tree.focus()
                if item_id:
                    self.edit_priority(item_id)

    def edit_priority(self, item_id):
        """
        –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–æ–¥–∞.
        :param item_id: ID —ç–ª–µ–º–µ–Ω—Ç–∞ Treeview, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å.
        """
        current_values = self.tree.item(item_id, 'values')
        mod_name = current_values[0]
        current_priority = current_values[1]

        # –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –¥–∏–∞–ª–æ–≥
        dialog = tk.Toplevel(self)
        dialog.title(self.current_lang["edit_priority_title"])
        dialog.transient(self) # –°–¥–µ–ª–∞—Ç—å –¥–∏–∞–ª–æ–≥ –¥–æ—á–µ—Ä–Ω–∏–º –ø–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—é –∫ –≥–ª–∞–≤–Ω–æ–º—É –æ–∫–Ω—É
        dialog.grab_set() # –ó–∞—Ö–≤–∞—Ç–∏—Ç—å —Ñ–æ–∫—É—Å, –ø–æ–∫–∞ –¥–∏–∞–ª–æ–≥ –æ—Ç–∫—Ä—ã—Ç
        dialog.focus_set()

        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–∫–Ω–∞
        self.update_idletasks() # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ä–∞–∑–º–µ—Ä—ã –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã
        parent_x = self.winfo_x()
        parent_y = self.winfo_y()
        parent_width = self.winfo_width()
        parent_height = self.winfo_height()

        dialog_width = 350
        dialog_height = 120
        x = parent_x + (parent_width // 2) - (dialog_width // 2)
        y = parent_y + (parent_height // 2) - (dialog_height // 2)
        dialog.geometry(f"{dialog_width}x{dialog_height}+{x}+{y}")
        dialog.resizable(False, False)

        dialog.config(bg=self.dialog_bg)

        ttk.Label(dialog, text=f"{self.current_lang['mod_column']}: {mod_name}",
                  background=self.dialog_bg, foreground=self.dialog_fg).pack(pady=5)
        ttk.Label(dialog, text=self.current_lang["priority_column"],
                  background=self.dialog_bg, foreground=self.dialog_fg).pack()

        priority_var = tk.StringVar(value=str(current_priority))
        priority_entry = tk.Entry(dialog, textvariable=priority_var, width=10,
                                   justify='center', font=self.font_main,
                                   bg=self.log_current_bg, fg=self.log_current_fg,
                                   insertbackground=self.log_current_fg)
        priority_entry.pack(pady=5)
        priority_entry.bind("<Return>", lambda event: save_and_close()) # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ Enter
        priority_entry.focus_set()

        error_label = ttk.Label(dialog, text="", foreground=self.dialog_error_fg, background=self.dialog_bg)
        error_label.pack()

        def save_and_close():
            try:
                new_priority = int(priority_var.get())
                if is_valid_priority(new_priority):
                    # –ù–∞—Ö–æ–¥–∏–º –º–æ–¥ –≤ self.mods –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
                    for mod in self.mods:
                        if mod["name"] == mod_name:
                            mod["priority"] = new_priority
                            break
                    # –û–±–Ω–æ–≤–ª—è–µ–º Treeview
                    self.tree.item(item_id, values=(mod_name, new_priority))
                    self.log(self.current_lang["priority_changed_log"].format(mod_name, new_priority))
                    self._check_priority_conflicts() # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                    dialog.destroy()
                else:
                    error_label.config(text=self.current_lang["priority_value_error"])
            except ValueError:
                error_label.config(text=self.current_lang["priority_value_error"])

        button_frame = ttk.Frame(dialog, style="TFrame")
        button_frame.pack(pady=10)

        save_button = tk.Button(button_frame, text=self.current_lang["save_button"], command=save_and_close,
                                 bg=self.dialog_btn_bg, fg=self.dialog_btn_fg, relief=tk.FLAT)
        save_button.pack(side=tk.LEFT, padx=5)

        cancel_button = tk.Button(button_frame, text=self.current_lang["no_button"], command=dialog.destroy,
                                   bg=self.dialog_btn_bg, fg=self.dialog_btn_fg, relief=tk.FLAT)
        cancel_button.pack(side=tk.LEFT, padx=5)

        self.wait_window(dialog) # –ñ–¥–µ–º –∑–∞–∫—Ä—ã—Ç–∏—è –¥–∏–∞–ª–æ–≥–∞

    def sort_treeview(self, col, reverse):
        """
        –°–æ—Ä—Ç–∏—Ä—É–µ—Ç Treeview –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–æ–ª–æ–Ω–∫–µ.
        :param col: –ò–º—è –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏.
        :param reverse: True –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏, False –¥–ª—è –ø—Ä—è–º–æ–π.
        """
        l = [(self.tree.set(k, col), k) for k in self.tree.get_children('')]
        # –î–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç) —Å–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–∫ —á–∏—Å–ª–∞
        if col == "priority":
            l.sort(key=lambda t: int(t[0]), reverse=reverse)
        else:
            l.sort(key=lambda t: t[0].lower(), reverse=reverse) # –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫

        # –ü–µ—Ä–µ—É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ Treeview
        for index, (val, k) in enumerate(l):
            self.tree.move(k, '', index)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        self.tree.heading(col, command=lambda: self.sort_treeview(col, not reverse))

    def apply_search_filter(self, event=None):
        """
        –ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ–∏–ª—å—Ç—Ä –∫ —Å–ø–∏—Å–∫—É –º–æ–¥–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.
        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –ò–õ–ò (|), –ù–ï (-) –∏ –ø–æ–∏—Å–∫ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É (p:).
        """
        query = self.search_var.get().strip()
        self.filtered_mods = []
        self.tree.delete(*self.tree.get_children()) # –û—á–∏—â–∞–µ–º Treeview

        if not query:
            self.filtered_mods = list(self.mods) # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø—É—Å—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –º–æ–¥—ã.
        else:
            try:
                # –†–∞–∑–±–∏—Ä–∞–µ–º –∑–∞–ø—Ä–æ—Å: –æ—Ç–¥–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –ø—Ä–æ–±–µ–ª–∞–º–∏,
                # –∫—Ä–æ–º–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –ò–õ–ò, –∫–æ—Ç–æ—Ä—ã–µ –æ–±—ä–µ–¥–∏–Ω—è—é—Ç.
                # –°–Ω–∞—á–∞–ª–∞ —Ä–∞–∑–¥–µ–ª–∏–º –ø–æ –ò–õ–ò, –∑–∞—Ç–µ–º –≤–Ω—É—Ç—Ä–∏ –∫–∞–∂–¥–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞ –ø–æ –ø—Ä–æ–±–µ–ª–∞–º
                or_terms = [term.strip() for term in query.split('|')]
                parsed_queries = []
                for or_term in or_terms:
                    and_not_terms = [t.strip() for t in or_term.split(' ') if t.strip()]
                    includes = [t for t in and_not_terms if not t.startswith('-') and not t.lower().startswith('p:')]
                    excludes = [t[1:] for t in and_not_terms if t.startswith('-')]
                    priority_filters = [t for t in and_not_terms if t.lower().startswith('p:')]
                    parsed_queries.append({'includes': includes, 'excludes': excludes, 'priority_filters': priority_filters})

                for mod in self.mods:
                    mod_name_lower = mod["name"].lower()
                    mod_priority = mod["priority"]
                    
                    is_match = False
                    for pq in parsed_queries:
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ "–ò–õ–ò" —É—Å–ª–æ–≤–∏–π
                        current_or_match = True

                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ "–ò" (–≤–∫–ª—é—á–∞—é—â–∏–µ —É—Å–ª–æ–≤–∏—è)
                        if pq['includes']:
                            current_or_match = all(inc.lower() in mod_name_lower for inc in pq['includes']) # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ–ø–µ—á–∞—Ç–∫–∞

                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ "–ù–ï" (–∏—Å–∫–ª—é—á–∞—é—â–∏–µ —É—Å–ª–æ–≤–∏—è)
                        if current_or_match and pq['excludes']:
                            current_or_match = not any(exc.lower() in mod_name_lower for exc in pq['excludes'])

                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
                        if current_or_match and pq['priority_filters']:
                            priority_match = True
                            for p_filter in pq['priority_filters']:
                                try:
                                    operator_value = p_filter[2:] # p:>50 -> >50
                                    if '>' in operator_value:
                                        op, val_str = operator_value.split('>')
                                        val = int(val_str)
                                        if not (mod_priority > val):
                                            priority_match = False
                                            break
                                    elif '<' in operator_value:
                                        op, val_str = operator_value.split('<')
                                        val = int(val_str)
                                        if not (mod_priority < val):
                                            priority_match = False
                                            break
                                    elif '=' in operator_value: # Exact match
                                        op, val_str = operator_value.split('=')
                                        val = int(val_str)
                                        if not (mod_priority == val):
                                            priority_match = False
                                            break
                                    else: # Just a number means exact match
                                        val = int(operator_value)
                                        if not (mod_priority == val):
                                            priority_match = False
                                            break
                                except ValueError:
                                    self.log(self.current_lang["invalid_search_syntax"], add_timestamp=False)
                                    return # Exit if syntax is bad
                            current_or_match = current_or_match and priority_match

                        if current_or_match:
                            is_match = True
                            break # Match found for this OR clause

                    if is_match:
                        self.filtered_mods.append(mod)

            except Exception as e:
                self.log(self.current_lang["invalid_search_syntax"], add_timestamp=False)
                # print(f"Search parsing error: {e}") # For debugging
                self.filtered_mods = list(self.mods) # Show all on error
                return


        # –û–±–Ω–æ–≤–ª—è–µ–º Treeview —Å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –º–æ–¥–∞–º–∏
        for mod in self.filtered_mods:
            self.tree.insert("", tk.END, values=(mod["name"], mod["priority"]))

        self.log(self.current_lang["search_applied"].format(query, len(self.filtered_mods)))

    def generate_modloader_ini(self):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–∞–π–ª modloader.ini –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–∏—Ö –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –º–æ–¥–æ–≤.
        """
        if not self.mods:
            self.log(self.current_lang["no_mods_to_generate"])
            return

        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é, –µ—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if os.path.exists(self.output_ini_path):
            backup_path = os.path.join(self.modloader_dir, BACKUP_FILE_NAME)
            try:
                shutil.copyfile(self.output_ini_path, backup_path)
                self.log(self.current_lang["backup_created"].format(BACKUP_FILE_NAME))
            except Exception as e:
                self.log(self.current_lang["backup_error"].format(e))

        config = configparser.ConfigParser()
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏—é allow_no_value –¥–ª—è —Å–µ–∫—Ü–∏–π –±–µ–∑ –∑–Ω–∞—á–µ–Ω–∏–π, –µ—Å–ª–∏ —ç—Ç–æ –Ω—É–∂–Ω–æ.
        # config = configparser.ConfigParser(allow_no_value=True)

        # –°–æ–∑–¥–∞–µ–º —Å–µ–∫—Ü–∏—é –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
        config['Profiles.Default.Priority'] = {}
        for mod in self.mods:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–º—è –º–æ–¥–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å ini-—Ñ–æ—Ä–º–∞—Ç–æ–º, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            safe_mod_name = mod["name"].replace('\\', '/') # –ü—Ä–∏–º–µ—Ä: –∑–∞–º–µ–Ω–∞ –±—ç–∫—Å–ª—ç—à–µ–π
            config['Profiles.Default.Priority'][safe_mod_name] = str(mod["priority"])

        # –°–æ–∑–¥–∞–µ–º –¥—Ä—É–≥–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å–µ–∫—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
        if 'Profiles.Default.Plugins' not in config:
            config['Profiles.Default.Plugins'] = {}
        if 'Profiles.Default' not in config:
            config['Profiles.Default'] = {}
            config['Profiles.Default']['name'] = 'Default'

        try:
            with open(self.output_ini_path, 'w', encoding='utf-8') as configfile:
                config.write(configfile)
            self.log(self.current_lang["file_saved_success"].format(OUTPUT_FILE_NAME))
        except Exception as e:
            self.log(self.current_lang["file_save_error"].format(e))
            self.show_message(self.current_lang["file_save_error_title"],
                              self.current_lang["file_save_error_details"].format(e), "error")

    def open_ini_file(self):
        """
        –û—Ç–∫—Ä—ã–≤–∞–µ—Ç INI —Ñ–∞–π–ª, –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–±—Ä–∞—Ç—å –ø—É—Ç—å –∫ –Ω–µ–º—É.
        """
        file_path = filedialog.askopenfilename(
            title=self.current_lang["open_ini_file_title"],
            filetypes=(("INI files", "*.ini"), ("All files", "*.*")),
            initialdir=self.modloader_dir
        )
        if file_path:
            self.import_priorities_from_file(file_path)

    def save_ini_file(self):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –≤ INI —Ñ–∞–π–ª (modloader.ini –ø–æ —Ç–µ–∫—É—â–µ–º—É –ø—É—Ç–∏).
        """
        self.generate_modloader_ini()

    def save_ini_file_as(self):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –≤ –Ω–æ–≤—ã–π INI —Ñ–∞–π–ª, –ø–æ–∑–≤–æ–ª—è—è –≤—ã–±—Ä–∞—Ç—å –ø—É—Ç—å.
        """
        file_path = filedialog.asksaveasfilename(
            title=self.current_lang["file_save_as"],
            defaultextension=".ini",
            filetypes=(("INI files", "*.ini"), ("All files", "*.*")),
            initialdir=self.modloader_dir
        )
        if file_path:
            self.output_ini_path = file_path # –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            self.generate_modloader_ini()

    def import_priorities_from_file(self, file_path=None):
        """
        –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ INI —Ñ–∞–π–ª–∞.
        :param file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞. –ï—Å–ª–∏ None, –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞.
        """
        if not file_path:
            file_path = filedialog.askopenfilename(
                title=self.current_lang["edit_import"],
                filetypes=(("INI files", "*.ini"), ("All files", "*.*")),
                initialdir=self.modloader_dir
            )
        if not file_path:
            return

        config = configparser.ConfigParser()
        try:
            config.read(file_path, encoding='utf-8')
            if 'Profiles.Default.Priority' in config:
                imported_priorities = {}
                for mod_name, priority_str in config['Profiles.Default.Priority'].items():
                    try:
                        priority = int(priority_str)
                        if is_valid_priority(priority):
                            imported_priorities[mod_name] = priority
                        else:
                            self.log(self.current_lang["invalid_priority_value"].format(mod_name, priority_str))
                    except ValueError:
                        self.log(self.current_lang["invalid_priority_value"].format(mod_name, priority_str))

                # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∫ —Ç–µ–∫—É—â–∏–º –º–æ–¥–∞–º
                for mod in self.mods:
                    if mod["name"] in imported_priorities:
                        mod["priority"] = imported_priorities[mod["name"]]
                self.apply_search_filter() # –û–±–Ω–æ–≤–ª—è–µ–º Treeview
                self._check_priority_conflicts()
                self.log(self.current_lang["priorities_imported"].format(os.path.basename(file_path)))
            else:
                self.log(self.current_lang["no_priority_sections"])
                self.show_message(self.current_lang["info_title"], self.current_lang["no_priority_sections"], "info")
        except Exception as e:
            self.log(self.current_lang["file_read_error"].format(e))
            self.show_message(self.current_lang["priority_value_error_title"],
                              self.current_lang["file_read_error"].format(e), "error")

    def export_to_csv(self):
        """
        –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –º–æ–¥–æ–≤ –≤ CSV —Ñ–∞–π–ª.
        """
        if not self.mods:
            self.log(self.current_lang["no_mods_to_export"])
            self.show_message(self.current_lang["info_title"], self.current_lang["no_mods_to_export"], "info")
            return

        file_path = filedialog.asksaveasfilename(
            title=self.current_lang["edit_export_csv"],
            defaultextension=".csv",
            filetypes=(("CSV files", "*.csv"), ("All files", "*.*")),
            initialdir=self.program_root_dir # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
        )
        if file_path:
            try:
                with open(file_path, 'w', newline='', encoding='utf-8') as csvfile:
                    fieldnames = ['Mod Name', 'Priority']
                    writer = csv.DictWriter(csvfile, fieldnames=fieldnames)

                    writer.writeheader()
                    for mod in self.mods:
                        writer.writerow({'Mod Name': mod["name"], 'Priority': mod["priority"]})
                self.log(self.current_lang["export_csv_complete"].format(os.path.basename(file_path)))
                self.show_message(self.current_lang["info_title"],
                                  self.current_lang["export_csv_info"].format(os.path.basename(file_path)), "info")
            except Exception as e:
                self.log(self.current_lang["export_csv_error"].format(e))
                self.show_message(self.current_lang["priority_value_error_title"],
                                  self.current_lang["export_csv_error_details"].format(e), "error")

    def reset_all_priorities(self):
        """
        –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –≤—Å–µ—Ö –º–æ–¥–æ–≤ –Ω–∞ 0.
        """
        if not self.mods:
            return

        if self.show_confirmation(self.current_lang["reset_priorities_confirm_title"],
                                  self.current_lang["reset_priorities_confirm"]):
            for mod in self.mods:
                mod["priority"] = 0
            self.apply_search_filter() # –û–±–Ω–æ–≤–ª—è–µ–º Treeview
            self._check_priority_conflicts()
            self.log(self.current_lang["priorities_reset"])

    def restore_default_priorities(self):
        """
        –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –º–æ–¥–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ custom_priorities.
        """
        if not self.mods:
            return

        if self.show_confirmation(self.current_lang["restore_defaults_confirm_title"],
                                  self.current_lang["restore_defaults_confirm"]):
            for mod in self.mods:
                mod_name_lower = mod["name"].lower()
                if mod_name_lower in custom_priorities:
                    mod["priority"] = custom_priorities[mod_name_lower]
                else:
                    mod["priority"] = 0 # –°–±—Ä–æ—Å –¥–ª—è —Ç–µ—Ö, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ custom_priorities
            self.apply_search_filter() # –û–±–Ω–æ–≤–ª—è–µ–º Treeview
            self._check_priority_conflicts()
            self.log(self.current_lang["priorities_restored"])

    def delete_selected_mods(self):
        """
        –£–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –º–æ–¥—ã –∏–∑ —Å–ø–∏—Å–∫–∞.
        """
        selected_items = self.tree.selection()
        if not selected_items:
            self.log(self.current_lang["no_mods_selected_for_deletion"])
            self.show_message(self.current_lang["info_title"], self.current_lang["no_mods_selected_for_deletion"], "info")
            return

        mod_names_to_delete = []
        for item_id in selected_items:
            mod_names_to_delete.append(self.tree.item(item_id, 'values')[0])

        if len(mod_names_to_delete) == 1:
            confirm_message = self.current_lang["mod_deleted_confirm"].format(mod_names_to_delete[0])
        else:
            confirm_message = self.current_lang["multiple_mods_deleted_confirm"].format(len(mod_names_to_delete))

        if self.show_confirmation(self.current_lang["mod_deleted_confirm_title"], confirm_message):
            self.mods = [mod for mod in self.mods if mod["name"] not in mod_names_to_delete]
            self.apply_search_filter() # –û–±–Ω–æ–≤–ª—è–µ–º Treeview
            self._check_priority_conflicts()
            self.log(self.current_lang["mod_deleted_count"].format(len(mod_names_to_delete)))

    def delete_all_mods(self):
        """
        –£–¥–∞–ª—è–µ—Ç –≤—Å–µ –º–æ–¥—ã –∏–∑ —Å–ø–∏—Å–∫–∞.
        """
        if not self.mods:
            return

        if self.show_confirmation(self.current_lang["delete_all_mods_confirm_title"],
                                  self.current_lang["delete_all_mods_confirm"]):
            self.mods.clear()
            self.apply_search_filter() # –û–±–Ω–æ–≤–ª—è–µ–º Treeview
            self.log(self.current_lang["all_mods_deleted_log"])

    def set_rating(self, rating):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–≤–µ–∑–¥."""
        # –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –±–æ–ª—å—à–µ –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ UI, —Ç–∞–∫ –∫–∞–∫ –∑–≤–µ–∑–¥—ã —Å—Ç–∞—Ç–∏—á–Ω—ã.
        # –ù–æ –æ–Ω –æ—Å—Ç–∞–µ—Ç—Å—è –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –ª–æ–≥–∏–∫–∏, –µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è.
        self.rating_var.set(rating)
        self.update_stars()
        self.log(f"Program rated: {rating} stars.", add_timestamp=False)

    def update_stars(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–≤–µ–∑–¥ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞."""
        current_rating = self.rating_var.get()
        for i, star_label in enumerate(self.star_labels):
            if i < current_rating:
                star_label.config(text=STAR_FILLED, fg="#FFD700") # Gold color for filled stars
            else:
                star_label.config(text=STAR_EMPTY, fg="#888888") # Grey color for empty stars
            # Ensure background matches theme
            star_label.config(bg=self.cget('bg'))
    
    # –ú–µ—Ç–æ–¥ hover_stars –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, —Ç–∞–∫ –∫–∞–∫ –∑–≤–µ–∑–¥—ã —Å—Ç–∞—Ç–∏—á–Ω—ã.
    # def hover_stars(self, hovered_rating):
    #     """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–≤–µ–∑–¥ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ –∫—É—Ä—Å–æ—Ä–∞."""
    #     if hovered_rating == 0: # Mouse left the rating area
    #         self.update_stars() # Revert to actual rating
    #     else:
    #         for i, star_label in enumerate(self.star_labels):
    #             if i < hovered_rating:
    #                 star_label.config(text=STAR_FILLED, fg="#FFD700")
    #             else:
    #                 star_label.config(text=STAR_EMPTY, fg="#888888")

    def show_about(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ."""
        self.show_message(self.current_lang["about_title"], self.current_lang["about_message"], "info")

    def show_author_info(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Ä–µ."""
        self.show_message(self.current_lang["author_title"], self.current_lang["author_message"], "info")

    def check_for_updates(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–∞ GitHub."""
        try:
            webbrowser.open_new_tab(GITHUB_REPO_URL)
            self.log(self.current_lang["updates_message"].format(APP_VERSION))
        except Exception as e:
            self.log(f"Failed to open URL: {e}")

    def show_help(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –ø—Ä–æ–≥—Ä–∞–º–º—ã."""
        self.show_message(self.current_lang["help_title"], self.current_lang["help_message"], "info")

    def contact_support(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–æ—á—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Å–≤—è–∑–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."""
        subject = self.current_lang["contact_support_subject"]
        body = f"Hello, I have a question about GTA SA Modloader Priority Editor v{APP_VERSION}."
        mailto_url = f"mailto:{AUTHOR_EMAIL}?subject={subject}&body={body}"
        try:
            webbrowser.open_new_tab(mailto_url)
        except Exception as e:
            self.log(f"Failed to open email client: {e}")
            self.show_message(self.current_lang["priority_value_error_title"],
                              f"Could not open email client. Please contact {AUTHOR_EMAIL} directly.", "error")

    def show_message(self, title, message, type="info"):
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Å—Ç–æ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—à–∏–±–∫—É.
        :param title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ–∫–Ω–∞.
        :param message: –°–æ–æ–±—â–µ–Ω–∏–µ.
        :param type: 'info', 'warning', 'error' –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ü–≤–µ—Ç–æ–≤.
        """
        msg_box = tk.Toplevel(self)
        msg_box.title(title)
        msg_box.transient(self)
        msg_box.grab_set()
        msg_box.focus_set()

        self.update_idletasks()
        parent_x = self.winfo_x()
        parent_y = self.winfo_y()
        parent_width = self.winfo_width()
        parent_height = self.winfo_height()

        msg_width = 350
        msg_height = 150
        x = parent_x + (parent_width // 2) - (msg_width // 2)
        y = parent_y + (parent_height // 2) - (msg_height // 2)
        msg_box.geometry(f"{msg_width}x{msg_height}+{x}+{y}")
        msg_box.resizable(False, False)

        msg_box.config(bg=self.dialog_bg)

        if type == "error":
            fg_color = self.dialog_error_fg
        else:
            fg_color = self.dialog_fg

        message_label = ttk.Label(msg_box, text=message, wraplength=msg_width - 40,
                                  background=self.dialog_bg, foreground=fg_color,
                                  font=self.font_main, justify=tk.CENTER)
        message_label.pack(expand=True, padx=20, pady=10)

        ok_button = tk.Button(msg_box, text="OK", command=msg_box.destroy,
                               bg=self.dialog_btn_bg, fg=self.dialog_btn_fg, relief=tk.FLAT)
        ok_button.pack(pady=5)
        ok_button.focus_set() # –§–æ–∫—É—Å –Ω–∞ –∫–Ω–æ–ø–∫–µ OK –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞

        self.wait_window(msg_box)

    def show_confirmation(self, title, message):
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Å—Ç–æ–º–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–î–∞/–ù–µ—Ç).
        :param title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ–∫–Ω–∞.
        :param message: –°–æ–æ–±—â–µ–Ω–∏–µ.
        :return: True, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª "–î–∞", False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.
        """
        confirm_box = tk.Toplevel(self)
        confirm_box.title(title)
        confirm_box.transient(self)
        confirm_box.grab_set()
        confirm_box.focus_set()

        self.update_idletasks()
        parent_x = self.winfo_x()
        parent_y = self.winfo_y()
        parent_width = self.winfo_width()
        parent_height = self.winfo_height()

        confirm_width = 350
        confirm_height = 120
        x = parent_x + (parent_width // 2) - (confirm_width // 2)
        y = parent_y + (parent_height // 2) - (confirm_height // 2)
        confirm_box.geometry(f"{confirm_width}x{confirm_height}+{x}+{y}")
        confirm_box.resizable(False, False)

        confirm_box.config(bg=self.dialog_bg)

        message_label = ttk.Label(confirm_box, text=message, wraplength=confirm_width - 40,
                                  background=self.dialog_bg, foreground=self.dialog_fg,
                                  font=self.font_main, justify=tk.CENTER)
        message_label.pack(expand=True, padx=20, pady=10)

        result = tk.BooleanVar(value=False)

        def set_result_and_destroy(val):
            result.set(val)
            confirm_box.destroy()

        button_frame = ttk.Frame(confirm_box, style="TFrame")
        button_frame.pack(pady=5)

        yes_button = tk.Button(button_frame, text=self.current_lang["yes_button"],
                                command=lambda: set_result_and_destroy(True),
                                bg=self.dialog_btn_bg, fg=self.dialog_btn_fg, relief=tk.FLAT)
        yes_button.pack(side=tk.LEFT, padx=5)
        yes_button.focus_set() # –§–æ–∫—É—Å –Ω–∞ –∫–Ω–æ–ø–∫–µ "–î–∞" –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        no_button = tk.Button(button_frame, text=self.current_lang["no_button"],
                               command=lambda: set_result_and_destroy(False),
                               bg=self.dialog_btn_bg, fg=self.dialog_btn_fg, relief=tk.FLAT)
        no_button.pack(side=tk.LEFT, padx=5)

        self.wait_window(confirm_box)
        return result.get()

# =============================================================================
# --- –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
# =============================================================================

    def draw_top_colorful_line(self, event=None):
        """–û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –≤–µ—Ä—Ö–Ω—é—é —Ä–∞–∑–Ω–æ—Ü–≤–µ—Ç–Ω—É—é –ø–æ–ª–æ—Å–∫—É."""
        canvas = self.top_colorful_line
        canvas.delete("all")
        width = canvas.winfo_width()
        height = canvas.winfo_height()
        segment_width = width / self.top_color_segment_count
        for i in range(self.top_color_segment_count):
            hue = (self.top_color_hue_offset + i / self.top_color_segment_count * 0.5) % 1.0
            r, g, b = colorsys.hls_to_rgb(hue, 0.5, 1.0)
            color = f'#{int(r*255):02x}{int(g*255):02x}{int(b*255):02x}'
            x1 = i * segment_width
            x2 = (i + 1) * segment_width
            canvas.create_rectangle(x1, 0, x2, height, fill=color, outline=color)

    def animate_top_colorful_line(self):
        self.top_color_hue_offset = (self.top_color_hue_offset + 0.01) % 1.0
        self.draw_top_colorful_line()
        self.after(20, self.animate_top_colorful_line)

    def draw_super_top_colorful_line(self, event=None):
        """–û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç —Å–∞–º—É—é –≤–µ—Ä—Ö–Ω—é—é —Ä–∞–∑–Ω–æ—Ü–≤–µ—Ç–Ω—É—é –ø–æ–ª–æ—Å–∫—É."""
        canvas = self.super_top_colorful_line
        canvas.delete("all")
        width = canvas.winfo_width()
        height = canvas.winfo_height()
        segment_width = width / self.super_top_color_segment_count
        for i in range(self.super_top_color_segment_count):
            hue = (self.super_top_color_hue_offset + i / self.super_top_color_segment_count * 0.5) % 1.0
            r, g, b = colorsys.hls_to_rgb(hue, 0.5, 1.0)
            color = f'#{int(r*255):02x}{int(g*255):02x}{int(b*255):02x}'
            x1 = i * segment_width
            x2 = (i + 1) * segment_width
            canvas.create_rectangle(x1, 0, x2, height, fill=color, outline=color)

    def animate_super_top_colorful_line(self):
        self.super_top_color_hue_offset = (self.super_top_color_hue_offset + 0.01) % 1.0
        self.draw_super_top_colorful_line()
        self.after(20, self.animate_super_top_colorful_line)


    def update_mod_count_label(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –º–æ–¥–æ–≤."""
        count = len(self.filtered_mods) if hasattr(self, 'filtered_mods') else 0
        self.mod_count_var.set(self.current_lang["installed_mods_count"].format(count))


if __name__ == "__main__":
    app = ModPriorityGUI()
    app.mainloop()
