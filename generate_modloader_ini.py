# -*- coding: utf-8 -*-
import tkinter as tk
from tkinter import ttk, messagebox, filedialog
import os
import sys
import configparser
import shutil
from datetime import datetime
import webbrowser
import csv
import re
import colorsys # –î–æ–±–∞–≤–ª–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ü–≤–µ—Ç–æ–≤—ã–º–∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞–º–∏ HLS
import traceback # –î–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ–ª–Ω–æ–≥–æ —Å—Ç–µ–∫–∞ –æ—à–∏–±–æ–∫

# =============================================================================
# --- –£—Å–ª–æ–≤–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –∏ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è Windows ---
# –≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –∫–æ–¥–∞ –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã Windows,
# —Ç–∞–∫–∏–º–∏ –∫–∞–∫ —Å–∫—Ä—ã—Ç–∏–µ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ç–µ–º—ã Windows.
# =============================================================================
if os.name == 'nt':
    try:
        import ctypes
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è Windows, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
        # –≠—Ç–æ –ø–æ–ª–µ–∑–Ω–æ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π —Å –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º, —á—Ç–æ–±—ã –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —á–µ—Ä–Ω–æ–µ –æ–∫–Ω–æ –∫–æ–Ω—Å–æ–ª–∏.
        def hide_console_window():
            whnd = ctypes.windll.kernel32.GetConsoleWindow()
            if whnd != 0:
                ctypes.windll.user32.ShowWindow(whnd, 0)
        hide_console_window()
    except Exception as e:
        # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ—à–∏–±–∫—É, –µ—Å–ª–∏ ctypes –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –µ—Å—Ç—å –¥—Ä—É–≥–∞—è –ø—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ —Å–∫—Ä—ã—Ç–∏–∏ –∫–æ–Ω—Å–æ–ª–∏.
        print(f"Warning: Could not hide console window on Windows: {e}")

    try:
        import winreg
        def is_windows_dark_theme():
            """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–∏ Windows –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ç–µ–º–Ω—É—é —Ç–µ–º—É."""
            try:
                registry = winreg.ConnectRegistry(None, winreg.HKEY_CURRENT_USER)
                key = winreg.OpenKey(registry, r'SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Themes\\Personalize')
                val, _ = winreg.QueryValueEx(key, "AppsUseLightTheme")
                winreg.CloseKey(key)
                return val == 0  # 0 –æ–∑–Ω–∞—á–∞–µ—Ç —Ç–µ–º–Ω—ã–π —Ä–µ–∂–∏–º, 1 –æ–∑–Ω–∞—á–∞–µ—Ç —Å–≤–µ—Ç–ª—ã–π —Ä–µ–∂–∏–º.
            except Exception:
                # –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø –∫ —Ä–µ–µ—Å—Ç—Ä—É –Ω–µ —É–¥–∞–ª—Å—è –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞.
                return False
    except ImportError:
        # –ï—Å–ª–∏ winreg –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å—Ä–µ–¥–∞—Ö Python).
        def is_windows_dark_theme():
            return False
else:
    # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –Ω–µ-Windows —Å–∏—Å—Ç–µ–º, –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç False, —Ç–∞–∫ –∫–∞–∫ —Ç–µ–º–Ω–∞—è —Ç–µ–º–∞ Windows –Ω–µ –ø—Ä–∏–º–µ–Ω–∏–º–∞.
    def is_windows_dark_theme():
        return False
        
# =============================================================================
# --- –ö–ª–∞—Å—Å ToolTip –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ ---
# =============================================================================
class ToolTip:
    def __init__(self, widget, text):
        self.widget = widget
        self.text = text
        self.tooltip_window = None
        self.widget.bind("<Enter>", self.show_tooltip)
        self.widget.bind("<Leave>", self.hide_tooltip)
        self.widget.bind("<ButtonPress>", self.hide_tooltip) # –°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏

    def show_tooltip(self, event=None):
        # –ï—Å–ª–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∞ —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω–∞, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–Ω–æ–≤–∞
        if self.tooltip_window:
            return

        x = self.widget.winfo_rootx() + self.widget.winfo_width() # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ X –ø—Ä–∞–≤–æ–≥–æ –∫—Ä–∞—è –≤–∏–¥–∂–µ—Ç–∞
        y = self.widget.winfo_rooty() # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ Y –≤–µ—Ä—Ö–Ω–µ–≥–æ –∫—Ä–∞—è –≤–∏–¥–∂–µ—Ç–∞
        
        # –°–æ–∑–¥–∞–µ–º Toplevel –æ–∫–Ω–æ –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–∫–∏
        self.tooltip_window = tk.Toplevel(self.widget)
        self.tooltip_window.wm_overrideredirect(True) # –£–±–∏—Ä–∞–µ—Ç —Ä–∞–º–∫—É –æ–∫–Ω–∞ –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫
        self.tooltip_window.wm_geometry(f"+{x}+{y}")
        
        # –°–æ–∑–¥–∞–µ–º Label —Å —Ç–µ–∫—Å—Ç–æ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏
        label = tk.Label(self.tooltip_window, text=self.text, background="#ffffe0", # –°–≤–µ—Ç–ª–æ-–∂–µ–ª—Ç—ã–π —Ñ–æ–Ω
                         relief="solid", borderwidth=1,
                         font=("tahoma", "8", "normal"))
        label.pack(ipadx=1) # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –æ—Ç—Å—Ç—É–ø

    def hide_tooltip(self, event=None):
        if self.tooltip_window:
            self.tooltip_window.destroy()
        self.tooltip_window = None

# =============================================================================
# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
# –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—É—Ç–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ –∏ –º–µ—Ç–∞–¥–∞–Ω–¥—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
# =============================================================================
DEFAULT_MODLOADER_SUBDIR = "modloader" # –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ modloader –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
OUTPUT_FILE_NAME = "modloader.ini"         # –ò–º—è —Ñ–∞–π–ª–∞, –≤ –∫–æ—Ç–æ—Ä—ã–π —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –º–æ–¥–æ–≤.
BACKUP_FILE_NAME = "modloader.ini.bak" # –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ modloader.ini.
APP_VERSION = "2.0"                      # –í–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
GITHUB_REPO_URL = "https://github.com/Maximka1993271/GTASAN/releases/download/ModloaderPriorityEditor/GTA.SA.Modloader.Priority.Editior.2.0.rar"
AUTHOR_EMAIL = "melnikovmaksim540@gmail.com"

# –°–∏–º–≤–æ–ª—ã –¥–ª—è –∑–≤–µ–∑–¥ —Ä–µ–π—Ç–∏–Ω–≥–∞
STAR_FILLED = "‚òÖ"
STAR_EMPTY = "‚òÜ"

# =============================================================================
# --- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –º–æ–¥–æ–≤ ---
# –≠—Ç–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è—é—Ç –ª—é–±—ã–µ‰ªñ„ÅÆ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏ –Ω–∞–∑–Ω–∞—á–∞—é—Ç—Å—è –º–æ–¥–∞–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
# =============================================================================
custom_priorities = {
    "de palm": 78,
    "proper fixes": 40,
    "proper vehicles retex": 61,
    "revamped vehicles project": 62,
    "rosa project evolved": 30,
    "_essentials+": 99
}

# =============================================================================
# --- –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ ---
# –°–æ–¥–µ—Ä–∂–∞—Ç –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ, –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –∏ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–∞—Ö.
# =============================================================================
LANG_EN = {
    "app_title": "GTA SA Modloader Priority Editor 2.0",
    
    # –ú–µ–Ω—é
    "file_menu": "File",
    "file_new": "New File",
    "file_open": "Open...",
    "file_save": "Save",
    "file_save_as": "Save As...",
    "file_save_log_as": "Save Log As...", # NEW
    "file_exit": "Exit",
    "recent_files_menu": "Recent Files",
    
    "edit_menu": "Edit",
    "edit_import": "Import Priorities from File",
    "edit_export_csv": "Export to CSV",
    "edit_reset_priorities": "Reset All Priorities",
    "edit_restore_defaults": "Restore Default Priorities",
    "edit_delete_mod": "Delete Mod(s) from List",
    "delete_all_mods": "Delete All Mods from List",
    "edit_select_all": "Select All", # New
    "edit_deselect_all": "Deselect All", # New
    "edit_invert_selection": "Invert Selection", # New
    "delete_all_mods_from_modloader_folder": "Delete All Mods from modloader Folder",
    "restore_all_mods_to_modloader_folder": "Restore All Mods to modloader Folder",  # NEW
    
    "settings_menu": "Settings",
    "theme_menu": "Theme",
    "theme_system": "System Theme",
    "theme_dark": "Dark Theme",
    "theme_light": "Light Theme",
    "settings_modloader_path": "Modloader Folder Path",
    "settings_autosave_on_exit": "Auto-save on Exit", # New
    "settings_check_updates_on_startup": "Check for Updates on Startup", # New
    "settings_always_on_top": "Always on Top", # New
    
    "help_menu": "Help",
    "help_about": "About",
    "help_author": "About Author",
    "help_updates": "Check for Updates",
    "help_help": "Usage Guide",
    "help_contact": "Contact Support",
    
    # –ü–æ–∏—Å–∫
    "search_mod": "Search Mod:",
    "update_mod_list": "Refresh Mod List",
    "generate_ini": "Generate modloader.ini",
    
    # –¢–∞–±–ª–∏—Ü–∞
    "mod_column": "Mod",
    "priority_column": "Priority",
    
    # –õ–æ–≥–∏
    "log_label": "Log:",
    "clear_log": "Clear Log",
    "select_all_log": "Select All",
    "copy_all_log": "Copy All",
    "logs_cleared": "Logs cleared.", # New string for logs cleared
    
    # –ê–≤—Ç–æ—Ä
    "author_label": "Author: Maxim Melnikov",
    
    # –û—à–∏–±–∫–∏ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    "modloader_folder_not_found": "‚ùå Folder '{0}' not found or not a directory! Please check the path in Settings.",
    "mods_not_found": "No mods found in '{0}' or the folder is empty/inaccessible.",
    "mods_loaded": "Loaded mods: {0}",
    "priority_conflicts_found": "‚ö†Ô∏è Priority conflicts detected:",
    "priority_conflict_detail": "  Priority {0} assigned to mods: {1}",
    "no_priority_conflicts": "‚úÖ No priority conflicts detected.",
    
    "priority_value_error_title": "Error",
    "priority_value_error": "Priority must be an integer between 0 and 99.",
    
    "no_mods_to_generate": "No mods to generate. Please load mods first.",
    "backup_created": "üì¶ Backup file '{0}' created.",
    "backup_error": "‚ö†Ô∏è Error creating backup: {0}",
    
    "file_saved_success": "‚úÖ File '{0}' successfully saved.",
    "file_saved_info": "File '{0}' successfully saved.",
    "file_save_error": "‚ùå Error saving file: {0}",
    "file_save_error_details": "Could not save file:\n{0}",
    "file_read_error": "Could not read file:\n{0}",
    
    "no_priority_sections": "No priority sections found in the file or the 'Profiles.Default.Priority' section is missing.",
    "priorities_imported": "‚úÖ Priorities imported from file '{0}'.",
    "export_csv_complete": "‚úÖ Export to CSV file '{0}' complete.",
    "export_csv_info": "File '{0}' successfully exported.",
    "export_csv_error": "‚ùå Error exporting to CSV: {0}",
    "export_csv_error_details": "Could not export file:\n{0}",
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    "reset_priorities_confirm_title": "Confirmation",
    "reset_priorities_confirm": "Are you sure you want to reset all priorities?",
    "priorities_reset": "‚úÖ All priorities reset to 0.",
    
    "restore_defaults_confirm_title": "Confirmation",
    "restore_defaults_confirm": "Are you sure you want to restore default priorities?",
    "priorities_restored": "‚úÖ Default priorities restored.",
    
    "modloader_path_changed": "Modloader path changed to: {0}",
    
    # –û –ø—Ä–æ–≥—Ä–∞–º–º–µ –∏ –∞–≤—Ç–æ—Ä–µ
    "about_title": "About Program",
    "about_message": "GTA SA Modloader Priority Editor\nVersion {0}\n\nA program for managing GTA San Andreas modloader priorities.".format(APP_VERSION),
    
    "author_title": "About Author",
    "author_message": "Maxim Melnikov\nEmail: melnikovmaksim540@gmail.com",
    
    "updates_title": "Check for Updates",
    "updates_message": "Checking for updates. You have the latest version {0}.".format(APP_VERSION),
    
    "help_title": "Help",
    "help_message": "1. Use 'Refresh Mod List' button to scan modloader folder.\n2. Double-click the 'Priority' column to change priorities.\n3. Generate modloader.ini to apply changes.\n4. Use the menu to open/save files and import/export data.",
    
    "contact_support_subject": "GTA SA Modloader Priority Editor Support",
    
    "open_ini_file_title": "Open INI File",
    
    "theme_changed_to": "Theme changed to: {0}",
    
    "language_menu": "Language",
    "language_en": "English",
    "language_ru": "–†—É—Å—Å–∫–∏–π",
    "language_uk": "Ukrainian", # Added Ukrainian language option to English localization
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    "priority_changed_log": "Priority for mod '{0}' changed to {1}.",
    "mod_deleted_confirm_title": "Confirm Deletion",
    "mod_deleted_confirm": "Are you sure you want to delete '{0}' from the list? This will NOT remove the mod from your file system.",
    
    "multiple_mods_deleted_confirm": "Are you sure you want to delete {0} selected mods from the list? This will NOT remove them from your file system.",
    "delete_all_mods_confirm_title": "Confirm Deletion of All Mods",
    "delete_all_mods_confirm": "Are you sure you want to delete ALL mods from the list? This will NOT remove them from your file system.",
    
    "mod_deleted_log": "Mod '{0}' deleted from the list.",
    "all_mods_deleted_log": "All mods deleted from the list.",
    
    "loading_mods_from": "Loading mods from: {0}",
    "scanning_modloader_folder": "Scanning modloader folder: {0}",
    "found_mod_folder": "Found mod folder: {0}",
    "skipping_entry": "Skipping entry (not a folder or ignored prefix): {0}",
    "no_valid_mod_folders": "No valid mod folders found.",
    "no_mods_to_export": "No mods to export. The list is empty.",
    
    "file_not_found": "File not found: {0}",
    "invalid_priority_value": "Invalid priority value for mod '{0}' in INI: '{1}'. Skipping.",
    "mod_deleted_count": "Deleted {0} mod(s) from the list.",
    
    "priority_auto_assigned": "Automatically assigned priority: {0} for mod '{1}'",
    "priority_from_mod_ini": "Priority {0} for mod '{1}' extracted from the mod's INI file.",
    
    # –ü–æ–∏—Å–∫
    "search_syntax_help": "Search syntax: Use | for OR, - for NOT, p: for priority (e.g., 'mod1 | mod2 -mod3 p:>50').",
    "search_applied": "Search applied: '{0}'. Found {1} mods.",
    "invalid_search_syntax": "‚ùå Invalid search syntax. Please check your query.",
    
    "yes_button": "Yes",
    "no_button": "No",
    "no_mods_selected_for_deletion": "No mods selected for deletion.",
    "save_button": "Save",
    "edit_priority_title": "Edit Priority",
    "info_title": "Information",
    "rate_program_label": "Rate this program:",
    "installed_mods_count": "Installed Mods: {0}", # New string for mod count
    "new_file_confirm_title": "Confirm New File", # New
    "new_file_confirm": "Are you sure you want to start a new file? Any unsaved changes will be lost." # New
}

# –ú–æ–¥—É–ª—å –¥–ª—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
# =============================================================================
# --- –ö–ª–∞—Å—Å Localization ---
# –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —è–∑—ã–∫–æ–≤—ã–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏,
# –ø–æ–∑–≤–æ–ª—è—è –ª–µ–≥–∫–æ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å—Å—è –º–µ–∂–¥—É —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —è–∑—ã–∫–∞–º–∏.
# =============================================================================
class Localization:
    def __init__(self, language_dict):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–ª–∞—Å—Å –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏.
        :param language_dict: –°–ª–æ–≤–∞—Ä—å, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —è–∑—ã–∫–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–æ–≤.
        """
        self.language_dict = language_dict
        self.language = "ru"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∏–π

    def set_language(self, language_code):
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.
        :param language_code: –ö–æ–¥ —è–∑—ã–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "en", "ru").
        """
        if language_code in self.language_dict:
            self.language = language_code
        else:
            print(f"Warning: Language '{language_code}' not found. Using default language 'ru'.")
            self.language = 'ru'

    def get_text(self, key, *args):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ —Å—Ç—Ä–æ–∫—É.
        :param key: –ö–ª—é—á –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω—É–∂–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ —Å–ª–æ–≤–∞—Ä–µ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏.
        :param args: –ê—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ (–µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã).
        :return: –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞.
        """
        try:
            text = self.language_dict[self.language][key]
            if args:
                text = text.format(*args)
            return text
        except KeyError:
            return f"Missing translation for '{key}'"

# =============================================================================
# --- –î–∞–Ω–Ω—ã–µ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ ---
# –°–æ–¥–µ—Ä–∂–∞—Ç –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ, –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
# =============================================================================
LANG_RU = {
    "app_title": "GTA SA Modloader Priority Editor 2.0",
    "file_menu": "–§–∞–π–ª",
    "file_new": "–ù–æ–≤—ã–π —Ñ–∞–π–ª", # New
    "file_open": "–û—Ç–∫—Ä—ã—Ç—å...",
    "file_save": "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
    "file_save_as": "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫...",
    "file_save_log_as": "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–≥ –∫–∞–∫...", # NEW
    "file_exit": "–í—ã—Ö–æ–¥",
    "recent_files_menu": "–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ñ–∞–π–ª—ã", # New
    "edit_menu": "–ü—Ä–∞–≤–∫–∞",
    "edit_import": "–ò–º–ø–æ—Ä—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞",
    "edit_export_csv": "–≠–∫—Å–ø–æ—Ä—Ç –≤ CSV",
    "edit_reset_priorities": "–°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã",
    "edit_restore_defaults": "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã",
    "edit_delete_mod": "–£–¥–∞–ª–∏—Ç—å –º–æ–¥(—ã) –∏–∑ —Å–ø–∏—Å–∫–∞",
    "delete_all_mods": "–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –º–æ–¥—ã –∏–∑ —Å–ø–∏—Å–∫–∞",
    "edit_select_all": "–í—ã–¥–µ–ª–∏—Ç—å –≤—Å–µ", # New
    "edit_deselect_all": "–°–Ω—è—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ", # New
    "edit_invert_selection": "–ò–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ", # New
    "delete_all_mods_from_modloader_folder": "–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –º–æ–¥—ã –∏–∑ –ø–∞–ø–∫–∏ modloader",
    "restore_all_mods_to_modloader_folder": "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –º–æ–¥—ã –≤ –ø–∞–ø–∫–µ modloader",  # NEW
    "settings_menu": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏",
    "theme_menu": "–¢–µ–º–∞",
    "theme_system": "–°–∏—Å—Ç–µ–º–Ω–∞—è —Ç–µ–º–∞",
    "theme_dark": "–¢—ë–º–Ω–∞—è —Ç–µ–º–∞",
    "theme_light": "–°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞",
    "settings_modloader_path": "–ü—É—Ç—å –∫ –ø–∞–ø–∫–µ modloader",
    "settings_autosave_on_exit": "–ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ", # New
    "settings_check_updates_on_startup": "–ü—Ä–æ–≤–µ—Ä—è—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ", # New
    "settings_always_on_top": "–ü–æ–≤–µ—Ä—Ö –≤—Å–µ—Ö –æ–∫–æ–Ω", # New
    "help_menu": "–ü–æ–º–æ—â—å",
    "help_about": "–û –ø—Ä–æ–≥—Ä–∞–º–º–µ",
    "help_author": "–û–± –∞–≤—Ç–æ—Ä–µ",
    "help_updates": "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π",
    "help_help": "–°–ø—Ä–∞–≤–∫–∞",
    "help_contact": "–°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π",
    "search_mod": "–ü–æ–∏—Å–∫ –º–æ–¥–∞:",
    "update_mod_list": "–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–æ–≤",
    "generate_ini": "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å modloader.ini",
    "mod_column": "–ú–æ–¥",
    "priority_column": "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç",
    "log_label": "–õ–æ–≥:",
    "clear_log": "–û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥",
    "logs_cleared": "–õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã.", # –ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—ã—Ö –ª–æ–≥–æ–≤
    "select_all_log": "–í—ã–¥–µ–ª–∏—Ç—å –≤—Å—ë",
    "copy_all_log": "–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤—Å—ë",
    "author_label": "–ê–≤—Ç–æ—Ä: –ú–∞–∫—Å–∏–º –ú–µ–ª—å–Ω–∏–∫–æ–≤",
    "modloader_folder_not_found": "‚ùå –ü–∞–ø–∫–∞ '{0}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å –≤ –ù–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.",
    "mods_not_found": "–ú–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ '{0}' –∏–ª–∏ –ø–∞–ø–∫–∞ –ø—É—Å—Ç–∞/–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.",
    "mods_loaded": "–ó–∞–≥—Ä—É–∂–µ–Ω–æ –º–æ–¥–æ–≤: {0}",
    "priority_conflicts_found": "‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤:",
    "priority_conflict_detail": "  –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç {0} –Ω–∞–∑–Ω–∞—á–µ–Ω –º–æ–¥–∞–º: {1}",
    "no_priority_conflicts": "‚úÖ –ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã.",
    "priority_value_error_title": "–û—à–∏–±–∫–∞",
    "priority_value_error": "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º –æ—Ç 0 –¥–æ 99.",
    "no_mods_to_generate": "–ù–µ—Ç –º–æ–¥–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –º–æ–¥—ã.",
    "backup_created": "üì¶ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Ñ–∞–π–ª–∞ {0}.",
    "backup_error": "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {0}",
    "file_saved_success": "‚úÖ –§–∞–π–ª {0} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.",
    "file_saved_info": "–§–∞–π–ª '{0}' —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.",
    "file_save_error": "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {0}",
    "file_save_error_details": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª:\n{0}",
    "file_read_error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª:\n{0}",
    "no_priority_sections": "–í —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —Å–µ–∫—Ü–∏–∏ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–µ–∫—Ü–∏—è 'Profiles.Default.Priority'.",
    "priorities_imported": "‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∏–∑ —Ñ–∞–π–ª–∞ '{0}'.",
    "export_csv_complete": "‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV —Ñ–∞–π–ª '{0}' –∑–∞–≤–µ—Ä—à—ë–Ω.",
    "export_csv_info": "–§–∞–π–ª '{0}' —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω.",
    "export_csv_error": "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –≤ CSV: {0}",
    "export_csv_error_details": "–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª:\n{0}",
    "reset_priorities_confirm_title": "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
    "reset_priorities_confirm": "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã?",
    "priorities_reset": "‚úÖ –í—Å–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã —Å–±—Ä–æ—à–µ–Ω—ã –Ω–∞ 0.",
    "restore_defaults_confirm_title": "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
    "restore_defaults_confirm": "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã?",
    "priorities_restored": "‚úÖ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.",
    "modloader_path_changed": "–ü—É—Ç—å –∫ modloader –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: {0}",
    "about_title": "–û –ø—Ä–æ–≥—Ä–∞–º–º–µ",
    "about_message": "GTA SA Modloader Priority Editor\n–í–µ—Ä—Å–∏—è {0}\n\n–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏ –º–æ–¥–æ–≤ GTA San Andreas modloader.".format(APP_VERSION),
    "author_title": "–û–± –∞–≤—Ç–æ—Ä–µ",
    "author_message": "–ú–∞–∫—Å–∏–º –ú–µ–ª—å–Ω–∏–∫–æ–≤\nEmail: melnikovmaksim540@gmail.com",
    "updates_title": "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π",
    "updates_message": "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π. –£ –≤–∞—Å —Å–∞–º–∞—è –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è. {0}".format(APP_VERSION),
    "help_title": "–°–ø—Ä–∞–≤–∫–∞",
    "help_message": "1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–æ–≤' –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–ø–∫–∏ modloader.\n2. –ò–∑–º–µ–Ω—è–π—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –¥–≤–æ–π–Ω—ã–º –∫–ª–∏–∫–æ–º –ø–æ –∫–æ–ª–æ–Ω–∫–µ '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç'.\n3. –ì–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª modloader.ini –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π.\n4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –∏ –∏–º–ø–æ—Ä—Ç–∞/—ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö.",
    "contact_support_subject": "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ GTA SA Modloader Priority Editor",
    "open_ini_file_title": "–û—Ç–∫—Ä—ã—Ç—å INI —Ñ–∞–π–ª",
    "theme_changed_to": "–¢–µ–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {0}",
    "language_menu": "–Ø–∑—ã–∫",
    "language_en": "English",
    "language_ru": "–†—É—Å—Å–∫–∏–π",
    "language_uk": "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", # Added Ukrainian language option to Russian localization
    "priority_changed_log": "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –º–æ–¥–∞ '{0}' –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {1}.",
    "mod_deleted_confirm_title": "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è",
    "mod_deleted_confirm": "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å '{0}' –∏–∑ —Å–ø–∏—Å–∫–∞? –≠—Ç–æ –ù–ï —É–¥–∞–ª–∏—Ç –º–æ–¥ –∏–∑ –≤–∞—à–µ–π —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã.",
    "multiple_mods_deleted_confirm": "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å {0} –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–æ–¥–∞(–æ–≤) –∏–∑ —Å–ø–∏—Å–∫–∞? –≠—Ç–æ –ù–ï —É–¥–∞–ª–∏—Ç –∏—Ö –∏–∑ –≤–∞—à–µ–π —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã.",
    "delete_all_mods_confirm_title": "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –º–æ–¥–æ–≤",
    "delete_all_mods_confirm": "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï –º–æ–¥—ã –∏–∑ —Å–ø–∏—Å–∫–∞? –≠—Ç–æ –ù–ï —É–¥–∞–ª–∏—Ç –º–æ–¥—ã –∏–∑ –≤–∞—à–µ–π —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã.",
    "mod_deleted_log": "–ú–æ–¥ '{0}' —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞.",
    "all_mods_deleted_log": "–í—Å–µ –º–æ–¥—ã —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–ø–∏—Å–∫–∞.",
    "loading_mods_from": "–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–æ–≤ –∏–∑: {0}",
    "scanning_modloader_folder": "–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ modloader: {0}",
    "found_mod_folder": "–ù–∞–π–¥–µ–Ω –º–æ–¥: {0}",
    "skipping_entry": "–ü—Ä–æ–ø—É—Å–∫ –∑–∞–ø–∏—Å–∏ (–Ω–µ –ø–∞–ø–∫–∞ –∏–ª–∏ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–π –ø—Ä–µ—Ñ–∏–∫—Å): {0}",
    "no_valid_mod_folders": "–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞–ø–æ–∫ –º–æ–¥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
    "no_mods_to_export": "–ù–µ—Ç –º–æ–¥–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞. –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.",
    "file_not_found": "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {0}",
    "invalid_priority_value": "–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –¥–ª—è –º–æ–¥–∞ '{0}' –≤ INI: '{1}'. –ü—Ä–æ–ø—É—â–µ–Ω–æ.",
    "mod_deleted_count": "–£–¥–∞–ª–µ–Ω–æ {0} –º–æ–¥(–æ–≤) –∏–∑ —Å–ø–∏—Å–∫–∞.",
    "priority_auto_assigned": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {0} –¥–ª—è –º–æ–¥–∞ '{1}'",
    "priority_from_mod_ini": "–ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç {0} –¥–ª—è –º–æ–¥–∞ '{1}' –∏–∑–≤–ª–µ—á–µ–Ω –∏–∑ INI —Ñ–∞–π–ª–∞ –º–æ–¥–∞.",
    "search_syntax_help": "–°–∏–Ω—Ç–∞–∫—Å–∏—Å –ø–æ–∏—Å–∫–∞: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ | –¥–ª—è –ò–õ–ò, - –¥–ª—è –ù–ï, p: –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'mod1 | mod2 -mod3 p:>50').",
    "search_applied": "–ü–æ–∏—Å–∫ –ø—Ä–∏–º–µ–Ω–µ–Ω: '{0}'. –ù–∞–π–¥–µ–Ω–æ –º–æ–¥–æ–≤: {1}.",
    "invalid_search_syntax": "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –ø–æ–∏—Å–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–ø—Ä–æ—Å.",
    "yes_button": "–î–∞",
    "no_button": "–ù–µ—Ç",
    "no_mods_selected_for_deletion": "–ú–æ–¥—ã –¥–ª—è —É–¥—Ñ–∞–ª–µ–Ω–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω—ã.",
    "save_button": "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
    "edit_priority_title": "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç",
    "info_title": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
    "rate_program_label": "–†–µ–π—Ç–∏–Ω–≥ –ü—Ä–æ–≥—Ä–∞–º–º—ã:",
    "installed_mods_count": "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –º–æ–¥–æ–≤: {0}", # New string for mod count
    "new_file_confirm_title": "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞", # New
    "new_file_confirm": "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ñ–∞–π–ª? –í—Å–µ –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã." # New
}

# =============================================================================
# --- –î–∞–Ω–Ω—ã–µ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è —É–∫—Ä–∞–∏–Ω—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ ---
# –°–æ–¥–µ—Ä–∂–∞—Ç –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ, –Ω–∞ —É–∫—Ä–∞–∏–Ω—Å–∫–æ–º —è–∑—ã–∫–µ.
# =============================================================================
LANG_UK = {
    "app_title": "–†–µ–¥–∞–∫—Ç–æ—Ä –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—ñ–≤ GTA SA Modloader 2.0",
    "file_menu": "–§–∞–π–ª",
    "file_new": "–ù–æ–≤–∏–π —Ñ–∞–π–ª", # New
    "file_open": "–í—ñ–¥–∫—Ä–∏—Ç–∏...",
    "file_save": "–ó–±–µ—Ä–µ–≥—Ç–∏",
    "file_save_as": "–ó–±–µ—Ä–µ–≥—Ç–∏ —è–∫...",
    "file_save_log_as": "–ó–±–µ—Ä–µ–≥—Ç–∏ –ª–æ–≥ —è–∫...", # NEW
    "file_exit": "–í–∏—Ö—ñ–¥",
    "recent_files_menu": "–û—Å—Ç–∞–Ω–Ω—ñ —Ñ–∞–π–ª–∏", # New
    "edit_menu": "–ü—Ä–∞–≤–∫–∞",
    "edit_import": "–Ü–º–ø–æ—Ä—Ç –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—ñ–≤ –∑ —Ñ–∞–π–ª—É",
    "edit_export_csv": "–ï–∫—Å–ø–æ—Ä—Ç –≤ CSV",
    "edit_reset_priorities": "–°–∫–∏–Ω—É—Ç–∏ –≤—Å—ñ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–∏",
    "edit_restore_defaults": "–í—ñ–¥–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–∏",
    "edit_delete_mod": "–í–∏–¥–∞–ª–∏—Ç–∏ –º–æ–¥(–∏) –∑—ñ —Å–ø–∏—Å–∫—É",
    "delete_all_mods": "–í–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ –º–æ–¥–∏ –∑—ñ —Å–ø–∏—Å–∫—É",
    "edit_select_all": "–í–∏–¥—ñ–ª–∏—Ç–∏ –≤—Å–µ", # New
    "edit_deselect_all": "–ó–Ω—è—Ç–∏ –≤–∏–¥—ñ–ª–µ–Ω–Ω—è", # New
    "edit_invert_selection": "–Ü–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏ –≤–∏–¥—ñ–ª–µ–Ω–Ω—è", # New
    "delete_all_mods_from_modloader_folder": "–í–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ –º–æ–¥–∏ –∑ –ø–∞–ø–∫–∏ modloader",
    "restore_all_mods_to_modloader_folder": "–í—ñ–¥–Ω–æ–≤–∏—Ç–∏ –≤—Å—ñ –º–æ–¥–∏ –≤ –ø–∞–ø–∫—É modloader",  # NEW
    "settings_menu": "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è",
    "theme_menu": "–¢–µ–º–∞",
    "theme_system": "–°–∏—Å—Ç–µ–º–Ω–∞ —Ç–µ–º–∞",
    "theme_dark": "–¢–µ–º–Ω–∞ —Ç–µ–º–∞",
    "theme_light": "–°–≤—ñ—Ç–ª–∞ —Ç–µ–º–∞",
    "settings_modloader_path": "–®–ª—è—Ö –¥–æ –ø–∞–ø–∫–∏ modloader",
    "settings_autosave_on_exit": "–ê–≤—Ç–æ–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–∏ –≤–∏—Ö–æ–¥—ñ", # New
    "settings_check_updates_on_startup": "–ü–µ—Ä–µ–≤—ñ—Ä—è—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É", # New
    "settings_always_on_top": "–ü–æ–≤–µ—Ä—Ö —É—Å—ñ—Ö –≤—ñ–∫–æ–Ω", # New
    "help_menu": "–î–æ–ø–æ–º–æ–≥–∞",
    "help_about": "–ü—Ä–æ –ø—Ä–æ–≥—Ä–∞–º—É",
    "help_author": "–ü—Ä–æ –∞–≤—Ç–æ—Ä–∞",
    "help_updates": "–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è",
    "help_help": "–ü–æ—Å—ñ–±–Ω–∏–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞",
    "help_contact": "–ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é",
    "search_mod": "–ü–æ—à—É–∫ –º–æ–¥–∞:",
    "update_mod_list": "–û–Ω–æ–≤–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ –º–æ–¥—ñ–≤",
    "generate_ini": "–ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ modloader.ini",
    "mod_column": "–ú–æ–¥",
    "priority_column": "–ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç",
    "log_label": "–õ–æ–≥:",
    "clear_log": "–û—á–∏—Å—Ç–∏—Ç–∏ –ª–æ–≥",
    "logs_cleared": "–õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ñ.",
    "select_all_log": "–í–∏–¥—ñ–ª–∏—Ç–∏ –≤—Å–µ",
    "copy_all_log": "–ö–æ–ø—ñ—é–≤–∞—Ç–∏ –≤—Å–µ",
    "author_label": "–ê–≤—Ç–æ—Ä: –ú–∞–∫—Å–∏–º –ú–µ–ª—å–Ω–∏–∫–æ–≤",
    "modloader_folder_not_found": "‚ùå –ü–∞–ø–∫—É '{0}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ —Ü–µ –Ω–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è! –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —à–ª—è—Ö —É –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö.",
    "mods_not_found": "–ú–æ–¥–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ '{0}' –∞–±–æ –ø–∞–ø–∫–∞ –ø–æ—Ä–æ–∂–Ω—è/–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.",
    "mods_loaded": "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –º–æ–¥—ñ–≤: {0}",
    "priority_conflicts_found": "‚ö†Ô∏è –í–∏—è–≤–ª–µ–Ω–æ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç–∏ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—ñ–≤:",
    "priority_conflict_detail": "  –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç {0} –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ –º–æ–¥–∞–º: {1}",
    "no_priority_conflicts": "‚úÖ –ö–æ–Ω—Ñ–ª—ñ–∫—Ç–∏ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—ñ–≤ –Ω–µ –≤–∏—è–≤–ª–µ–Ω–æ.",
    "priority_value_error_title": "–ü–æ–º–∏–ª–∫–∞",
    "priority_value_error": "–ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —Ü—ñ–ª–∏–º —á–∏—Å–ª–æ–º –≤—ñ–¥ 0 –¥–æ 99.",
    "no_mods_to_generate": "–ù–µ–º–∞—î –º–æ–¥—ñ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –º–æ–¥–∏.",
    "backup_created": "üì¶ –°—Ç–≤–æ—Ä–µ–Ω–æ —Ä–µ–∑–µ—Ä–≤–Ω—É –∫–æ–ø—ñ—é —Ñ–∞–π–ª—É '{0}'",
    "backup_error": "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ–∑–µ—Ä–≤–Ω–æ—ó –∫–æ–ø—ñ—ó: {0}",
    "file_saved_success": "‚úÖ –§–∞–π–ª '{0}' —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ.",
    "file_saved_info": "–§–∞–π–ª '{0}' —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ.",
    "file_save_error": "‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É: {0}",
    "file_save_error_details": "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ —Ñ–∞–π–ª:\n{0}",
    "file_read_error": "–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ —Ñ–∞–π–ª:\n{0}",
    "no_priority_sections": "–£ —Ñ–∞–π–ª—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Å–µ–∫—Ü—ñ–π –∑ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–∞–º–∏ –∞–±–æ –≤—ñ–¥—Å—É—Ç–Ω—è —Å–µ–∫—Ü—ñ—è 'Profiles.Default.Priority'.",
    "priorities_imported": "‚úÖ –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–∏ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ –∑ —Ñ–∞–π–ª—É '{0}'.",
    "export_csv_complete": "‚úÖ –ï–∫—Å–ø–æ—Ä—Ç –¥–æ CSV —Ñ–∞–π–ª—É '{0}' –∑–∞–≤–µ—Ä—à–µ–Ω–æ.",
    "export_csv_info": "–§–∞–π–ª '{0}' —É—Å–ø—ñ—à–Ω–æ –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ.",
    "export_csv_error": "‚ùå –ü–æ–º–∏–ª–∫–∞ –µ–∫—Å–ø–æ—Ä—Ç—É –¥–æ CSV: {0}",
    "export_csv_error_details": "–ù–µ –≤–¥–∞–ª–æ—Å—è –µ–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ —Ñ–∞–π–ª:\n{0}",
    "reset_priorities_confirm_title": "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è",
    "reset_priorities_confirm": "–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ —Å–∫–∏–Ω—É—Ç–∏ –≤—Å—ñ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–∏?",
    "priorities_reset": "‚úÖ –£—Å—ñ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–∏ —Å–∫–∏–Ω—É—Ç–æ –Ω–∞ 0.",
    "restore_defaults_confirm_title": "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è",
    "restore_defaults_confirm": "–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤—ñ–¥–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–∏?",
    "priorities_restored": "‚úÖ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–∏ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ.",
    "modloader_path_changed": "–®–ª—è—Ö –¥–æ modloader –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: {0}",
    "about_title": "–ü—Ä–æ –ø—Ä–æ–≥—Ä–∞–º—É",
    "about_message": "–†–µ–¥–∞–∫—Ç–æ—Ä –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—ñ–≤ GTA SA Modloader\n–í–µ—Ä—Å—ñ—è {0}\n\n–ü—Ä–æ–≥—Ä–∞–º–∞ –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–∞–º–∏ –º–æ–¥—ñ–≤ GTA San Andreas modloader.",
    "author_title": "–ü—Ä–æ –∞–≤—Ç–æ—Ä–∞",
    "author_message": "–ú–∞–∫—Å–∏–º –ú–µ–ª—å–Ω–∏–∫–æ–≤\nEmail: melnikovmaksim540@gmail.com",
    "updates_title": "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω—å",
    "updates_message": "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω—å. –£ –≤–∞—Å –Ω–∞–π–Ω–æ–≤—ñ—à–∞ –≤–µ—Ä—Å—ñ—è. {0}",
    "help_title": "–î–æ–≤—ñ–¥–∫–∞",
    "help_message": "1. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–û–Ω–æ–≤–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ –º–æ–¥—ñ–≤' –¥–ª—è —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è –ø–∞–ø–∫–∏ modloader.\n2. –ó–º—ñ–Ω—é–π—Ç–µ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–∏ –ø–æ–¥–≤—ñ–π–Ω–∏–º –∫–ª—ñ–∫–æ–º –ø–æ –∫–æ–ª–æ–Ω—Ü—ñ '–ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç'.\n3. –ó–≥–µ–Ω–µ—Ä—É–π—Ç–µ —Ñ–∞–π–ª modloader.ini –¥–ª—è –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –∑–º—ñ–Ω.\n4. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è/–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ —Ç–∞ —ñ–º–ø–æ—Ä—Ç—É/–µ–∫—Å–ø–æ—Ä—Ç—É –¥–∞–Ω–∏—Ö.",
    "contact_support_subject": "–ü—ñ–¥—Ç—Ä–∏–º–∫–∞ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—ñ–≤ GTA SA Modloader",
    "open_ini_file_title": "–í—ñ–¥–∫—Ä–∏—Ç–∏ INI —Ñ–∞–π–ª",
    "theme_changed_to": "–¢–µ–º—É –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: {0}",
    "language_menu": "–ú–æ–≤–∞",
    "language_en": "–ê–Ω–≥–ª—ñ–π—Å—å–∫–∞",
    "language_ru": "–†–æ—Å—ñ–π—Å—å–∫–∞",
    "language_uk": "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞",
    "priority_changed_log": "–ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –º–æ–¥–∞ '{0}' –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {1}.",
    "mod_deleted_confirm_title": "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è",
    "mod_deleted_confirm": "–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ '{0}' –∑—ñ —Å–ø–∏—Å–∫—É? –¶–µ –ù–ï –≤–∏–¥–∞–ª–∏—Ç—å –º–æ–¥ –∑ –≤–∞—à–æ—ó —Ñ–∞–π–ª–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏.",
    "multiple_mods_deleted_confirm": "–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ {0} –≤–∏–±—Ä–∞–Ω–∏—Ö –º–æ–¥—ñ–≤ –∑—ñ —Å–ø–∏—Å–∫—É? –¶–µ –ù–ï –≤–∏–¥–∞–ª–∏—Ç—å —ó—Ö –∑ –≤–∞—à–æ—ó —Ñ–∞–π–ª–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏.",
    "delete_all_mods_confirm_title": "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –≤—Å—ñ—Ö –º–æ–¥—ñ–≤",
    "delete_all_mods_confirm": "–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –í–°–Ü –º–æ–¥–∏ –∑—ñ —Å–ø–∏—Å–∫—É? –¶–µ –ù–ï –≤–∏–¥–∞–ª–∏—Ç—å –º–æ–¥–∏ –∑ –≤–∞—à–æ—ó —Ñ–∞–π–ª–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏.",
    "mod_deleted_log": "–ú–æ–¥ '{0}' –≤–∏–¥–∞–ª–µ–Ω–æ –∑—ñ —Å–ø–∏—Å–∫—É.",
    "all_mods_deleted_log": "–£—Å—ñ –º–æ–¥–∏ –≤–∏–¥–∞–ª–µ–Ω–æ –∑—ñ —Å–ø–∏—Å–∫—É.",
    "loading_mods_from": "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥—ñ–≤ –∑: {0}",
    "scanning_modloader_folder": "–°–∫–∞–Ω—É–≤–∞–Ω–Ω—è –ø–∞–ø–∫–∏ modloader: {0}",
    "found_mod_folder": "–ó–Ω–∞–π–¥–µ–Ω–æ –ø–∞–ø–∫—É –º–æ–¥–∞: {0}",
    "skipping_entry": "–ü—Ä–æ–ø—É—Å–∫ –∑–∞–ø–∏—Å—É (–Ω–µ –ø–∞–ø–∫–∞ –∞–±–æ —ñ–≥–Ω–æ—Ä–æ–≤–∞–Ω–∏–π –ø—Ä–µ—Ñ—ñ–∫—Å): {0}",
    "no_valid_mod_folders": "–î—ñ–π—Å–Ω–∏—Ö –ø–∞–ø–æ–∫ –º–æ–¥—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.",
    "file_not_found": "–§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {0}",
    "invalid_priority_value": "–ù–µ–≤—ñ—Ä–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—É –¥–ª—è –º–æ–¥–∞ '{0}' –≤ INI: '{1}'. –ü—Ä–æ–ø—É—â–µ–Ω–æ.",
    "mod_deleted_count": "–í–∏–¥–∞–ª–µ–Ω–æ {0} –º–æ–¥(—ñ–≤) –∑—ñ —Å–ø–∏—Å–∫—É.",
    "priority_auto_assigned": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç: {0} –¥–ª—è –º–æ–¥–∞ '{1}'",
    "priority_from_mod_ini": "–ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç {0} –¥–ª—è –º–æ–¥–∞ '{1}' –≤–∏—Ç—è–≥–Ω—É—Ç–æ –∑ INI —Ñ–∞–π–ª—É –º–æ–¥–∞.",
    "search_syntax_help": "–°–∏–Ω—Ç–∞–∫—Å–∏—Å –ø–æ—à—É–∫—É: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ | –¥–ª—è –ê–ë–û, - –¥–ª—è –ù–ï, p: –¥–ª—è –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 'mod1 | mod2 -mod3 p:>50').",
    "search_applied": "–ü–æ—à—É–∫ –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ: '{0}'. –ó–Ω–∞–π–¥–µ–Ω–æ {1} –º–æ–¥—ñ–≤.",
    "invalid_search_syntax": "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –ø–æ—à—É–∫—É. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∑–∞–ø–∏—Ç.",
    "yes_button": "–¢–∞–∫",
    "no_button": "–ù—ñ",
    "no_mods_selected_for_deletion": "–ú–æ–¥–∏ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –Ω–µ –≤–∏–±—Ä–∞–Ω–æ.",
    "save_button": "–ó–±–µ—Ä–µ–≥—Ç–∏",
    "edit_priority_title": "–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç",
    "info_title": "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è",
    "rate_program_label": "–û—Ü—ñ–Ω—ñ—Ç—å —Ü—é –ø—Ä–æ–≥—Ä–∞–º—É:",
    "installed_mods_count": "–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –º–æ–¥—ñ–≤: {0}",
    "new_file_confirm_title": "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª—É", # New
    "new_file_confirm": "–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π —Ñ–∞–π–ª? –£—Å—ñ –Ω–µ–∑–±–µ—Ä–µ–∂–µ–Ω—ñ –∑–º—ñ–Ω–∏ –±—É–¥–µ –≤—Ç—Ä–∞—á–µ–Ω–æ." # New
}


# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
localization = Localization({"ru": LANG_RU, "en": LANG_EN, "uk": LANG_UK})

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
localization.set_language("ru")

# =============================================================================
# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
# –°–æ–¥–µ—Ä–∂–∞—Ç –æ–±—â–∏–µ –ø–æ–ª–µ–∑–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é –∫ –∫–ª–∞—Å—Å—É GUI.
# =============================================================================
def is_valid_priority(priority):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã–º (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 99)."""
    return isinstance(priority, int) and 0 <= priority <= 99

# =============================================================================
# --- –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ ---
# –≠—Ç–æ—Ç –∫–ª–∞—Å—Å —É–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ–º–∏ –∞—Å–ø–µ–∫—Ç–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏ –ª–æ–≥–∏–∫–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
# =============================================================================
class ModPriorityGUI(tk.Tk):
    def __init__(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –µ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã.
        """
        super().__init__()

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –∏–∫–æ–Ω–æ–∫.
        # –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é —Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞, —Ç–∞–∫ –∏ –ø–æ—Å–ª–µ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ PyInstaller.
        self.program_root_dir = os.path.dirname(sys.executable) if getattr(sys, 'frozen', False) else \
                                 os.path.abspath(os.path.dirname(sys.argv[0]))

        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—É—Ç–∏ modloader, –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–∏—Å–∫–∞, —Ç–µ–º—ã –∏ —è–∑—ã–∫–∞).
        self.config_file = os.path.join(self.program_root_dir, "config.ini")
        self.app_config = configparser.ConfigParser()
        self.load_app_config()

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø—É—Ç—å –∏–ª–∏ –ø—É—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
        # –ï—Å–ª–∏ –ø—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥–µ, —Ç–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è "modloader"
        # –≤–Ω—É—Ç—Ä–∏ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã.
        self.modloader_dir = self.app_config.get("Paths", "modloader_path",
                                                 fallback=os.path.join(self.program_root_dir, DEFAULT_MODLOADER_SUBDIR))
        # –ü—É—Ç—å –¥–ª—è modloader.ini —Ç–µ–ø–µ—Ä—å –≤—Å–µ–≥–¥–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–∞–ø–∫–µ modloader, –∫–æ—Ç–æ—Ä—É—é –≤—ã–±—Ä–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.
        self.output_ini_path = os.path.join(self.modloader_dir, OUTPUT_FILE_NAME)

        self.ini_config_data = configparser.ConfigParser()

        # –ù–∞—á–∞–ª—å–Ω—ã–π —è–∑—ã–∫, –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ –ø–æ–∑–∂–µ.
        self.current_lang = localization.language_dict[localization.language]
        self.title(self.current_lang["app_title"])
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞.
        self.geometry("1000x700") # –£–≤–µ–ª–∏—á–µ–Ω–∞ —à–∏—Ä–∏–Ω–∞ –æ–∫–Ω–∞ –¥–æ 1000 –ø–∏–∫—Å–µ–ª–µ–π
        self.resizable(True, True) # –†–∞–∑—Ä–µ—à–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞.

        self.mods = [] # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –º–æ–¥–æ–≤. –§–æ—Ä–º–∞—Ç: [(mod_name, priority), ...]
        self.filtered_mods = [] # –°–ø–∏—Å–æ–∫ –º–æ–¥–æ–≤ –ø–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ–∏—Å–∫–∞.
        self.recent_files = [] # –°–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º —Ç–µ–º—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ –∏–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–∏—Å—Ç–µ–º–Ω—ã–π.
        self.theme_mode = tk.StringVar(value=self.app_config.get("Theme", "mode", fallback="system"))
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —è–∑—ã–∫ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ –∏–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∏–π.
        self.language_mode = tk.StringVar(value=self.app_config.get("Language", "mode", fallback="ru"))
        # –ù–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.autosave_on_exit_var = tk.BooleanVar(value=self.app_config.getboolean("Settings", "autosave_on_exit", fallback=False))
        # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º fallback –¥–ª—è check_updates_on_startup –≤ False
        self.check_updates_on_startup_var = tk.BooleanVar(value=self.app_config.getboolean("Settings", "check_updates_on_startup", fallback=False))
        self.always_on_top_var = tk.BooleanVar(value=self.app_config.getboolean("Settings", "always_on_top", fallback=False))

        # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞ –≤ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞
        self.is_placeholder_active = True

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —à—Ä–∏—Ñ—Ç—ã –°–†–ê–ó–£, —á—Ç–æ–±—ã –æ–Ω–∏ –±—ã–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏–¥–∂–µ—Ç–æ–≤.
        self.font_main = ("Segoe UI", 11)
        self.font_small = ("Segoe UI", 10, "italic")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ttk.Style –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –≤–∏–¥–∂–µ—Ç–æ–≤ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º.
        self.style = ttk.Style(self)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ü–≤–µ—Ç–æ–≤ –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤—ã—Ö –æ–∫–æ–Ω –∏ –ª–æ–≥–∞.
        # –≠—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è –±—É–¥—É—Ç –æ–±–Ω–æ–≤–ª–µ–Ω—ã —Ñ—É–Ω–∫—Ü–∏–µ–π set_theme.
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Å–≤–µ—Ç–ª–æ–π —Ç–µ–º—ã, —Ç–∞–∫ –∫–∞–∫ –≤–∏–¥–∂–µ—Ç—ã —Å–æ–∑–¥–∞—é—Ç—Å—è –¥–æ –ø–µ—Ä–≤–æ–≥–æ –≤—ã–∑–æ–≤–∞ set_theme
        self.dialog_bg = "#FFFFFF"
        self.dialog_fg = "#222222"
        self.dialog_btn_bg = "#E0E0E0"
        self.dialog_btn_fg = "#222222"
        self.dialog_error_fg = "#FF0000"
        self.log_current_bg = "#FFFFFF"
        self.log_current_fg = "#222222"
        # –¶–≤–µ—Ç–∞ –¥–ª—è –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞
        self.placeholder_fg = "#AAAAAA"
        self.normal_fg = "#222222"

        # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å 5 –∑–≤–µ–∑–¥–∞–º–∏
        self.rating_var = tk.IntVar(value=5) # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è rating_var –ü–ï–†–ï–î create_widgets()

        # --- –°–æ–∑–¥–∞–µ–º –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ä–∞–º–∫—É ---
        self.border_thickness = 5 # –¢–æ–ª—â–∏–Ω–∞ —Ä–∞–º–∫–∏
        self.border_canvas = tk.Canvas(self, highlightthickness=0)
        self.border_canvas.pack(fill="both", expand=True)
        # –°–æ–∑–¥–∞–µ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –¥–ª—è —Ä–∞–º–∫–∏, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∞–Ω–∏–º–∏—Ä–æ–≤–∞—Ç—å—Å—è
        self.animated_border_rect = self.border_canvas.create_rectangle(0, 0, 0, 0, outline="", width=self.border_thickness)
        
        # –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤–Ω—É—Ç—Ä–∏ —Ä–∞–º–∫–∏
        self.content_frame = ttk.Frame(self.border_canvas, padding="10")
        # –†–∞–∑–º–µ—â–∞–µ–º —Ñ—Ä–µ–π–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≤–Ω—É—Ç—Ä–∏ canvas —Å –æ—Ç—Å—Ç—É–ø–æ–º –¥–ª—è —Ä–∞–º–∫–∏
        self.content_window_id = self.border_canvas.create_window(
            self.border_thickness, self.border_thickness,
            window=self.content_frame, anchor="nw"
        )
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ canvas –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–º–∫–∏ –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        self.border_canvas.bind("<Configure>", self._on_canvas_resize)

        # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –º–µ–Ω—é –∏ –≤–∏–¥–∂–µ—Ç—ã, —á—Ç–æ–±—ã self.log_text —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª
        self.create_menu() # –°–æ–∑–¥–∞–µ–º –º–µ–Ω—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
        self.create_widgets() # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–∏–¥–∂–µ—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ.
        self.set_theme() # –£–¥–∞–ª–µ–Ω initial_setup=True, —Ç–∞–∫ –∫–∞–∫ –≤—Å–µ –≤–∏–¥–∂–µ—Ç—ã —É–∂–µ —Å–æ–∑–¥–∞–Ω—ã.

        # –ü–æ–∏—Å–∫ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–∫–æ–Ω–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
        self._set_app_icon()

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —è–∑—ã–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
        # Moved this call after create_widgets() to ensure all widgets exist.
        self.set_language(self.language_mode.get(), initial_setup=True) 

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞.
        last_search_query = self.app_config.get("Search", "last_query", fallback="")
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å, —ç—Ç–æ –Ω–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä
        if last_search_query:
            self.search_var.set(last_search_query)
            self.is_placeholder_active = False
        else:
            # –ò–Ω–∞—á–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä
            self.search_var.set(f"üîç {self.current_lang['search_mod']}")
            self.is_placeholder_active = True


        self.load_mods_and_assign_priorities()
        self.update_mod_count_label()  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–æ–≤
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–æ–ª–æ—Å–∫–∏
        self.hue_offset = 0.0 # –°–º–µ—â–µ–Ω–∏–µ –æ—Ç—Ç–µ–Ω–∫–∞ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π –ø–æ–ª–æ—Å–∫–∏
        self.animation_speed = 0.01 # –°–∫–æ—Ä–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏ (—á–µ–º –º–µ–Ω—å—à–µ, —Ç–µ–º –±—ã—Å—Ç—Ä–µ–µ)
        self.segment_count = 100 # –£–≤–µ–ª–∏—á–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –¥–ª—è –±–æ–ª–µ–µ –ø–ª–∞–≤–Ω–æ–π –≥—Ä–∞–¥–∞—Ü–∏–∏
        self.animate_colorful_line() # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–æ–ª–æ—Å–∫–∏

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ —Ä–∞–º–∫–∏
        self.border_hue_offset = 0.0
        self.border_animation_speed = 0.003 # –£–º–µ–Ω—å—à–µ–Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è –±–æ–ª–µ–µ –ø–ª–∞–≤–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞
        self.animate_border_color() # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Ä–∞–º–∫–∏

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
        self.protocol("WM_DELETE_WINDOW", self.on_closing)

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É "–ü–æ–≤–µ—Ä—Ö –≤—Å–µ—Ö –æ–∫–æ–Ω" –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        self.attributes('-topmost', self.always_on_top_var.get())

        # –£–î–ê–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ, –µ—Å–ª–∏ –æ–ø—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞
        # if self.check_updates_on_startup_var.get():
        #     self.check_for_updates()
    def delete_all_mods_from_modloader_folder(self):
        """–ü–µ—Ä–µ–º–µ—â–∞–µ—Ç –≤—Å–µ –º–æ–¥—ã –∏–∑ –ø–∞–ø–∫–∏ modloader –≤ –ø–∞–ø–∫—É modloader_backup."""
        backup_folder = os.path.join(self.modloader_dir, "modloader_backup")
        os.makedirs(backup_folder, exist_ok=True)
        moved_count = 0

        for name in os.listdir(self.modloader_dir):
            full_path = os.path.join(self.modloader_dir, name)
            if os.path.isdir(full_path) and name.lower() != "modloader_backup":
                try:
                    shutil.move(full_path, os.path.join(backup_folder, name))
                    moved_count += 1
                except Exception as e:
                    self.log(f"‚ùå {self.current_lang['file_save_error'].format(str(e))}", tag="error")

        self.log(f"üì¶ {moved_count} –º–æ–¥(–æ–≤) –ø–µ—Ä–µ–º–µ—â–µ–Ω–æ –≤ 'modloader_backup'.", tag="info")
        self.load_mods_and_assign_priorities()

    def restore_all_mods_to_modloader_folder(self):
        """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –º–æ–¥—ã –∏–∑ modloader_backup –≤ modloader."""
        backup_folder = os.path.join(self.modloader_dir, "modloader_backup")
        if not os.path.exists(backup_folder):
            self.log("‚ö†Ô∏è –ü–∞–ø–∫–∞ 'modloader_backup' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", tag="warning")
            return

        restored_count = 0
        for name in os.listdir(backup_folder):
            src = os.path.join(backup_folder, name)
            dst = os.path.join(self.modloader_dir, name)
            try:
                shutil.move(src, dst)
                restored_count += 1
            except Exception as e:
                self.log(f"‚ùå {self.current_lang['file_save_error'].format(str(e))}", tag="error")

        self.log(f"‚ôªÔ∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –º–æ–¥–æ–≤: {restored_count}.", tag="info")
        self.load_mods_and_assign_priorities()
        # –ü–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è ‚Äî –ø—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å –ø–∞–ø–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –ø—É—Å—Ç–∞
        try:
            if os.path.isdir(backup_folder) and not os.listdir(backup_folder):
                os.rmdir(backup_folder)
                self.log("üßπ –ü–∞–ø–∫–∞ 'modloader_backup' —É–¥–∞–ª–µ–Ω–∞, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ –ø—É—Å—Ç–∞.", tag="info")
        except Exception as e:
            self.log(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–∞–ø–∫—É 'modloader_backup': {str(e)}", tag="warning")



    def _set_app_icon(self):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏–∫–æ–Ω–∫—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ icon.ico."""
        icon_path_candidates = [
            os.path.join(os.getcwd(), 'icon.ico'), # –¢–µ–∫—É—â–∞—è —Ä–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è.
            os.path.join(self.program_root_dir, 'icon.ico'), # –ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã.
        ]
        if getattr(sys, 'frozen', False): # –î–ª—è —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö PyInstaller –ø–∞–∫–µ—Ç–æ–≤.
            # PyInstaller –∫–ª–∞–¥–µ—Ç —Ñ–∞–π–ª—ã –≤ sys._MEIPASS
            icon_path_candidates.append(os.path.join(sys._MEIPASS, 'icon.ico'))

        icon_loaded = False
        for icon_path in icon_path_candidates:
            if os.path.exists(icon_path):
                try:
                    self.iconbitmap(icon_path)
                    icon_loaded = True
                    break
                except tk.TclError as e:
                    print(f"WARNING: Failed to load icon from '{icon_path}'. Details: {e}")
                except Exception as e:
                    print(f"WARNING: An unexpected error occurred while loading icon '{icon_path}': {e}")
            
        if not icon_loaded:
            print("INFO: No 'icon.ico' found or could not be loaded. Running without custom icon.")


    def save_log_as(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ª–æ–≥–∞ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª."""
        file_path = filedialog.asksaveasfilename(
            defaultextension=".txt",
            filetypes=[("Text files", "*.txt"), ("All files", "*.*")],
            title=self.current_lang["file_save_as"]
        )
        if file_path:
            try:
                log_content = self.log_text.get("1.0", tk.END)
                with open(file_path, "w", encoding="utf-8") as f:
                    f.write(log_content)
                self.log(self.current_lang["file_saved_success"].format(file_path), tag="info")
            except Exception as e:
                self.log(self.current_lang["file_save_error"].format(str(e)), tag="error")


    def on_closing(self):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
        """
        if self.autosave_on_exit_var.get():
            self.generate_modloader_ini() # –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
        self.save_app_config()
        self.destroy() # –ó–∞–∫—Ä—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.

    def load_app_config(self):
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ config.ini.
        """
        if os.path.exists(self.config_file):
            try:
                self.app_config.read(self.config_file, encoding='utf-8')
            except Exception as e:
                # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —á—Ç–µ–Ω–∏—è, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å, —Ç–∞–∫ –∫–∞–∫ –ª–æ–≥ –µ—â–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å–µ–∫—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ –∫–æ–Ω—Ñ–∏–≥–µ, —Å–æ–∑–¥–∞–µ–º –∏—Ö, –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.
        for section in ["Paths", "Search", "Theme", "Language", "RecentFiles", "Settings"]: # –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å–µ–∫—Ü–∏—è RecentFiles –∏ Settings
            if not self.app_config.has_section(section):
                self.app_config.add_section(section)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ñ–∞–π–ª—ã
        recent_files_str = self.app_config.get("RecentFiles", "paths", fallback="")
        self.recent_files = [f for f in recent_files_str.split(';') if f and os.path.exists(f)] # –§–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ –∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—É—Ç–∏

    def save_app_config(self):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ —Ñ–∞–π–ª config.ini.
        """
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∫–æ–Ω—Ñ–∏–≥–∞.
        # –ï—Å–ª–∏ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É, –∏–Ω–∞—á–µ - —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.
        if self.is_placeholder_active:
            self.app_config.set("Search", "last_query", "")
        else:
            self.app_config.set("Search", "last_query", self.search_var.get())
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–º—ã –∏ —è–∑—ã–∫–∞.
        self.app_config.set("Theme", "mode", self.theme_mode.get())
        self.app_config.set("Language", "mode", self.language_mode.get())
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–æ–≤—ã—Ö –æ–ø—Ü–∏–π
        self.app_config.set("Settings", "autosave_on_exit", str(self.autosave_on_exit_var.get()))
        self.app_config.set("Settings", "check_updates_on_startup", str(self.check_updates_on_startup_var.get()))
        self.app_config.set("Settings", "always_on_top", str(self.always_on_top_var.get()))

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ñ–∞–π–ª—ã
        self.app_config.set("RecentFiles", "paths", ";".join(self.recent_files))
        try:
            with open(self.config_file, 'w', encoding='utf-8') as configfile:
                self.app_config.write(configfile)
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")

    def set_language(self, lang_code, initial_setup=False):
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.
        :param lang_code: –ö–æ–¥ —è–∑—ã–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "en", "ru", "uk").
        :param initial_setup: –ï—Å–ª–∏ True, —Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ,
                              –∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥ –Ω–µ –±—É–¥—É—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫.
        """
        localization.set_language(lang_code)
        self.current_lang = localization.language_dict[localization.language] # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
        self.update_ui_texts() # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —Ç–µ–∫—Å—Ç—ã –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ.
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ log_text —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–µ–∂–¥–µ —á–µ–º –ø—ã—Ç–∞—Ç—å—Å—è —á—Ç–æ-—Ç–æ –≤ –Ω–µ–≥–æ –∑–∞–ø–∏—Å–∞—Ç—å,
        # –∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞.
        if hasattr(self, 'log_text') and not initial_setup:
            self.log(f"{self.current_lang['language_menu']}: {self.current_lang[f'language_{lang_code}']}", add_timestamp=False)

    def update_ui_texts(self):
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —è–∑—ã–∫–æ–º.
        """
        self.title(self.current_lang["app_title"])

        # Destroy and recreate the menu to ensure all labels are updated correctly
        if hasattr(self, 'menubar') and self.menubar is not None:
            self.menubar.destroy()
        self.create_menu() # Recreate the menu with new language texts
        
        # Ensure all pending GUI updates are processed before configuring other widgets
        self.update_idletasks() 
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤ –≤–∏–¥–∂–µ—Ç–æ–≤
        # self.search_label.config(text=self.current_lang["search_mod"]) # –£–¥–∞–ª–µ–Ω–æ, —Ç–∞–∫ –∫–∞–∫ —Ç–µ–∫—Å—Ç —Ç–µ–ø–µ—Ä—å –≤ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–µ
        self.update_mod_list_button.config(text=self.current_lang["update_mod_list"])
        self.generate_ini_button.config(text=self.current_lang["generate_ini"])
        # Correctly update the text of the LabelFrame
        self.log_frame.config(text=self.current_lang["log_label"]) 
        self.clear_log_button.config(text=self.current_lang["clear_log"])
        self.select_all_log_button.config(text=self.current_lang["select_all_log"])
        self.copy_all_log_button.config(text=self.current_lang["copy_all_log"])
        self.author_label.config(text=self.current_lang["author_label"])
        self.rate_program_label.config(text=self.current_lang["rate_program_label"])

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∫–æ–ª–æ–Ω–æ–∫ Treeview
        self.mod_tree.heading("mod", text=self.current_lang["mod_column"])
        self.mod_tree.heading("priority", text=self.current_lang["priority_column"])

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫
        ToolTip(self.search_entry, self.current_lang["search_syntax_help"])
        ToolTip(self.update_mod_list_button, self.current_lang["update_mod_list"])
        ToolTip(self.generate_ini_button, self.current_lang["generate_ini"])
        ToolTip(self.clear_log_button, self.current_lang["clear_log"])
        ToolTip(self.select_all_log_button, self.current_lang["select_all_log"])
        ToolTip(self.copy_all_log_button, self.current_lang["copy_all_log"])

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä, –µ—Å–ª–∏ –æ–Ω –∞–∫—Ç–∏–≤–µ–Ω
        if self.is_placeholder_active:
            self.search_var.set(f"üîç {self.current_lang['search_mod']}")
            self.search_entry.config(foreground=self.placeholder_fg)
        else:
            self.search_entry.config(foreground=self.normal_fg)


        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –º–æ–¥–æ–≤
        self.update_mod_count_label()

    def create_menu(self):
        """
        –°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –ø–æ–¥–º–µ–Ω—é "–§–∞–π–ª", "–ü—Ä–∞–≤–∫–∞", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏", "–ü–æ–º–æ—â—å".
        """
        self.menubar = tk.Menu(self)
        self.config(menu=self.menubar)

        # –ú–µ–Ω—é "–§–∞–π–ª"
        self.file_menu = tk.Menu(self.menubar, tearoff=0)
        self.menubar.add_cascade(label=self.current_lang["file_menu"], menu=self.file_menu)
        self.file_menu.add_command(label=self.current_lang["file_new"], command=self.new_file) # New File
        self.file_menu.add_command(label=self.current_lang["file_open"], command=self.open_ini_file)
        self.file_menu.add_command(label=self.current_lang["file_save"], command=self.save_ini_file)
        self.file_menu.add_command(label=self.current_lang["file_save_as"], command=self.save_ini_file_as)
        self.file_menu.add_command(label=self.current_lang["file_save_log_as"], command=self.save_log_as) # NEW: Use localized string
        self.file_menu.add_separator()
        
        # –ü–æ–¥–º–µ–Ω—é "–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ñ–∞–π–ª—ã"
        self.recent_files_menu = tk.Menu(self.file_menu, tearoff=0)
        self.file_menu.add_cascade(label=self.current_lang["recent_files_menu"], menu=self.recent_files_menu)
        self.update_recent_files_menu() # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
        
        self.file_menu.add_separator()
        self.file_menu.add_command(label=self.current_lang["file_exit"], command=self.on_closing)

        # –ú–µ–Ω—é "–ü—Ä–∞–≤–∫–∞"
        self.edit_menu = tk.Menu(self.menubar, tearoff=0)
        self.menubar.add_cascade(label=self.current_lang["edit_menu"], menu=self.edit_menu)
        self.edit_menu.add_command(label=self.current_lang["edit_import"], command=self.import_priorities_from_file)
        self.edit_menu.add_command(label=self.current_lang["edit_export_csv"], command=self.export_to_csv)
        self.edit_menu.add_separator()
        self.edit_menu.add_command(label=self.current_lang["edit_select_all"], command=self.select_all_mods) # New
        self.edit_menu.add_command(label=self.current_lang["edit_deselect_all"], command=self.deselect_all_mods) # New
        self.edit_menu.add_command(label=self.current_lang["edit_invert_selection"], command=self.invert_selection) # New
        self.edit_menu.add_separator()
        self.edit_menu.add_command(label=self.current_lang["edit_reset_priorities"], command=self.reset_all_priorities)
        self.edit_menu.add_command(label=self.current_lang["edit_restore_defaults"], command=self.restore_default_priorities)
        self.edit_menu.add_separator()
        self.edit_menu.add_command(label=self.current_lang["edit_delete_mod"], command=self.delete_selected_mods)
        self.edit_menu.add_command(label=self.current_lang["delete_all_mods"], command=self.delete_all_mods)
        # NEW: –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö –º–æ–¥–æ–≤ –∏–∑ –ø–∞–ø–∫–∏
        self.edit_menu.add_separator()
        self.edit_menu.add_command(label=self.current_lang["delete_all_mods_from_modloader_folder"], command=self.delete_all_mods_from_modloader_folder)
        self.edit_menu.add_command(label=self.current_lang["restore_all_mods_to_modloader_folder"], command=self.restore_all_mods_to_modloader_folder)

        # –ú–µ–Ω—é "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
        self.settings_menu = tk.Menu(self.menubar, tearoff=0)
        self.menubar.add_cascade(label=self.current_lang["settings_menu"], menu=self.settings_menu)

        # –ü–æ–¥–º–µ–Ω—é "–¢–µ–º–∞"
        self.theme_menu = tk.Menu(self.settings_menu, tearoff=0)
        self.settings_menu.add_cascade(label=self.current_lang["theme_menu"], menu=self.theme_menu)
        self.theme_menu.add_radiobutton(label=self.current_lang["theme_system"], variable=self.theme_mode, value="system", command=self.set_theme)
        self.theme_menu.add_radiobutton(label=self.current_lang["theme_dark"], variable=self.theme_mode, value="dark", command=self.set_theme)
        self.theme_menu.add_radiobutton(label=self.current_lang["theme_light"], variable=self.theme_mode, value="light", command=self.set_theme)

        # –ü–æ–¥–º–µ–Ω—é "–Ø–∑—ã–∫"
        self.language_menu = tk.Menu(self.settings_menu, tearoff=0)
        self.settings_menu.add_cascade(label=self.current_lang["language_menu"], menu=self.language_menu)
        self.language_menu.add_radiobutton(label=f"üá¨üáß {self.current_lang['language_en']}", variable=self.language_mode, value="en", command=lambda: self.set_language("en"))
        self.language_menu.add_radiobutton(label=f"üá∑üá∫ {self.current_lang['language_ru']}", variable=self.language_mode, value="ru", command=lambda: self.set_language("ru"))
        self.language_menu.add_radiobutton(label=f"üá∫üá¶ {self.current_lang['language_uk']}", variable=self.language_mode, value="uk", command=lambda: self.set_language("uk")) 
        
        self.settings_menu.add_separator()
        self.settings_menu.add_command(label=self.current_lang["settings_modloader_path"], command=self.change_modloader_path)
        self.settings_menu.add_checkbutton(label=self.current_lang["settings_autosave_on_exit"], variable=self.autosave_on_exit_var, command=self.save_app_config) # New
        self.settings_menu.add_checkbutton(label=self.current_lang["settings_check_updates_on_startup"], variable=self.check_updates_on_startup_var, command=self.save_app_config) # New
        self.settings_menu.add_checkbutton(label=self.current_lang["settings_always_on_top"], variable=self.always_on_top_var, command=self.toggle_always_on_top) # New

        # –ú–µ–Ω—é "–ü–æ–º–æ—â—å"
        self.help_menu = tk.Menu(self.menubar, tearoff=0)
        self.menubar.add_cascade(label=self.current_lang["help_menu"], menu=self.help_menu)
        self.help_menu.add_command(label=self.current_lang["help_about"], command=self.show_about)
        self.help_menu.add_command(label=self.current_lang["help_author"], command=self.show_author)
        self.help_menu.add_command(label=self.current_lang["help_updates"], command=self.check_for_updates)
        self.help_menu.add_command(label=self.current_lang["help_help"], command=self.show_help)
        self.help_menu.add_command(label=self.current_lang["help_contact"], command=self.contact_support)

    def create_widgets(self):
        """
        –°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–∏–¥–∂–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.
        """
        # –ì–ª–∞–≤–Ω—ã–π —Ñ—Ä–µ–π–º –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        # –¢–µ–ø–µ—Ä—å —ç—Ç–æ self.content_frame, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ self.border_canvas
        # main_frame = ttk.Frame(self, padding="10") # –£–î–ê–õ–ï–ù–û

        # –§—Ä–µ–π–º –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–æ–¥–æ–≤ –∏ –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π
        top_frame = ttk.Frame(self.content_frame) # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ self.content_frame
        top_frame.pack(fill="x", pady=(0, 10))

        # –£–¥–∞–ª–µ–Ω self.search_label, —Ç–∞–∫ –∫–∞–∫ —Ç–µ–∫—Å—Ç —Ç–µ–ø–µ—Ä—å –≤ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–µ
        # self.search_label = ttk.Label(top_frame, text=self.current_lang["search_mod"], font=self.font_main)
        # self.search_label.pack(side="left", padx=(0, 5))

        self.search_var = tk.StringVar()
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º search_var —Å –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–º –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
        self.search_var.set(f"üîç {self.current_lang['search_mod']}")
        
        self.search_entry = ttk.Entry(top_frame, textvariable=self.search_var, width=50, font=self.font_main)
        self.search_entry.pack(side="left", expand=True, fill="x", padx=(5, 10)) # –ò–∑–º–µ–Ω–µ–Ω padx
        ToolTip(self.search_entry, self.current_lang["search_syntax_help"])

        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è —Ñ–æ–∫—É—Å–∞ –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞
        self.search_entry.bind("<FocusIn>", self._on_search_entry_focus_in)
        self.search_entry.bind("<FocusOut>", self._on_search_entry_focus_out)
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–≤—è–∑–∫—É –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
        self.search_entry.bind("<KeyRelease>", lambda event: self.apply_search_filter())

        self.update_mod_list_button = ttk.Button(top_frame, text=self.current_lang["update_mod_list"], command=self.load_mods_and_assign_priorities)
        self.update_mod_list_button.pack(side="left", padx=(0, 5))
        ToolTip(self.update_mod_list_button, self.current_lang["update_mod_list"])

        self.generate_ini_button = ttk.Button(top_frame, text=self.current_lang["generate_ini"], command=self.generate_modloader_ini)
        self.generate_ini_button.pack(side="left")
        ToolTip(self.generate_ini_button, self.current_lang["generate_ini"])

        # Canvas –¥–ª—è –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ü–≤–µ—Ç–Ω–æ–π –ø–æ–ª–æ—Å–∫–∏
        self.colorful_line_canvas = tk.Canvas(self.content_frame, height=5, highlightthickness=0) # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ self.content_frame
        self.colorful_line_canvas.pack(fill="x", pady=(5, 5))

        # –§—Ä–µ–π–º –¥–ª—è —Å–ø–∏—Å–∫–∞ –º–æ–¥–æ–≤ (Treeview)
        tree_frame = ttk.Frame(self.content_frame) # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ self.content_frame
        tree_frame.pack(fill="both", expand=True, pady=(5, 10))

        self.mod_tree = ttk.Treeview(tree_frame, columns=("mod", "priority"), show="headings", selectmode="extended")
        self.mod_tree.pack(side="left", fill="both", expand=True)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫
        self.mod_tree.heading("mod", text=self.current_lang["mod_column"], anchor="w")
        self.mod_tree.heading("priority", text=self.current_lang["priority_column"], anchor="center")
        self.mod_tree.column("mod", width=400, minwidth=200, stretch=tk.YES)
        self.mod_tree.column("priority", width=100, minwidth=80, stretch=tk.NO, anchor="center")

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–æ—Å—ã –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –¥–ª—è Treeview
        tree_scrollbar = ttk.Scrollbar(tree_frame, orient="vertical", command=self.mod_tree.yview)
        tree_scrollbar.pack(side="right", fill="y")
        self.mod_tree.configure(yscrollcommand=tree_scrollbar.set)

        # –ü—Ä–∏–≤—è–∑–∫–∞ –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        self.mod_tree.bind("<Double-1>", self.edit_priority)
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è Treeview
        self.mod_tree_context_menu = tk.Menu(self, tearoff=0)
        self.mod_tree_context_menu.add_command(label=self.current_lang["edit_delete_mod"], command=self.delete_selected_mods)
        self.mod_tree.bind("<Button-3>", self.show_mod_tree_context_menu)


        # –§—Ä–µ–π–º –¥–ª—è –ª–æ–≥–æ–≤ - now assigned to self.log_frame
        self.log_frame = ttk.LabelFrame(self.content_frame, text=self.current_lang["log_label"], padding="5") # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ self.content_frame
        self.log_frame.pack(fill="both", expand=False, pady=(0, 5))

        self.log_text = tk.Text(self.log_frame, height=8, wrap="word", state="disabled", font=self.font_small)
        self.log_text.pack(side="left", fill="both", expand=True)

        log_scrollbar = ttk.Scrollbar(self.log_frame, orient="vertical", command=self.log_text.yview)
        log_scrollbar.pack(side="right", fill="y")
        self.log_text.config(yscrollcommand=log_scrollbar.set)

        # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –ª–æ–≥–∞
        self.log_context_menu = tk.Menu(self, tearoff=0)
        self.log_context_menu.add_command(label=self.current_lang["select_all_log"], command=self.select_all_log)
        self.log_context_menu.add_command(label=self.current_lang["copy_all_log"], command=self.copy_all_log)
        self.log_text.bind("<Button-3>", lambda event: self.log_context_menu.post(event.x_root, event.y_root))

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–æ–º
        log_buttons_frame = ttk.Frame(self.log_frame)
        log_buttons_frame.pack(side="bottom", fill="x", pady=(5, 0))
        self.clear_log_button = ttk.Button(log_buttons_frame, text=self.current_lang["clear_log"], command=self.clear_log)
        self.clear_log_button.pack(side="left", padx=(0, 5))
        ToolTip(self.clear_log_button, self.current_lang["clear_log"])
        self.select_all_log_button = ttk.Button(log_buttons_frame, text=self.current_lang["select_all_log"], command=self.select_all_log)
        self.select_all_log_button.pack(side="left", padx=(0, 5))
        ToolTip(self.select_all_log_button, self.current_lang["select_all_log"])
        self.copy_all_log_button = ttk.Button(log_buttons_frame, text=self.current_lang["copy_all_log"], command=self.copy_all_log)
        self.copy_all_log_button.pack(side="left")
        ToolTip(self.copy_all_log_button, self.current_lang["copy_all_log"])

        # –ù–∏–∂–Ω–∏–π —Ñ—Ä–µ–π–º –¥–ª—è –∞–≤—Ç–æ—Ä–∞, —Å—á–µ—Ç—á–∏–∫–∞ –º–æ–¥–æ–≤ –∏ —Ä–µ–π—Ç–∏–Ω–≥–∞
        self.bottom_frame = ttk.Frame(self.content_frame) # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ self.content_frame
        self.bottom_frame.pack(fill="x", pady=(5, 0))

        self.author_label = ttk.Label(self.bottom_frame, text=self.current_lang["author_label"], font=self.font_small)
        self.author_label.pack(side="left")

        self.installed_mods_count_label = ttk.Label(self.bottom_frame, text="", font=self.font_small)
        self.installed_mods_count_label.pack(side="left", padx=(10, 0))

        # –†–µ–π—Ç–∏–Ω–≥ –ø—Ä–æ–≥—Ä–∞–º–º—ã
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª—å "RatingFrame.TFrame" –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
        self.rating_frame = ttk.Frame(self.bottom_frame, style="RatingFrame.TFrame") 
        self.rating_frame.pack(side="right")

        self.rate_program_label = ttk.Label(self.rating_frame, text=self.current_lang["rate_program_label"], font=self.font_small)
        self.rate_program_label.pack(side="left", padx=(0, 5))

        self.star_labels = []
        self.create_rating_stars(self.rating_frame)

    def _on_canvas_resize(self, event):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ border_canvas –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–º–∫–∏ –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ.
        """
        canvas_width = event.width
        canvas_height = event.height

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ —Ä–∞–º–∫–∏
        self.border_canvas.coords(self.animated_border_rect, 0, 0, canvas_width, canvas_height)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –∏ –ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ñ—Ä–µ–π–º–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —à–∏—Ä–∏–Ω–∞ –∏ –≤—ã—Å–æ—Ç–∞ –Ω–µ —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏
        content_width = max(0, canvas_width - 2 * self.border_thickness)
        content_height = max(0, canvas_height - 2 * self.border_thickness)

        self.border_canvas.coords(self.content_window_id, self.border_thickness, self.border_thickness)
        self.border_canvas.itemconfigure(self.content_window_id, width=content_width, height=content_height)

        # –¢–∞–∫–∂–µ –Ω—É–∂–Ω–æ —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ñ—Ä–µ–π–º —Å–∞–º –ø–æ —Å–µ–±–µ —Ä–∞—Å—Ç—è–≥–∏–≤–∞–µ—Ç—Å—è
        # –≠—Ç–æ –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ pack/grid –≤–Ω—É—Ç—Ä–∏ content_frame
        # –î–ª—è ttk.Frame, –µ—Å–ª–∏ –µ–≥–æ –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç pack(expand=True, fill="both"),
        # —Ç–æ –æ–Ω —Å–∞–º –±—É–¥–µ—Ç —Ä–∞—Å—Ç—è–≥–∏–≤–∞—Ç—å—Å—è –¥–æ —Ä–∞–∑–º–µ—Ä–æ–≤, –∑–∞–¥–∞–Ω–Ω—ã—Ö create_window.
        # –ü–æ—ç—Ç–æ–º—É –ø–æ–ª–∞–≥–∞–µ–º—Å—è –Ω–∞ create_window –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–º.

    def animate_border_color(self):
        """
        –ê–Ω–∏–º–∏—Ä—É–µ—Ç —Ü–≤–µ—Ç —Ä–∞–º–∫–∏ –æ–∫–Ω–∞.
        """
        # –í—ã—á–∏—Å–ª—è–µ–º –æ—Ç—Ç–µ–Ω–æ–∫ –¥–ª—è —Ä–∞–º–∫–∏
        hue = (self.border_hue_offset) % 1.0
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º HLS –≤ RGB (L=0.6 –¥–ª—è —è—Ä–∫–æ—Å—Ç–∏, S=1.0 –¥–ª—è –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç–∏) - —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –±–æ–ª–µ–µ —è—Ä–∫–∏—Ö —Ü–≤–µ—Ç–æ–≤
        r, g, b = colorsys.hls_to_rgb(hue, 0.6, 1.0) 
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º RGB –≤ —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        color = f"#{int(r*255):02x}{int(g*255):02x}{int(b*255):02x}"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç —Ä–∞–º–∫–∏
        self.border_canvas.itemconfigure(self.animated_border_rect, outline=color)

        self.border_hue_offset = (self.border_hue_offset + self.border_animation_speed) % 1.0
        self.after(50, self.animate_border_color) # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 50 –º—Å

    def create_rating_stars(self, parent_frame):
        """
        –°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∑–≤–µ–∑–¥—ã –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã.
        """
        for i in range(1, 6): # 5 –∑–≤–µ–∑–¥
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Ñ–æ–Ω –∑–≤–µ–∑–¥—ã –∫–∞–∫ —Ñ–æ–Ω –¥–∏–∞–ª–æ–≥–æ–≤–æ–≥–æ –æ–∫–Ω–∞
            star_label = ttk.Label(parent_frame, text=STAR_EMPTY, font=("Arial", 16), cursor="hand2",
                                   background=self.dialog_bg)
            star_label.pack(side="left")
            star_label.bind("<Enter>", lambda e, s=i: self.hover_stars(s))
            star_label.bind("<Leave>", lambda e: self.hover_stars(self.rating_var.get()))
            star_label.bind("<Button-1>", lambda e, s=i: self.set_rating(s))
            self.star_labels.append(star_label)
        self.hover_stars(self.rating_var.get()) # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–≤–µ–∑–¥

    def hover_stars(self, count):
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–≤–µ–∑–¥ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏.
        """
        for i, star_label in enumerate(self.star_labels):
            if i < count:
                star_label.config(text=STAR_FILLED, foreground="#FFD700") # –ó–æ–ª–æ—Ç–æ–π —Ü–≤–µ—Ç –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–≤–µ–∑–¥
            else:
                # –¶–≤–µ—Ç –¥–ª—è –ø—É—Å—Ç—ã—Ö –∑–≤–µ–∑–¥ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–µ–º—ã
                star_label.config(text=STAR_EMPTY, foreground=self.dialog_fg) 

    def set_rating(self, rating):
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ –ø—Ä–æ–≥—Ä–∞–º–º—ã.
        """
        self.rating_var.set(rating)
        self.hover_stars(rating) # –û–±–Ω–æ–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–≤–µ–∑–¥
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–≥–æ –∫—É–¥–∞-–ª–∏–±–æ
        self.log(f"–†–µ–π—Ç–∏–Ω–≥ –ø—Ä–æ–≥—Ä–∞–º–º—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞: {rating} –∑–≤–µ–∑–¥.", add_timestamp=False)

    def show_mod_tree_context_menu(self, event):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è Treeview."""
        # Select item under the cursor
        item = self.mod_tree.identify_row(event.y)
        if item:
            self.mod_tree.selection_set(item)  # Select the item under the cursor
            self.mod_tree_context_menu.post(event.x_root, event.y_root)
        else:
            # If no item is clicked, clear selection and show menu anyway (or not, depending on desired behavior)
            self.mod_tree.selection_remove(self.mod_tree.selection())
            # Optionally, you could disable the delete option if nothing is selected
            # For now, just show the menu, the delete_selected_mods will handle no selection.
            self.mod_tree_context_menu.post(event.x_root, event.y_root)

    def log(self, message, add_timestamp=True, tag=None):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥-–æ–∫–Ω–æ.
        :param message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
        :param add_timestamp: –î–æ–±–∞–≤–∏—Ç—å –ª–∏ –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –∫ —Å–æ–æ–±—â–µ–Ω–∏—é.
        :param tag: –¢–µ–≥ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'error', 'warning', 'info').
        """
        self.log_text.config(state="normal") # –†–∞–∑—Ä–µ—à–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        timestamp = datetime.now().strftime("[%H:%M:%S]") if add_timestamp else ""
        full_message = f"{timestamp} {message}\n"
        self.log_text.insert("end", full_message)
        if tag:
            self.log_text.tag_add(tag, "end-2c linestart", "end-1c") # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–≥ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–æ–∫–µ
            self.log_text.tag_config(tag, foreground=self.get_log_tag_color(tag))
        self.log_text.see("end") # –ü—Ä–æ–∫—Ä—É—Ç–∏—Ç—å –¥–æ –∫–æ–Ω—Ü–∞
        self.log_text.config(state="disabled") # –ó–∞–ø—Ä–µ—Ç–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ

    def get_log_tag_color(self, tag):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–≤–µ—Ç –¥–ª—è —Ç–µ–≥–∞ –ª–æ–≥–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–π —Ç–µ–º—ã."""
        if self.theme_mode.get() == "dark":
            colors = {
                "error": "#FF6B6B",  # –ö—Ä–∞—Å–Ω—ã–π
                "warning": "#FFD166", # –ñ–µ–ª—Ç—ã–π
                "info": "#6BFF6B",   # –ó–µ–ª–µ–Ω—ã–π
                "default": "#E0E0E0" # –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π
            }
        else: # light theme
            colors = {
                "error": "#D62828",  # –¢–µ–º–Ω–æ-–∫—Ä–∞—Å–Ω—ã–π
                "warning": "#F77F00", # –¢–µ–º–Ω–æ-–∂–µ–ª—Ç—ã–π
                "info": "#2E8B57",   # –ú–æ—Ä—Å–∫–∞—è –∑–µ–ª–µ–Ω—å
                "default": "#222222" # –¢–µ–º–Ω–æ-—Å–µ—Ä—ã–π
            }
        return colors.get(tag, colors["default"])

    def clear_log(self):
        """–û—á–∏—â–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ª–æ–≥-–æ–∫–Ω–∞."""
        self.log_text.config(state="normal")
        self.log_text.delete("1.0", "end")
        self.log_text.config(state="disabled")
        self.log(self.current_lang["logs_cleared"], add_timestamp=False)

    def select_all_log(self):
        """–í—ã–¥–µ–ª—è–µ—Ç –≤–µ—Å—å —Ç–µ–∫—Å—Ç –≤ –ª–æ–≥-–æ–∫–Ω–µ."""
        self.log_text.tag_add("sel", "1.0", "end")
        self.log_text.mark_set("insert", "1.0")
        self.log_text.see("insert")

    def copy_all_log(self):
        """–ö–æ–ø–∏—Ä—É–µ—Ç –≤–µ—Å—å —Ç–µ–∫—Å—Ç –∏–∑ –ª–æ–≥-–æ–∫–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞."""
        self.clipboard_clear()
        self.clipboard_append(self.log_text.get("1.0", "end-1c")) # end-1c —á—Ç–æ–±—ã –Ω–µ –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ª–∏—à–Ω–∏–π –ø–µ—Ä–µ–≤–æ–¥ —Å—Ç—Ä–æ–∫–∏

    def update_mod_count_label(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –º–µ—Ç–∫—É —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –º–æ–¥–æ–≤."""
        self.installed_mods_count_label.config(text=self.current_lang["installed_mods_count"].format(len(self.mods)))

    def load_mods_and_assign_priorities(self):
        """
        –°–∫–∞–Ω–∏—Ä—É–µ—Ç –ø–∞–ø–∫—É modloader, –∑–∞–≥—Ä—É–∂–∞–µ—Ç –º–æ–¥—ã –∏ –Ω–∞–∑–Ω–∞—á–∞–µ—Ç –∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã.
        –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è –≤ —Å–ª–µ–¥—É—é—â–µ–º –ø–æ—Ä—è–¥–∫–µ:
        1. –ò–∑ —Ñ–∞–π–ª–∞ modloader.ini (–µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç).
        2. –ò–∑ —Ñ–∞–π–ª–∞ mod.ini –≤–Ω—É—Ç—Ä–∏ –ø–∞–ø–∫–∏ –º–æ–¥–∞.
        3. –ò–∑ –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö custom_priorities.
        4. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 0.
        """
        self.mods = [] # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –º–æ–¥–æ–≤
        self.mod_tree.delete(*self.mod_tree.get_children()) # –û—á–∏—â–∞–µ–º Treeview
        self.log(self.current_lang["scanning_modloader_folder"].format(self.modloader_dir), tag="info")

        if not os.path.isdir(self.modloader_dir):
            self.log(self.current_lang["modloader_folder_not_found"].format(self.modloader_dir), tag="error")
            self.update_mod_count_label()
            return

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∏–∑ modloader.ini, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        modloader_ini_priorities = {}
        if os.path.exists(self.output_ini_path):
            try:
                self.ini_config_data.read(self.output_ini_path, encoding='utf-8')
                if self.ini_config_data.has_section("Profiles.Default.Priority"):
                    for mod_name, priority_str in self.ini_config_data.items("Profiles.Default.Priority"):
                        try:
                            modloader_ini_priorities[mod_name.lower()] = int(priority_str)
                        except ValueError:
                            self.log(self.current_lang["invalid_priority_value"].format(mod_name, priority_str), tag="warning")
            except Exception as e:
                self.log(self.current_lang["file_read_error"].format(e), tag="error")

        found_mod_folders = 0
        try:
            all_entries = os.listdir(self.modloader_dir)
            self.log(f"DEBUG: –ù–∞–π–¥–µ–Ω–æ {len(all_entries)} –∑–∞–ø–∏—Å–µ–π –≤ –ø–∞–ø–∫–µ modloader.", tag="info") # –ù–æ–≤–æ–µ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if not all_entries: # –ù–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
                self.log(f"DEBUG: –ü–∞–ø–∫–∞ modloader '{self.modloader_dir}' –ø—É—Å—Ç–∞.", tag="warning") # –ù–æ–≤–æ–µ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

            for entry_name in all_entries: # –ò—Ç–µ—Ä–∏—Ä—É–µ–º –ø–æ –≤—Å–µ–º –∑–∞–ø–∏—Å—è–º
                entry_path = os.path.join(self.modloader_dir, entry_name) 
                self.log(f"DEBUG: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø–∏—Å–∏: {entry_name}", tag="info") # –ù–æ–≤–æ–µ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                if os.path.isdir(entry_path) and not entry_name.startswith('.'): # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–∫—Ä—ã—Ç—ã–µ –ø–∞–ø–∫–∏
                    self.log(self.current_lang["found_mod_folder"].format(entry_name), tag="info")
                    found_mod_folders += 1
                    mod_priority = 0 # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

                    # 1. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏–∑ modloader.ini (–µ—Å–ª–∏ –µ—Å—Ç—å)
                    if entry_name.lower() in modloader_ini_priorities:
                        mod_priority = modloader_ini_priorities[entry_name.lower()]
                        self.log(self.current_lang["priority_from_mod_ini"].format(mod_priority, entry_name), tag="info")
                    else:
                        # 2. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏–∑ mod.ini –≤–Ω—É—Ç—Ä–∏ –ø–∞–ø–∫–∏ –º–æ–¥–∞
                        mod_ini_path = os.path.join(entry_path, "mod.ini")
                        if os.path.exists(mod_ini_path):
                            mod_ini_config = configparser.ConfigParser()
                            try:
                                mod_ini_config.read(mod_ini_path, encoding='utf-8')
                                if mod_ini_config.has_section("Mod") and mod_ini_config.has_option("Mod", "Priority"):
                                    try:
                                        mod_priority = int(mod_ini_config.get("Mod", "Priority"))
                                        self.log(self.current_lang["priority_from_mod_ini"].format(mod_priority, entry_name), tag="info")
                                    except ValueError:
                                        self.log(self.current_lang["invalid_priority_value"].format(entry_name, mod_ini_config.get("Mod", "Priority")), tag="warning")
                            except Exception as e:
                                self.log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è mod.ini –¥–ª—è '{entry_name}': {e}", tag="warning")

                    # 3. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏–∑ custom_priorities (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç mod.ini, –µ—Å–ª–∏ —Å–æ–≤–ø–∞–¥–∞–µ—Ç)
                    if entry_name.lower() in custom_priorities:
                        mod_priority = custom_priorities[entry_name.lower()] 
                        self.log(self.current_lang["priority_auto_assigned"].format(mod_priority, entry_name), tag="info")

                    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤ –¥–æ–ø—É—Å—Ç–∏–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
                    if not is_valid_priority(mod_priority):
                        mod_priority = 0 # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞ 0, –µ—Å–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π
                        self.log(self.current_lang["invalid_priority_value"].format(entry_name, mod_priority) + " –°–±—Ä–æ—à–µ–Ω –Ω–∞ 0.", tag="warning")

                    self.mods.append((entry_name, mod_priority)) # –≠–¢–ê –°–¢–†–û–ö–ê –ë–´–õ–ê –ü–ï–†–ï–ú–ï–©–ï–ù–ê –í–ù–£–¢–†–¨ –ë–õ–û–ö–ê IF
                else:
                    # –ë–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞ –ø—Ä–æ–ø—É—Å–∫–∞
                    if not os.path.isdir(entry_path):
                        self.log(f"DEBUG: –ü—Ä–æ–ø—É—Å–∫ '{entry_name}', —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –Ω–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è.", tag="info")
                    elif entry_name.startswith('.'):
                        self.log(f"DEBUG: –ü—Ä–æ–ø—É—Å–∫ '{entry_name}', —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ —Å–∫—Ä—ã—Ç–∞—è –ø–∞–ø–∫–∞.", tag="info")
                    else:
                        self.log(self.current_lang["skipping_entry"].format(entry_name), tag="info") # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ–±—â–∏–π –ª–æ–≥ –ø—Ä–æ–ø—É—Å–∫–∞
        except (FileNotFoundError, PermissionError) as e:
            self.log(self.current_lang["modloader_folder_not_found"].format(self.modloader_dir) + f" Details: {e}", tag="error")
            print(f"ERROR: Could not list modloader directory '{self.modloader_dir}': {e}") # Also print to console
            self.update_mod_count_label()
            return
        except Exception as e:
            self.log(f"An unexpected error occurred while scanning modloader folder: {e}", tag="error")
            print(f"ERROR: Unexpected error during modloader scan: {e}") # Also print to console
            self.update_mod_count_label()
            return


        if not self.mods:
            self.log(self.current_lang["mods_not_found"].format(self.modloader_dir), tag="warning")
        else:
            self.log(self.current_lang["mods_loaded"].format(len(self.mods)), tag="info")
            self.mods.sort(key=lambda x: x[0].lower()) # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏–º–µ–Ω–∏ –º–æ–¥–∞
            self.apply_search_filter() # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∏–ª—å—Ç—Ä –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
            self.check_for_priority_conflicts()
        self.update_mod_count_label()

    def check_for_priority_conflicts(self):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ (–Ω–µ—Å–∫–æ–ª—å–∫–æ –º–æ–¥–æ–≤ —Å –æ–¥–Ω–∏–º –∏ —Ç–µ–º –∂–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º)
        –∏ –≤—ã–≤–æ–¥–∏—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –≤ –ª–æ–≥.
        """
        if not self.mods:
            return

        priority_map = {}
        for mod_name, priority in self.mods:
            if priority not in priority_map:
                priority_map[priority] = []
            priority_map[priority].append(mod_name)

        conflicts_found = False
        for priority, mod_list in priority_map.items():
            if len(mod_list) > 1:
                self.log(self.current_lang["priority_conflicts_found"], tag="warning")
                self.log(self.current_lang["priority_conflict_detail"].format(priority, ", ".join(mod_list)), tag="warning")
                conflicts_found = True
        
        if not conflicts_found:
            self.log(self.current_lang["no_priority_conflicts"], tag="info")

    def apply_search_filter(self):
        """
        –ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ–∏–ª—å—Ç—Ä –ø–æ–∏—Å–∫–∞ –∫ —Å–ø–∏—Å–∫—É –º–æ–¥–æ–≤ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç Treeview.
        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–∏–Ω—Ç–∞–∫—Å–∏—Å:
        - –ü—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç: –∏—â–µ—Ç –ø–æ–¥—Å—Ç—Ä–æ–∫—É (–±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞).
        - –ò–õ–ò: `mod1 | mod2` (–º–æ–¥1 –ò–õ–ò –º–æ–¥2).
        - –ù–ï: `-mod3` (–ù–ï –º–æ–¥3).
        - –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: `p:>50`, `p:<20`, `p:=30`, `p:25-75`.
        """
        query = self.search_var.get().strip().lower()
        self.filtered_mods = []
        self.mod_tree.delete(*self.mod_tree.get_children())

        # –ï—Å–ª–∏ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω –∏–ª–∏ –∑–∞–ø—Ä–æ—Å –ø—É—Å—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –º–æ–¥—ã
        if self.is_placeholder_active or not query or query == f"üîç {self.current_lang['search_mod'].lower()}":
            self.filtered_mods = list(self.mods)
        else:
            try:
                # –†–∞–∑–¥–µ–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –±–ª–æ–∫–∏ –ø–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É –ò–õ–ò ('|')
                or_blocks = [block.strip() for block in query.split('|') if block.strip()]

                for mod_name, priority in self.mods:
                    mod_name_lower = mod_name.lower()
                    mod_matches_any_or_block = False

                    for or_block in or_blocks:
                        current_block_matches = True
                        
                        # –†–∞–∑–¥–µ–ª—è–µ–º –∫–∞–∂–¥—ã–π OR-–±–ª–æ–∫ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã
                        terms = [term.strip() for term in or_block.split(' ') if term.strip()]

                        positive_terms = []
                        negative_terms = []
                        priority_terms = []

                        for term in terms:
                            if term.startswith('-'):
                                negative_terms.append(term[1:])
                            elif term.startswith('p:'):
                                priority_terms.append(term[2:])
                            else:
                                positive_terms.append(term)
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã (–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –ò)
                        for p_term in positive_terms:
                            if p_term not in mod_name_lower:
                                current_block_matches = False
                                break # –ï—Å–ª–∏ —Ö–æ—Ç—å –æ–¥–∏–Ω –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ—Ä–º–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –±–ª–æ–∫ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç
                        
                        if not current_block_matches:
                            continue # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É OR-–±–ª–æ–∫—É, –µ—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —É–∂–µ –Ω–µ —Å–æ–≤–ø–∞–ª

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã (–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –ò –¥–ª—è –ù–ï)
                        for n_term in negative_terms:
                            if n_term in mod_name_lower:
                                current_block_matches = False
                                break # –ï—Å–ª–∏ —Ö–æ—Ç—å –æ–¥–∏–Ω –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π —Ç–µ—Ä–º–∏–Ω –Ω–∞–π–¥–µ–Ω, –±–ª–æ–∫ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç
                        
                        if not current_block_matches:
                            continue # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É OR-–±–ª–æ–∫—É

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã (–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –ò)
                        for pr_term_query in priority_terms:
                            if not self._match_priority(priority, pr_term_query):
                                current_block_matches = False
                                break # –ï—Å–ª–∏ —Ö–æ—Ç—å –æ–¥–∏–Ω –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π —Ç–µ—Ä–º–∏–Ω –Ω–µ —Å–æ–≤–ø–∞–ª, –±–ª–æ–∫ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç

                        if current_block_matches:
                            mod_matches_any_or_block = True
                            break # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π OR-–±–ª–æ–∫ —Å–æ–≤–ø–∞–ª, —Ç–æ –º–æ–¥ –ø–æ–¥—Ö–æ–¥–∏—Ç, –º–æ–∂–Ω–æ –≤—ã–π—Ç–∏ –∏–∑ —Ü–∏–∫–ª–∞ OR-–±–ª–æ–∫–æ–≤

                    if mod_matches_any_or_block:
                        self.filtered_mods.append((mod_name, priority))

            except Exception as e:
                self.log(self.current_lang["invalid_search_syntax"] + f" ({e})", tag="error")
                self.filtered_mods = list(self.mods) # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –º–æ–¥—ã

        # –í—Å—Ç–∞–≤–ª—è–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥—ã –≤ Treeview
        for mod_name, priority in self.filtered_mods:
            self.mod_tree.insert("", "end", values=(mod_name, priority))
        
        # –¢–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ–º, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–º
        if not self.is_placeholder_active and query and query != f"üîç {self.current_lang['search_mod'].lower()}":
            self.log(self.current_lang["search_applied"].format(query, len(self.filtered_mods)), tag="info")
        elif not self.is_placeholder_active and not query:
            self.log(self.current_lang["search_applied"].format("'' (–ø—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å)", len(self.filtered_mods)), tag="info")


    def _match_priority(self, mod_priority, p_query):
        """
        –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –º–æ–¥–∞ —Å –∑–∞–ø—Ä–æ—Å–æ–º.
        –ü—Ä–∏–º–µ—Ä—ã p_query: ">50", "<20", "=30", "25-75".
        """
        try:
            if p_query.startswith('>='):
                return mod_priority >= int(p_query[2:])
            elif p_query.startswith('>'):
                return mod_priority > int(p_query[1:])
            elif p_query.startswith('<='):
                return mod_priority <= int(p_query[2:])
            elif p_query.startswith('<'):
                return mod_priority < int(p_query[1:])
            elif p_query.startswith('='):
                return mod_priority == int(p_query[1:])
            elif '-' in p_query:
                min_p, max_p = map(int, p_query.split('-'))
                return min_p <= mod_priority <= max_p
            else:
                return mod_priority == int(p_query)
        except ValueError:
            return False # –ù–µ–≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∑–∞–ø—Ä–æ—Å–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        except Exception:
            return False # –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞

    def _on_search_entry_focus_in(self, event):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è FocusIn –¥–ª—è –ø–æ–ª—è –ø–æ–∏—Å–∫–∞.
        –û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞ –∏ –º–µ–Ω—è–µ—Ç —Ü–≤–µ—Ç —à—Ä–∏—Ñ—Ç–∞ –Ω–∞ –æ–±—ã—á–Ω—ã–π.
        """
        if self.is_placeholder_active:
            self.search_var.set("")
            self.search_entry.config(foreground=self.normal_fg)
            self.is_placeholder_active = False
            self.apply_search_filter() # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Ñ–æ–∫—É—Å–∞

    def _on_search_entry_focus_out(self, event):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è FocusOut –¥–ª—è –ø–æ–ª—è –ø–æ–∏—Å–∫–∞.
        –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞, –µ—Å–ª–∏ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ, –∏ –º–µ–Ω—è–µ—Ç —Ü–≤–µ—Ç —à—Ä–∏—Ñ—Ç–∞ –Ω–∞ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä.
        """
        if not self.search_var.get():
            self.search_var.set(f" {self.current_lang['search_mod']}")
            self.search_entry.config(foreground=self.placeholder_fg)
            self.is_placeholder_active = True
            self.apply_search_filter() # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –º–æ–¥—ã, –µ—Å–ª–∏ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ
        # –ï—Å–ª–∏ –ø–æ–ª–µ –Ω–µ –ø—É—Å—Ç–æ–µ, –Ω–æ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –±—ã–ª –∞–∫—Ç–∏–≤–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª —á—Ç–æ-—Ç–æ, –∞ –ø–æ—Ç–æ–º –æ—á–∏—Å—Ç–∏–ª),
        # —Ç–æ –º—ã —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ normal_fg –ø—Ä–∏ FocusIn. –ó–¥–µ—Å—å –Ω–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è–µ–º.
        elif not self.is_placeholder_active:
            self.search_entry.config(foreground=self.normal_fg)


    def edit_priority(self, event):
        """
        –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –æ–∫–Ω–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–æ–¥–∞.
        –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ –¥–≤–æ–π–Ω–æ–º—É –∫–ª–∏–∫—É –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç–µ Treeview.
        """
        item = self.mod_tree.focus()
        if not item:
            return

        column = self.mod_tree.identify_column(event.x)
        if column != "#2": # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∏–∫ –±—ã–ª –ø–æ –∫–æ–ª–æ–Ω–∫–µ "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç"
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –º–æ–¥–∞
        current_values = self.mod_tree.item(item, 'values')
        mod_name = current_values[0]
        current_priority = current_values[1]

        # –°–æ–∑–¥–∞–µ–º Toplevel –æ–∫–Ω–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        edit_window = tk.Toplevel(self)
        edit_window.title(self.current_lang["edit_priority_title"])
        edit_window.transient(self) # –î–µ–ª–∞–µ—Ç –æ–∫–Ω–æ –¥–æ—á–µ—Ä–Ω–∏–º –∫ –≥–ª–∞–≤–Ω–æ–º—É
        edit_window.grab_set() # –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç —Ñ–æ–∫—É—Å, –ø–æ–∫–∞ –æ–∫–Ω–æ –æ—Ç–∫—Ä—ã—Ç–æ
        edit_window.resizable(False, False)

        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ
        self.update_idletasks()
        x = self.winfo_x() + (self.winfo_width() // 2) - (edit_window.winfo_width() // 2)
        y = self.winfo_y() + (self.winfo_height() // 2) - (edit_window.winfo_height() // 2)
        edit_window.geometry(f"+{x}+{y}")

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç–∞ –¥–ª—è –æ–∫–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        edit_window.config(bg=self.dialog_bg)
        
        label = ttk.Label(edit_window, text=f"{self.current_lang['mod_column']}: {mod_name}\n{self.current_lang['priority_column']}:", font=self.font_main, foreground=self.dialog_fg, background=self.dialog_bg)
        label.pack(padx=10, pady=10)

        priority_var = tk.StringVar(value=str(current_priority))
        priority_entry = ttk.Entry(edit_window, textvariable=priority_var, width=5, font=self.font_main)
        priority_entry.pack(padx=10, pady=(0, 10))
        priority_entry.focus_set()

        def save_new_priority():
            try:
                new_priority = int(priority_var.get())
                if not is_valid_priority(new_priority):
                    self.show_custom_messagebox(self.current_lang["priority_value_error_title"], self.current_lang["priority_value_error"], "error")
                    return
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤ self.mods
                for i, (m_name, m_priority) in enumerate(self.mods):
                    if m_name == mod_name:
                        self.mods[i] = (mod_name, new_priority)
                        break
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤ Treeview
                self.mod_tree.item(item, values=(mod_name, new_priority))
                self.log(self.current_lang["priority_changed_log"].format(mod_name, new_priority), tag="info")
                self.check_for_priority_conflicts() # –ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã
                edit_window.destroy()

            except ValueError:
                self.show_custom_messagebox(self.current_lang["priority_value_error_title"], self.current_lang["priority_value_error"], "error")
            except Exception as e:
                self.show_custom_messagebox(self.current_lang["priority_value_error_title"], f"An unexpected error occurred: {e}", "error")

        save_button = ttk.Button(edit_window, text=self.current_lang["save_button"], command=save_new_priority, style="DialogButton.TButton")
        save_button.pack(pady=(0, 10))
        edit_window.bind("<Return>", lambda event: save_new_priority())

        edit_window.wait_window() # –ñ–¥–µ–º –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞

    def new_file(self):
        """
        –û—á–∏—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –º–æ–¥–æ–≤, –∏–º–∏—Ç–∏—Ä—É—è —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞.
        –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –º–æ–¥–æ–≤ –Ω–µ –ø—É—Å—Ç.
        """
        if self.mods:
            if not self.show_custom_messagebox(
                self.current_lang["new_file_confirm_title"],
                self.current_lang["new_file_confirm"],
                "question"
            ):
                return # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
            
        self.mods = []
        self.filtered_mods = []
        self.mod_tree.delete(*self.mod_tree.get_children())
        self.update_mod_count_label()
        self.log("–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª (—Å–ø–∏—Å–æ–∫ –º–æ–¥–æ–≤ –æ—á–∏—â–µ–Ω).", tag="info")


    def generate_modloader_ini(self):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ñ–∞–π–ª modloader.ini –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–∏—Ö –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –º–æ–¥–æ–≤.
        –°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞.
        """
        if not self.mods:
            self.show_custom_messagebox(self.current_lang["info_title"], self.current_lang["no_mods_to_generate"], "info")
            return

        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é, –µ—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if os.path.exists(self.output_ini_path):
            backup_path = os.path.join(self.modloader_dir, BACKUP_FILE_NAME)
            try:
                shutil.copy2(self.output_ini_path, backup_path)
                self.log(self.current_lang["backup_created"].format(BACKUP_FILE_NAME), tag="info")
            except Exception as e:
                self.log(self.current_lang["backup_error"].format(e), tag="error")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º, –¥–∞–∂–µ –µ—Å–ª–∏ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –Ω–µ —Å–æ–∑–¥–∞–Ω–∞, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ.

        config = configparser.ConfigParser()
        config.optionxform = str # –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä –∫–ª—é—á–µ–π

        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–µ–∫—Ü–∏–∏
        config["Folder.Config"] = {"Profile": "Default"}
        config["Profiles.Default.Config"] = {
            "ExcludeAllMods": "false",
            "IgnoreAllMods": "false",
            "Parents": "$None"
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–∫—Ü–∏—é –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
        config["Profiles.Default.Priority"] = {}
        for mod_name, priority in self.mods:
            config["Profiles.Default.Priority"][mod_name] = str(priority)

        # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å–µ–∫—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –¥–∞–Ω–Ω—ã—Ö
        if not config.has_section("Profiles.Default.IgnoreFiles"):
            config["Profiles.Default.IgnoreFiles"] = {}
        if not config.has_section("Profiles.Default.IgnoreMods"):
            config["Profiles.Default.IgnoreMods"] = {"_ignore": ""} # –ü—Ä–∏–º–µ—Ä –∑–Ω–∞—á–µ–Ω–∏—è, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if not config.has_section("Profiles.Default.IncludeMods"):
            config["Profiles.Default.IncludeMods"] = {}
        if not config.has_section("Profiles.Default.ExclusiveMods"):
            config["Profiles.Default.ExclusiveMods"] = {}


        try:
            with open(self.output_ini_path, 'w', encoding='utf-8') as configfile:
                config.write(configfile)
            self.log(self.current_lang["file_saved_success"].format(OUTPUT_FILE_NAME), tag="info")
            self.add_to_recent_files(self.output_ini_path) # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ñ–∞–π–ª—ã
        except Exception as e:
            self.log(self.current_lang["file_save_error"].format(e), tag="error")
            self.show_custom_messagebox(self.current_lang["priority_value_error_title"], self.current_lang["file_save_error_details"].format(e), "error")

    def open_ini_file(self, file_path=None):
        """
        –û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Ñ–∞–π–ª modloader.ini –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –º–æ–¥–æ–≤ –∏–∑ –Ω–µ–≥–æ.
        :param file_path: –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É. –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞.
        """
        if file_path is None:
            file_path = filedialog.askopenfilename(
                title=self.current_lang["open_ini_file_title"],
                filetypes=[("INI files", "*.ini")]
            )
        if not file_path:
            return

        config = configparser.ConfigParser()
        try:
            config.read(file_path, encoding='utf-8')
            if not config.has_section("Profiles.Default.Priority"):
                self.log(self.current_lang["no_priority_sections"], tag="warning")
                self.show_custom_messagebox(self.current_lang["info_title"], self.current_lang["no_priority_sections"], "info")
                return

            loaded_priorities = {}
            for mod_name, priority_str in config.items("Profiles.Default.Priority"):
                try:
                    loaded_priorities[mod_name.lower()] = int(priority_str)
                except ValueError:
                    self.log(self.current_lang["invalid_priority_value"].format(mod_name, priority_str), tag="warning")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–æ–¥–æ–≤
            updated_mods = []
            for mod_name, current_priority in self.mods:
                new_priority = loaded_priorities.get(mod_name.lower(), current_priority)
                updated_mods.append((mod_name, new_priority))
            self.mods = updated_mods
            self.apply_search_filter() # –û–±–Ω–æ–≤–ª—è–µ–º Treeview
            self.check_for_priority_conflicts()
            self.log(self.current_lang["priorities_imported"].format(os.path.basename(file_path)), tag="info")
            self.add_to_recent_files(file_path) # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ñ–∞–π–ª—ã

        except Exception as e:
            self.log(self.current_lang["file_read_error"].format(e), tag="error")
            self.show_custom_messagebox(self.current_lang["priority_value_error_title"], self.current_lang["file_read_error"].format(e), "error")

    def save_ini_file(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –≤ —Ñ–∞–π–ª modloader.ini –ø–æ –ø—É—Ç–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."""
        self.generate_modloader_ini()

    def save_ini_file_as(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –≤ –Ω–æ–≤—ã–π —Ñ–∞–π–ª modloader.ini, –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""
        file_path = filedialog.asksaveasfilename(
            defaultextension=".csv",
            filetypes=[("CSV files", "*.csv")],
            title=self.current_lang["file_save_as"]
        )
        if not file_path:
            return

        config = configparser.ConfigParser()
        config.optionxform = str # –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä –∫–ª—é—á–µ–π
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–µ–∫—Ü–∏–∏
        config["Folder.Config"] = {"Profile": "Default"}
        config["Profiles.Default.Config"] = {
            "ExcludeAllMods": "false",
            "IgnoreAllMods": "false",
            "Parents": "$None"
        }

        config["Profiles.Default.Priority"] = {}
        for mod_name, priority in self.mods:
            config["Profiles.Default.Priority"][mod_name] = str(priority)

        # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å–µ–∫—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –¥–∞–Ω–Ω—ã—Ö
        if not config.has_section("Profiles.Default.IgnoreFiles"):
            config["Profiles.Default.IgnoreFiles"] = {}
        if not config.has_section("Profiles.Default.IgnoreMods"):
            config["Profiles.Default.IgnoreMods"] = {"_ignore": ""} # –ü—Ä–∏–º–µ—Ä –∑–Ω–∞—á–µ–Ω–∏—è, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if not config.has_section("Profiles.Default.IncludeMods"):
            config["Profiles.Default.IncludeMods"] = {}
        if not config.has_section("Profiles.Default.ExclusiveMods"):
            config["Profiles.Default.ExclusiveMods"] = {}

        try:
            with open(file_path, 'w', encoding='utf-8') as configfile:
                config.write(configfile)
            self.log(self.current_lang["file_saved_info"].format(os.path.basename(file_path)), tag="info")
            self.add_to_recent_files(file_path) # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ñ–∞–π–ª—ã
        except Exception as e:
            self.log(self.current_lang["file_save_error"].format(e), tag="error")
            self.show_custom_messagebox(self.current_lang["priority_value_error_title"], self.current_lang["file_save_error_details"].format(e), "error")

    def add_to_recent_files(self, file_path):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ñ–∞–π–ª–æ–≤."""
        if file_path in self.recent_files:
            self.recent_files.remove(file_path) # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤ –Ω–∞—á–∞–ª–æ, –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å
        self.recent_files.insert(0, file_path)
        self.recent_files = self.recent_files[:5] # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ñ–∞–π–ª–æ–≤
        self.update_recent_files_menu()
        self.save_app_config() # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–æ–Ω—Ñ–∏–≥

    def update_recent_files_menu(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–¥–º–µ–Ω—é "–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ñ–∞–π–ª—ã"."""
        self.recent_files_menu.delete(0, "end") # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        if not self.recent_files:
            self.recent_files_menu.add_command(label="–ù–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ñ–∞–π–ª–æ–≤", state="disabled")
        else:
            for i, file_path in enumerate(self.recent_files):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª, –ø—Ä–µ–∂–¥–µ —á–µ–º –¥–æ–±–∞–≤–ª—è—Ç—å –µ–≥–æ –≤ –º–µ–Ω—é
                if os.path.exists(file_path):
                    display_name = os.path.basename(file_path)
                    self.recent_files_menu.add_command(label=f"{i+1}. {display_name}", 
                                                       command=lambda p=file_path: self.open_ini_file(p))
                else:
                    # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ñ–∞–π–ª–æ–≤
                    self.recent_files.remove(file_path)
                    self.after(10, self.update_recent_files_menu) # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
                    break # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≤–æ –≤—Ä–µ–º—è –∏—Ç–µ—Ä–∞—Ü–∏–∏

    def import_priorities_from_file(self):
        """
        –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ INI —Ñ–∞–π–ª–∞, –æ–±–Ω–æ–≤–ª—è—è —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –º–æ–¥–æ–≤.
        """
        self.open_ini_file() # –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–≥–∏–∫—É –æ—Ç–∫—Ä—ã—Ç–∏—è INI —Ñ–∞–π–ª–∞

    def export_to_csv(self):
        """
        –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –º–æ–¥–æ–≤ –≤ CSV —Ñ–∞–π–ª.
        """
        if not self.mods:
            self.show_custom_messagebox(self.current_lang["info_title"], self.current_lang["no_mods_to_export"], "info")
            return

        file_path = filedialog.asksaveasfilename(
            defaultextension=".csv",
            filetypes=[("CSV files", "*.csv")],
            title=self.current_lang["edit_export_csv"]
        )
        if not file_path:
            return

        try:
            with open(file_path, 'w', newline='', encoding='utf-8') as csvfile:
                csv_writer = csv.writer(csvfile)
                csv_writer.writerow([self.current_lang["mod_column"], self.current_lang["priority_column"]]) # –ó–∞–≥–æ–ª–æ–≤–∫–∏
                for mod_name, priority in self.mods:
                    csv_writer.writerow([mod_name, priority])
            self.log(self.current_lang["export_csv_info"].format(os.path.basename(file_path)), tag="info")
        except Exception as e:
            self.log(self.current_lang["export_csv_error"].format(e), tag="error")
            self.show_custom_messagebox(self.current_lang["priority_value_error_title"], self.current_lang["export_csv_error_details"].format(e), "error")

    def reset_all_priorities(self):
        """
        –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –≤—Å–µ—Ö –º–æ–¥–æ–≤ –Ω–∞ 0 –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        """
        if self.show_custom_messagebox(self.current_lang["reset_priorities_confirm_title"], self.current_lang["reset_priorities_confirm"], "question"):
            self.mods = [(mod_name, 0) for mod_name, _ in self.mods]
            self.apply_search_filter() # –û–±–Ω–æ–≤–ª—è–µ–º Treeview
            self.log(self.current_lang["priorities_reset"], tag="info")
            self.check_for_priority_conflicts()

    def restore_default_priorities(self):
        """
        –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –º–æ–¥–æ–≤ –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–∏–∑ custom_priorities)
        –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ú–æ–¥—ã, –Ω–µ –≤—Ö–æ–¥—è—â–∏–µ –≤ custom_priorities, –ø–æ–ª—É—á–∞—é—Ç 0.
        """
        if self.show_custom_messagebox(self.current_lang["restore_defaults_confirm_title"], self.current_lang["restore_defaults_confirm"], "question"):
            updated_mods = []
            for mod_name, _ in self.mods:
                default_priority = custom_priorities.get(mod_name.lower(), 0)
                updated_mods.append((mod_name, default_priority))
            self.mods = updated_mods
            self.apply_search_filter() # –û–±–Ω–æ–≤–ª—è–µ–º Treeview
            self.log(self.current_lang["priorities_restored"], tag="info")
            self.check_for_priority_conflicts()

    def delete_selected_mods(self):
        """
        –£–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –º–æ–¥—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –≤ Treeview –∏ –∏–∑ self.mods.
        –ù–µ —É–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª—ã –º–æ–¥–æ–≤ —Å –¥–∏—Å–∫–∞.
        """
        selected_items = self.mod_tree.selection()
        if not selected_items:
            self.show_custom_messagebox(self.current_lang["info_title"], self.current_lang["no_mods_selected_for_deletion"], "info")
            return

        mod_names_to_delete = [self.mod_tree.item(item, 'values')[0] for item in selected_items]
        
        if len(mod_names_to_delete) == 1:
            confirm_message = self.current_lang["mod_deleted_confirm"].format(mod_names_to_delete[0])
        else:
            confirm_message = self.current_lang["multiple_mods_deleted_confirm"].format(len(mod_names_to_delete))

        if self.show_custom_messagebox(self.current_lang["mod_deleted_confirm_title"], confirm_message, "question"):
            # –£–¥–∞–ª—è–µ–º –∏–∑ self.mods
            self.mods = [mod for mod in self.mods if mod[0] not in mod_names_to_delete]
            
            # –û–±–Ω–æ–≤–ª—è–µ–º Treeview
            self.apply_search_filter()
            self.log(self.current_lang["mod_deleted_count"].format(len(mod_names_to_delete)), tag="info")
            self.update_mod_count_label()
            self.check_for_priority_conflicts()

    def delete_all_mods(self):
        """
        –£–¥–∞–ª—è–µ—Ç –≤—Å–µ –º–æ–¥—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –≤ Treeview –∏ –∏–∑ self.mods.
        –ù–µ —É–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª—ã –º–æ–¥–æ–≤ —Å –¥–∏—Å–∫–∞.
        """
        if not self.mods:
            self.show_custom_messagebox(self.current_lang["info_title"], self.current_lang["no_mods_to_export"], "info") # "No mods to export" –ø–æ–¥—Ö–æ–¥–∏—Ç –∏ –∑–¥–µ—Å—å
            return

        if self.show_custom_messagebox(self.current_lang["delete_all_mods_confirm_title"], self.current_lang["delete_all_mods_confirm"], "question"):
            self.mods = []
            self.apply_search_filter() # –û—á–∏—Å—Ç–∏—Ç Treeview
            self.log(self.current_lang["all_mods_deleted_log"], tag="info")
            self.update_mod_count_label()
            self.check_for_priority_conflicts()

    def select_all_mods(self):
        """–í—ã–¥–µ–ª—è–µ—Ç –≤—Å–µ –º–æ–¥—ã –≤ Treeview."""
        for item in self.mod_tree.get_children():
            self.mod_tree.selection_add(item)
        self.log("–í—Å–µ –º–æ–¥—ã –≤—ã–±—Ä–∞–Ω—ã.", add_timestamp=False)

    def deselect_all_mods(self):
        """–°–Ω–∏–º–∞–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å–æ –≤—Å–µ—Ö –º–æ–¥–æ–≤ –≤ Treeview."""
        self.mod_tree.selection_remove(*self.mod_tree.selection())
        self.log("–í—ã–¥–µ–ª–µ–Ω–∏–µ —Å–æ –≤—Å–µ—Ö –º–æ–¥–æ–≤ —Å–Ω—è—Ç–æ.", add_timestamp=False)

    def invert_selection(self):
        """–ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ –º–æ–¥–æ–≤ –≤ Treeview."""
        current_selection = set(self.mod_tree.selection())
        all_items = set(self.mod_tree.get_children())
        
        new_selection = list(all_items - current_selection)
        
        self.mod_tree.selection_remove(*current_selection)
        self.mod_tree.selection_add(*new_selection)
        self.log("–í—ã–¥–µ–ª–µ–Ω–∏–µ –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ.", add_timestamp=False)

    def change_modloader_path(self):
        """
        –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å –Ω–æ–≤—É—é –ø–∞–ø–∫—É modloader.
        """
        new_path = filedialog.askdirectory(title=self.current_lang["settings_modloader_path"])
        if new_path:
            self.modloader_dir = new_path
            self.output_ini_path = os.path.join(self.modloader_dir, OUTPUT_FILE_NAME)
            self.app_config.set("Paths", "modloader_path", self.modloader_dir)
            self.save_app_config()
            self.log(self.current_lang["modloader_path_changed"].format(self.modloader_dir), tag="info")
            self.load_mods_and_assign_priorities() # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—ã –∏–∑ –Ω–æ–≤–æ–≥–æ –ø—É—Ç–∏

    def toggle_always_on_top(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–ü–æ–≤–µ—Ä—Ö –≤—Å–µ—Ö –æ–∫–æ–Ω"."""
        self.attributes('-topmost', self.always_on_top_var.get())
        self.log(f"–û–∫–Ω–æ {'—Ç–µ–ø–µ—Ä—å' if self.always_on_top_var.get() else '–±–æ–ª—å—à–µ –Ω–µ'} –ø–æ–≤–µ—Ä—Ö –≤—Å–µ—Ö –æ–∫–æ–Ω.", add_timestamp=False)
        self.save_app_config() # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

    def show_about(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ."""
        self.show_custom_messagebox(self.current_lang["about_title"], self.current_lang["about_message"].format(APP_VERSION), "info")

    def show_author(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Ä–µ."""
        self.show_custom_messagebox(self.current_lang["author_title"], self.current_lang["author_message"], "info")

    def check_for_updates(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (–ø—Ä–æ—Å—Ç–æ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ GitHub)."""
        webbrowser.open(GITHUB_REPO_URL)
        self.log(self.current_lang["updates_message"].format(APP_VERSION), tag="info")

    def show_help(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫—Ä–∞—Ç–∫–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é."""
        self.show_custom_messagebox(self.current_lang["help_title"], self.current_lang["help_message"], "info")

    def contact_support(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–æ—á—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Å–≤—è–∑–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."""
        webbrowser.open(f"mailto:{AUTHOR_EMAIL}?subject={self.current_lang['contact_support_subject']}")
        self.log(f"–û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ—á—Ç–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Å–≤—è–∑–∏ —Å {AUTHOR_EMAIL}", tag="info")

    def show_custom_messagebox(self, title, message, type="info"):
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–∞—Å—Ç–æ–º–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤–º–µ—Å—Ç–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ messagebox.
        :param title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ–∫–Ω–∞.
        :param message: –°–æ–æ–±—â–µ–Ω–∏–µ.
        :param type: –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è ('info', 'warning', 'error', 'question').
        :return: True –¥–ª—è 'yes', False –¥–ª—è 'no' –≤ —Å–ª—É—á–∞–µ 'question', –∏–Ω–∞—á–µ None.
        """
        result = None
        
        msg_box = tk.Toplevel(self)
        msg_box.title(title)
        msg_box.transient(self)
        msg_box.grab_set()
        msg_box.resizable(False, False)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç–∞
        msg_box.config(bg=self.dialog_bg)
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ
        self.update_idletasks()
        x = self.winfo_x() + (self.winfo_width() // 2) - (msg_box.winfo_width() // 2)
        y = self.winfo_y() + (self.winfo_height() // 2) - (msg_box.winfo_height() // 2)
        msg_box.geometry(f"+{x}+{y}")

        # –ò–∫–æ–Ω–∫–∞ (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–µ –∏–∫–æ–Ω–∫–∏, –ø–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ)
        icon_text = ""
        if type == "info":
            icon_text = "‚ÑπÔ∏è"
        elif type == "warning":
            icon_text = "‚ö†Ô∏è"
        elif type == "error":
            icon_text = "‚ùå"
        elif type == "question":
            icon_text = "‚ùì"
        
        icon_label = ttk.Label(msg_box, text=icon_text, font=("Arial", 24), background=self.dialog_bg)
        icon_label.pack(pady=(10, 0))

        message_label = ttk.Label(msg_box, text=message, font=self.font_main, wraplength=400, justify="center", foreground=self.dialog_fg, background=self.dialog_bg)
        message_label.pack(padx=20, pady=10)

        button_frame = ttk.Frame(msg_box, style="DialogFrame.TFrame")
        button_frame.pack(pady=(0, 10))

        def on_yes():
            nonlocal result
            result = True
            msg_box.destroy()

        def on_no():
            nonlocal result
            result = False
            msg_box.destroy()

        if type == "question":
            yes_button = ttk.Button(button_frame, text=self.current_lang["yes_button"], command=on_yes, style="DialogButton.TButton")
            yes_button.pack(side="left", padx=5)
            no_button = ttk.Button(button_frame, text=self.current_lang["no_button"], command=on_no, style="DialogButton.TButton")
            no_button.pack(side="left", padx=5)
        else:
            ok_button = ttk.Button(button_frame, text="OK", command=msg_box.destroy, style="DialogButton.TButton")
            ok_button.pack()
            msg_box.bind("<Return>", lambda event: msg_box.destroy()) # –ü—Ä–∏–≤—è–∑–∫–∞ Enter –∫ OK

        msg_box.wait_window()
        return result

    def set_theme(self):
        """
        –ü—Ä–∏–º–µ–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–µ–º—É (—Å–∏—Å—Ç–µ–º–Ω–∞—è, —Ç–µ–º–Ω–∞—è, —Å–≤–µ—Ç–ª–∞—è) –∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É.
        """
        mode = self.theme_mode.get()
        
        if mode == "system":
            is_dark = is_windows_dark_theme() # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é —Ç–µ–º—É Windows
            if is_dark:
                mode = "dark"
            else:
                mode = "light"

        if mode == "dark":
            # –ß–µ—Ä–Ω–∞—è —Ç–µ–º–∞
            self.style.theme_use("clam")
            self.style.configure(".", background="#000000", foreground="#E0E0E0", font=self.font_main)
            self.style.configure("TFrame", background="#000000")
            self.style.configure("TLabel", background="#000000", foreground="#E0E0E0")
            self.style.configure("TButton", background="#1a1a1a", foreground="#E0E0E0", borderwidth=1, relief="raised")
            self.style.map("TButton", background=[("active", "#333333"), ("pressed", "#0a0a0a")])
            self.style.configure("TEntry", fieldbackground="#1a1a1a", foreground="#E0E0E0", borderwidth=1, relief="solid")
            self.style.configure("TCombobox", fieldbackground="#1a1a1a", foreground="#E0E0E0", selectbackground="#333333", selectforeground="#E0E0E0")
            # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–æ–Ω–∞ Treeview –Ω–∞ —á–∏—Å—Ç–æ —á–µ—Ä–Ω—ã–π
            self.style.configure("Treeview", background="#000000", foreground="#E0E0E0", fieldbackground="#000000")
            self.style.map("Treeview", background=[("selected", "#333333")], foreground=[("selected", "#E0E0E0")])
            self.style.configure("Treeview.Heading", background="#1a1a1a", foreground="#E0E0E0", font=("Segoe UI", 11, "bold"))
            self.style.map("Treeview.Heading", background=[("active", "#333333")])
            self.style.configure("TScrollbar", background="#1a1a1a", troughcolor="#0a0a0a", bordercolor="#000000")
            self.style.map("TScrollbar", background=[("active", "#333333")])
            self.style.configure("TLabelframe", background="#000000", foreground="#E0E0E0", borderwidth=1, relief="solid")
            self.style.configure("TLabelframe.Label", background="#000000", foreground="#E0E0E0")
            
            # –¶–≤–µ—Ç–∞ –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤ –∏ –ª–æ–≥–∞
            self.dialog_bg = "#000000"
            self.dialog_fg = "#E0E0E0"
            self.dialog_btn_bg = "#1a1a1a"
            self.dialog_btn_fg = "#E0E0E0"
            self.dialog_error_fg = "#FF6B6B"
            self.log_current_bg = "#1a1a1a"
            self.log_current_fg = "#E0E0E0"
            # –¶–≤–µ—Ç–∞ –¥–ª—è –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞
            self.placeholder_fg = "#777777" # –¢–µ–º–Ω–æ-—Å–µ—Ä—ã–π –¥–ª—è —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã
            self.normal_fg = "#E0E0E0" # –°–≤–µ—Ç–ª—ã–π –¥–ª—è —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–æ–∫ –¥–∏–∞–ª–æ–≥–∞
            self.style.configure("DialogButton.TButton", background=self.dialog_btn_bg, foreground=self.dialog_btn_fg)
            self.style.map("DialogButton.TButton", background=[("active", "#333333"), ("pressed", "#0a0a0a")])
            self.style.configure("DialogFrame.TFrame", background=self.dialog_bg)
            self.style.configure("RatingFrame.TFrame", background=self.dialog_bg) # –î–æ–±–∞–≤–ª–µ–Ω —Å—Ç–∏–ª—å –¥–ª—è —Ñ—Ä–µ–π–º–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞

        else: # Light theme (default if system is not dark or explicitly chosen)
            # –°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞
            self.style.theme_use("vista")
            self.style.configure(".", background="#F0F0F0", foreground="#222222", font=self.font_main)
            self.style.configure("TFrame", background="#F0F0F0")
            self.style.configure("TLabel", background="#F0F0F0", foreground="#222222")
            self.style.configure("TButton", background="#E0E0E0", foreground="#222222", borderwidth=1, relief="raised")
            self.style.map("TButton", background=[("active", "#D0D0D0"), ("pressed", "#C0C0C0")])
            self.style.configure("TEntry", fieldbackground="#FFFFFF", foreground="#222222", borderwidth=1, relief="solid")
            self.style.configure("TCombobox", fieldbackground="#FFFFFF", foreground="#222222", selectbackground="#E0E0E0", selectforeground="#222222")
            self.style.configure("Treeview", background="#FFFFFF", foreground="#222222", fieldbackground="#FFFFFF")
            self.style.map("Treeview", background=[("selected", "#C0D0E8")], foreground=[("selected", "#222222")])
            self.style.configure("Treeview.Heading", background="#E0E0E0", foreground="#222222", font=("Segoe UI", 11, "bold"))
            self.style.map("Treeview.Heading", background=[("active", "#D0D0D0")])
            self.style.configure("TScrollbar", background="#E0E0E0", troughcolor="#F0F0F0", bordercolor="#D0D0D0")
            self.style.map("TScrollbar", background=[("active", "#C0C0C0")])
            self.style.configure("TLabelframe", background="#F0F0F0", foreground="#222222", borderwidth=1, relief="solid")
            self.style.configure("TLabelframe.Label", background="#F0F0F0", foreground="#222222")

            # –¶–≤–µ—Ç–∞ –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤ –∏ –ª–æ–≥–∞
            self.dialog_bg = "#F0F0F0"
            self.dialog_fg = "#222222"
            self.dialog_btn_bg = "#E0E0E0"
            self.dialog_btn_fg = "#222222"
            self.dialog_error_fg = "#D62828"
            self.log_current_bg = "#FFFFFF"
            self.log_current_fg = "#222222"
            # –¶–≤–µ—Ç–∞ –¥–ª—è –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞
            self.placeholder_fg = "#AAAAAA" # –°–µ—Ä—ã–π –¥–ª—è —Å–≤–µ—Ç–ª–æ–π —Ç–µ–º—ã
            self.normal_fg = "#222222" # –¢–µ–º–Ω—ã–π –¥–ª—è —Å–≤–µ—Ç–ª–æ–π —Ç–µ–º—ã

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–æ–∫ –¥–∏–∞–ª–æ–≥–∞
            self.style.configure("DialogButton.TButton", background=self.dialog_btn_bg, foreground=self.dialog_btn_fg)
            self.style.map("DialogButton.TButton", background=[("active", "#D0D0D0"), ("pressed", "#C0C0C0")])
            self.style.configure("DialogFrame.TFrame", background=self.dialog_bg)
            self.style.configure("RatingFrame.TFrame", background=self.dialog_bg) # –î–æ–±–∞–≤–ª–µ–Ω —Å—Ç–∏–ª—å –¥–ª—è —Ñ—Ä–µ–π–º–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞


        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤ —Ñ—Ä–µ–π–º–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ –∏ –µ–≥–æ –º–µ—Ç–æ–∫
        # self.rating_frame.config(background=self.dialog_bg) # –£–¥–∞–ª–µ–Ω–æ, —Ç–∞–∫ –∫–∞–∫ —Å—Ç–∏–ª—å –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ ttk.Style
        self.rate_program_label.config(background=self.dialog_bg, foreground=self.dialog_fg)

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤ –∑–≤–µ–∑–¥
        for star_label in self.star_labels:
            star_label.config(background=self.dialog_bg) # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–Ω –∑–≤–µ–∑–¥—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ç–µ–º–æ–π
        self.hover_stars(self.rating_var.get()) # –û–±–Ω–æ–≤–∏—Ç—å —Ü–≤–µ—Ç –∑–≤–µ–∑–¥ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ç–µ–º—ã (—ç—Ç–æ —Ç–∞–∫–∂–µ –æ–±–Ω–æ–≤–∏—Ç —Ü–≤–µ—Ç –ø—É—Å—Ç—ã—Ö –∑–≤–µ–∑–¥)

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤ –ª–æ–≥–∞
        self.log_text.config(bg=self.log_current_bg, fg=self.log_current_fg)
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç–∞ –¥–ª—è —Ç–µ–≥–æ–≤ –ª–æ–≥–∞
        for tag_name in ["error", "warning", "info"]:
            self.log_text.tag_config(tag_name, foreground=self.get_log_tag_color(tag_name))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –≤ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞
        if self.is_placeholder_active:
            self.search_entry.config(foreground=self.placeholder_fg)
        else:
            self.search_entry.config(foreground=self.normal_fg)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–µ–º—É –≤ –∫–æ–Ω—Ñ–∏–≥
        self.app_config.set("Theme", "mode", self.theme_mode.get())
        self.save_app_config()
        self.log(self.current_lang["theme_changed_to"].format(mode.capitalize()), add_timestamp=False)
        

    def animate_colorful_line(self):
        """
        –ê–Ω–∏–º–∏—Ä—É–µ—Ç —Ü–≤–µ—Ç–Ω—É—é –ø–æ–ª–æ—Å–∫—É, –ø–ª–∞–≤–Ω–æ –º–µ–Ω—è—è –µ–µ —Ü–≤–µ—Ç–∞.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ü–≤–µ—Ç–æ–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ HLS –¥–ª—è –ø–ª–∞–≤–Ω—ã—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤.
        """
        self.colorful_line_canvas.delete("all")
        width = self.colorful_line_canvas.winfo_width()
        height = self.colorful_line_canvas.winfo_height()

        if width == 0: # –ï—Å–ª–∏ –æ–∫–Ω–æ –µ—â–µ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–æ, width –º–æ–∂–µ—Ç –±—ã—Ç—å 0
            self.after(100, self.animate_colorful_line)
            return

        segment_width = width / self.segment_count

        for i in range(self.segment_count):
            # –í—ã—á–∏—Å–ª—è–µ–º –æ—Ç—Ç–µ–Ω–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞
            hue = (self.hue_offset + (i / self.segment_count)) % 1.0
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º HLS –≤ RGB
            # –£–≤–µ–ª–∏—á–µ–Ω–∞ –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å (S=1.0) –∏ –Ω–µ–º–Ω–æ–≥–æ —É–º–µ–Ω—å—à–µ–Ω–∞ —è—Ä–∫–æ—Å—Ç—å (L=0.5) –¥–ª—è –±–æ–ª–µ–µ —è—Ä–∫–∏—Ö —Ü–≤–µ—Ç–æ–≤
            r, g, b = colorsys.hls_to_rgb(hue, 0.5, 1.0) 
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º RGB –≤ —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            color = f"#{int(r*255):02x}{int(g*255):02x}{int(b*255):02x}"
            
            x1 = i * segment_width
            y1 = 0
            x2 = (i + 1) * segment_width
            y2 = height
            
            self.colorful_line_canvas.create_rectangle(x1, y1, x2, y2, fill=color, outline=color)

        self.hue_offset = (self.hue_offset + self.animation_speed) % 1.0
        self.after(50, self.animate_colorful_line) # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 50 –º—Å

# =============================================================================
# --- –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
# =============================================================================
if __name__ == "__main__":
    try:
        app = ModPriorityGUI()
        app.mainloop()
    except Exception as e:
        # –≠—Ç–æ—Ç –±–ª–æ–∫ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –ª—é–±—ã–µ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –≤–æ –≤—Ä–µ–º—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ GUI –∏–ª–∏ mainloop
        # –∏ –≤—ã–≤–æ–¥–∏—Ç –∏—Ö –≤ –∫–æ–Ω—Å–æ–ª—å, —á—Ç–æ —è–≤–ª—è–µ—Ç—Å—è –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º –ø–æ–ª—É—á–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å,
        # –µ—Å–ª–∏ GUI –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è.
        print(f"FATAL ERROR: Application failed to launch due to an unhandled exception: {e}")
        traceback.print_exc()
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª –∂—É—Ä–Ω–∞–ª–∞, –µ—Å–ª–∏ –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω
        with open("crash_log.txt", "a", encoding="utf-8") as f:
            f.write(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] FATAL ERROR: {e}\n")
            traceback.print_exc(file=f)
