import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext, filedialog
import os
import sys
import configparser
import shutil
from datetime import datetime
import webbrowser
import csv
import re

# =============================================================================
# --- –£—Å–ª–æ–≤–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –∏ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è Windows ---
# –≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –∫–æ–¥–∞ –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã Windows,
# —Ç–∞–∫–∏–º–∏ –∫–∞–∫ —Å–∫—Ä—ã—Ç–∏–µ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ç–µ–º—ã Windows.
# =============================================================================
if os.name == 'nt':
    try:
        import ctypes
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è Windows, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
        # –≠—Ç–æ –ø–æ–ª–µ–∑–Ω–æ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π —Å –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º, —á—Ç–æ–±—ã –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —á–µ—Ä–Ω–æ–µ –æ–∫–Ω–æ –∫–æ–Ω—Å–æ–ª–∏.
        def hide_console_window():
            whnd = ctypes.windll.kernel32.GetConsoleWindow()
            if whnd != 0:
                ctypes.windll.user32.ShowWindow(whnd, 0)
        hide_console_window()
    except Exception as e:
        # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ—à–∏–±–∫—É, –µ—Å–ª–∏ ctypes –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –µ—Å—Ç—å –¥—Ä—É–≥–∞—è –ø—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ —Å–∫—Ä—ã—Ç–∏–∏ –∫–æ–Ω—Å–æ–ª–∏.
        print(f"Warning: Could not hide console window on Windows: {e}")

    try:
        import winreg
        def is_windows_dark_theme():
            """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–∏ Windows –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ç–µ–º–Ω—É—é —Ç–µ–º—É."""
            try:
                registry = winreg.ConnectRegistry(None, winreg.HKEY_CURRENT_USER)
                key = winreg.OpenKey(registry, r'SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Themes\\Personalize')
                val, _ = winreg.QueryValueEx(key, "AppsUseLightTheme")
                winreg.CloseKey(key)
                return val == 0  # 0 –æ–∑–Ω–∞—á–∞–µ—Ç —Ç–µ–º–Ω—ã–π —Ä–µ–∂–∏–º, 1 –æ–∑–Ω–∞—á–∞–µ—Ç —Å–≤–µ—Ç–ª—ã–π —Ä–µ–∂–∏–º.
            except Exception:
                # –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø –∫ —Ä–µ–µ—Å—Ç—Ä—É –Ω–µ —É–¥–∞–ª—Å—è –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞.
                return False
    except ImportError:
        # –ï—Å–ª–∏ winreg –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å—Ä–µ–¥–∞—Ö Python).
        def is_windows_dark_theme():
            return False
else:
    # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –Ω–µ-Windows —Å–∏—Å—Ç–µ–º, –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç False, —Ç–∞–∫ –∫–∞–∫ —Ç–µ–º–Ω–∞—è —Ç–µ–º–∞ Windows –Ω–µ –ø—Ä–∏–º–µ–Ω–∏–º–∞.
    def is_windows_dark_theme():
        return False

# =============================================================================
# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
# –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—É—Ç–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
# =============================================================================
DEFAULT_MODLOADER_SUBDIR = "modloader" # –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ modloader –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
OUTPUT_FILE_NAME = "modloader.ini"       # –ò–º—è —Ñ–∞–π–ª–∞, –≤ –∫–æ—Ç–æ—Ä—ã–π —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –º–æ–¥–æ–≤.
BACKUP_FILE_NAME = "modloader.ini.bak" # –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ modloader.ini.
APP_VERSION = "2.0"                      # –í–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
GITHUB_REPO_URL = "https://github.com/Maximka1993271/GTASAN/releases/download/ModloaderPriorityEditor/GTA.SA.Modloader.Priority.Editior.2.0.rar"
AUTHOR_EMAIL = "melnikovmaksim540@gmail.com"

# =============================================================================
# --- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –º–æ–¥–æ–≤ ---
# –≠—Ç–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è—é—Ç –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏ –Ω–∞–∑–Ω–∞—á–∞—é—Ç—Å—è –º–æ–¥–∞–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
# =============================================================================
custom_priorities = {
    "de palm": 78,
    "proper fixes": 40,
    "proper vehicles retex": 61,
    "revamped vehicles project": 62,
    "rosa project evolved": 30,
    "_essentials+": 99
}

# =============================================================================
# --- –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ ---
# –°–æ–¥–µ—Ä–∂–∞—Ç –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ, –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –∏ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–∞—Ö.
# =============================================================================
LANG_EN = {
    "app_title": "GTA SA Modloader Priority Editor 2.0",
    
    # –ú–µ–Ω—é
    "file_menu": "File",
    "file_open": "Open...",
    "file_save": "Save",
    "file_save_as": "Save As...",
    "file_exit": "Exit",
    
    "edit_menu": "Edit",
    "edit_import": "Import Priorities from File",
    "edit_export_csv": "Export to CSV",
    "edit_reset_priorities": "Reset All Priorities",
    "edit_restore_defaults": "Restore Default Priorities",
    "edit_delete_mod": "Delete Mod(s) from List",
    "delete_all_mods": "Delete All Mods from List",
    
    "settings_menu": "Settings",
    "theme_menu": "Theme",
    "theme_system": "System Theme",
    "theme_dark": "Dark Theme",
    "theme_light": "Light Theme",
    "settings_modloader_path": "Modloader Folder Path",
    
    "help_menu": "Help",
    "help_about": "About",
    "help_author": "About Author",
    "help_updates": "Check for Updates",
    "help_help": "Usage Guide", 
    "help_contact": "Contact Support",
    
    # –ü–æ–∏—Å–∫
    "search_mod": "Search Mod:",
    "update_mod_list": "Refresh Mod List",
    "generate_ini": "Generate modloader.ini",
    
    # –¢–∞–±–ª–∏—Ü–∞
    "mod_column": "Mod",
    "priority_column": "Priority",
    
    # –õ–æ–≥–∏
    "log_label": "Log:",
    "clear_log": "Clear Log",
    "select_all_log": "Select All",
    "copy_all_log": "Copy All",
    
    # –ê–≤—Ç–æ—Ä
    "author_label": "Author: Maxim Melnikov",
    
    # –û—à–∏–±–∫–∏ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    "modloader_folder_not_found": "‚ùå Folder '{0}' not found or not a directory! Please check the path in Settings.",
    "mods_not_found": "No mods found in '{0}' or the folder is empty/inaccessible.",
    "mods_loaded": "Loaded mods: {0}",
    "priority_conflicts_found": "‚ö†Ô∏è Priority conflicts detected:",
    "priority_conflict_detail": "  Priority {0} assigned to mods: {1}",
    "no_priority_conflicts": "‚úÖ No priority conflicts detected.",
    
    "priority_value_error_title": "Error",
    "priority_value_error": "Priority must be an integer between 0 and 99.",
    
    "no_mods_to_generate": "No mods to generate. Please load mods first.",
    "backup_created": "üì¶ Backup file '{0}' created.",
    "backup_error": "‚ö†Ô∏è Error creating backup: {0}",
    
    "file_saved_success": "‚úÖ File '{0}' successfully saved.",
    "file_saved_info": "File '{0}' successfully saved.",
    "file_save_error": "‚ùå Error saving file: {0}",
    "file_save_error_details": "Could not save file:\n{0}",
    "file_read_error": "Could not read file:\n{0}",
    
    "no_priority_sections": "No priority sections found in the file or the 'Profiles.Default.Priority' section is missing.",
    "priorities_imported": "‚úÖ Priorities imported from file '{0}'.",
    "export_csv_complete": "‚úÖ Export to CSV file '{0}' complete.",
    "export_csv_info": "File '{0}' successfully exported.",
    "export_csv_error": "‚ùå Error exporting to CSV: {0}",
    "export_csv_error_details": "Could not export file:\n{0}",
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    "reset_priorities_confirm_title": "Confirmation",
    "reset_priorities_confirm": "Are you sure you want to reset all priorities?",
    "priorities_reset": "‚úÖ All priorities reset to 0.",
    
    "restore_defaults_confirm_title": "Confirmation",
    "restore_defaults_confirm": "Are you sure you want to restore default priorities?",
    "priorities_restored": "‚úÖ Default priorities restored.",
    
    "modloader_path_changed": "Modloader path changed to: {0}",
    
    # –û –ø—Ä–æ–≥—Ä–∞–º–º–µ –∏ –∞–≤—Ç–æ—Ä–µ
    "about_title": "About Program",
    "about_message": "GTA SA Modloader Priority Editor\nVersion {0}\n\nA program for managing GTA San Andreas modloader priorities.".format(APP_VERSION),
    
    "author_title": "About Author",
    "author_message": "Maxim Melnikov\nEmail: melnikovmaksim540@gmail.com",
    
    "updates_title": "Check for Updates",
    "updates_message": "Checking for updates. You have the latest version {0}.".format(APP_VERSION),
    
    "help_title": "Help",
    "help_message": "1. Use 'Refresh Mod List' button to scan modloader folder.\n2. Double-click the 'Priority' column to change priorities.\n3. Generate modloader.ini to apply changes.\n4. Use the menu to open/save files and import/export data.",
    
    "contact_support_subject": "GTA SA Modloader Priority Editor Support",
    
    "open_ini_file_title": "Open INI File",
    
    "theme_changed_to": "Theme changed to: {0}",
    
    "language_menu": "Language",
    "language_en": "English",
    "language_ru": "–†—É—Å—Å–∫–∏–π",
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    "priority_changed_log": "Priority for mod '{0}' changed to {1}.",
    "mod_deleted_confirm_title": "Confirm Deletion",
    "mod_deleted_confirm": "Are you sure you want to delete '{0}' from the list? This will NOT remove the mod from your file system.",
    
    "multiple_mods_deleted_confirm": "Are you sure you want to delete {0} selected mods from the list? This will NOT remove them from your file system.",
    "delete_all_mods_confirm_title": "Confirm Deletion of All Mods",
    "delete_all_mods_confirm": "Are you sure you want to delete ALL mods from the list? This will NOT remove them from your file system.",
    
    "mod_deleted_log": "Mod '{0}' deleted from the list.",
    "all_mods_deleted_log": "All mods deleted from the list.",
    
    "loading_mods_from": "Loading mods from: {0}",
    "scanning_modloader_folder": "Scanning modloader folder: {0}",
    "found_mod_folder": "Found mod folder: {0}",
    "skipping_entry": "Skipping entry (not a folder or ignored prefix): {0}",
    "no_valid_mod_folders": "No valid mod folders found.",
    "no_mods_to_export": "No mods to export. The list is empty.",
    
    "file_not_found": "File not found: {0}",
    "invalid_priority_value": "Invalid priority value for mod '{0}' in INI: '{1}'. Skipping.",
    "mod_deleted_count": "Deleted {0} mod(s) from the list.",
    
    "priority_auto_assigned": "Automatically assigned priority: {0} for mod '{1}'",
    "priority_from_mod_ini": "Priority {0} for mod '{1}' extracted from the mod's INI file.",
    
    # –ü–æ–∏—Å–∫
    "search_syntax_help": "Search syntax: Use | for OR, - for NOT, p: for priority (e.g., 'mod1 | mod2 -mod3 p:>50').",
    "search_applied": "Search applied: '{0}'. Found {1} mods.",
    "invalid_search_syntax": "‚ùå Invalid search syntax. Please check your query.",
    
    "yes_button": "Yes", 
    "no_button": "No",
    "no_mods_selected_for_deletion": "No mods selected for deletion.",
    "save_button": "Save",
    "edit_priority_title": "Edit Priority",
    "info_title": "Information"
}

# –ú–æ–¥—É–ª—å –¥–ª—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
# =============================================================================
# --- –ö–ª–∞—Å—Å Localization ---
# –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —è–∑—ã–∫–æ–≤—ã–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏,
# –ø–æ–∑–≤–æ–ª—è—è –ª–µ–≥–∫–æ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å—Å—è –º–µ–∂–¥—É —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —è–∑—ã–∫–∞–º–∏.
# =============================================================================
class Localization:
    def __init__(self, language_dict):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–ª–∞—Å—Å –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏.
        :param language_dict: –°–ª–æ–≤–∞—Ä—å, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —è–∑—ã–∫–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–æ–≤.
        """
        self.language_dict = language_dict
        self.language = "ru"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∏–π

    def set_language(self, language_code):
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.
        :param language_code: –ö–æ–¥ —è–∑—ã–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "en", "ru").
        """
        if language_code in self.language_dict:
            self.language = language_code
        else:
            print(f"Warning: Language '{language_code}' not found. Using default language 'ru'.")
            self.language = 'ru'

    def get_text(self, key, *args):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ —Å—Ç—Ä–æ–∫—É.
        :param key: –ö–ª—é—á –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω—É–∂–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ —Å–ª–æ–≤–∞—Ä–µ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏.
        :param args: –ê—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ (–µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã).
        :return: –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞.
        """
        try:
            text = self.language_dict[self.language][key]
            if args:
                text = text.format(*args)
            return text
        except KeyError:
            return f"Missing translation for '{key}'"

# =============================================================================
# --- –î–∞–Ω–Ω—ã–µ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ ---
# –°–æ–¥–µ—Ä–∂–∞—Ç –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ, –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
# =============================================================================
LANG_RU = {
    "app_title": "GTA SA Modloader Priority Editor 2.0",
    "file_menu": "–§–∞–π–ª",
    "file_open": "–û—Ç–∫—Ä—ã—Ç—å...",
    "file_save": "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
    "file_save_as": "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫...",
    "file_exit": "–í—ã—Ö–æ–¥",
    "edit_menu": "–ü—Ä–∞–≤–∫–∞",
    "edit_import": "–ò–º–ø–æ—Ä—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞",
    "edit_export_csv": "–≠–∫—Å–ø–æ—Ä—Ç –≤ CSV",
    "edit_reset_priorities": "–°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã",
    "edit_restore_defaults": "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã",
    "edit_delete_mod": "–£–¥–∞–ª–∏—Ç—å –º–æ–¥(—ã) –∏–∑ —Å–ø–∏—Å–∫–∞",
    "delete_all_mods": "–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –º–æ–¥—ã –∏–∑ —Å–ø–∏—Å–∫–∞",
    "settings_menu": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏",
    "theme_menu": "–¢–µ–º–∞",
    "theme_system": "–°–∏—Å—Ç–µ–º–Ω–∞—è —Ç–µ–º–∞",
    "theme_dark": "–¢—ë–º–Ω–∞—è —Ç–µ–º–∞",
    "theme_light": "–°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞",
    "settings_modloader_path": "–ü—É—Ç—å –∫ –ø–∞–ø–∫–µ modloader",
    "help_menu": "–ü–æ–º–æ—â—å",
    "help_about": "–û –ø—Ä–æ–≥—Ä–∞–º–º–µ",
    "help_author": "–û–± –∞–≤—Ç–æ—Ä–µ",
    "help_updates": "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π",
    "help_help": "–°–ø—Ä–∞–≤–∫–∞",
    "help_contact": "–°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π",
    "search_mod": "–ü–æ–∏—Å–∫ –º–æ–¥–∞:",
    "update_mod_list": "–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–æ–≤",
    "generate_ini": "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å modloader.ini",
    "mod_column": "–ú–æ–¥",
    "priority_column": "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç",
    "log_label": "–õ–æ–≥:",
    "clear_log": "–û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥",
    "select_all_log": "–í—ã–¥–µ–ª–∏—Ç—å –≤—Å—ë",
    "copy_all_log": "–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤—Å—ë",
    "author_label": "–ê–≤—Ç–æ—Ä: –ú–∞–∫—Å–∏–º –ú–µ–ª—å–Ω–∏–∫–æ–≤",
    "modloader_folder_not_found": "‚ùå –ü–∞–ø–∫–∞ '{0}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å –≤ –ù–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.",
    "mods_not_found": "–ú–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ '{0}' –∏–ª–∏ –ø–∞–ø–∫–∞ –ø—É—Å—Ç–∞/–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.",
    "mods_loaded": "–ó–∞–≥—Ä—É–∂–µ–Ω–æ –º–æ–¥–æ–≤: {0}",
    "priority_conflicts_found": "‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤:",
    "priority_conflict_detail": "  –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç {0} –Ω–∞–∑–Ω–∞—á–µ–Ω –º–æ–¥–∞–º: {1}",
    "no_priority_conflicts": "‚úÖ –ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã.",
    "priority_value_error_title": "–û—à–∏–±–∫–∞",
    "priority_value_error": "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º –æ—Ç 0 –¥–æ 99.",
    "no_mods_to_generate": "–ù–µ—Ç –º–æ–¥–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –º–æ–¥—ã.",
    "backup_created": "üì¶ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Ñ–∞–π–ª–∞ {0}.",
    "backup_error": "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {0}",
    "file_saved_success": "‚úÖ –§–∞–π–ª {0} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.",
    "file_saved_info": "–§–∞–π–ª '{0}' —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.",
    "file_save_error": "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {0}",
    "file_save_error_details": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª:\n{0}",
    "file_read_error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª:\n{0}",
    "no_priority_sections": "–í —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —Å–µ–∫—Ü–∏–∏ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–µ–∫—Ü–∏—è 'Profiles.Default.Priority'.",
    "priorities_imported": "‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∏–∑ —Ñ–∞–π–ª–∞ '{0}'.",
    "export_csv_complete": "‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV —Ñ–∞–π–ª '{0}' –∑–∞–≤–µ—Ä—à—ë–Ω.",
    "export_csv_info": "–§–∞–π–ª '{0}' —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω.",
    "export_csv_error": "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –≤ CSV: {0}",
    "export_csv_error_details": "–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª:\n{0}",
    "reset_priorities_confirm_title": "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
    "reset_priorities_confirm": "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã?",
    "priorities_reset": "‚úÖ –í—Å–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã —Å–±—Ä–æ—à–µ–Ω—ã –Ω–∞ 0.",
    "restore_defaults_confirm_title": "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
    "restore_defaults_confirm": "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã?",
    "priorities_restored": "‚úÖ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.",
    "modloader_path_changed": "–ü—É—Ç—å –∫ modloader –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: {0}",
    "about_title": "–û –ø—Ä–æ–≥—Ä–∞–º–º–µ",
    "about_message": "GTA SA Modloader Priority Editor\n–í–µ—Ä—Å–∏—è {0}\n\n–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏ –º–æ–¥–æ–≤ GTA San Andreas modloader.".format(APP_VERSION),
    "author_title": "–û–± –∞–≤—Ç–æ—Ä–µ",
    "author_message": "–ú–∞–∫—Å–∏–º –ú–µ–ª—å–Ω–∏–∫–æ–≤\nEmail: melnikovmaksim540@gmail.com",
    "updates_title": "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π",
    "updates_message": "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π. –£ –≤–∞—Å —Å–∞–º–∞—è –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è. {0}".format(APP_VERSION),
    "help_title": "–°–ø—Ä–∞–≤–∫–∞",
    "help_message": "1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–æ–≤' –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–ø–∫–∏ modloader.\n2. –ò–∑–º–µ–Ω—è–π—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –¥–≤–æ–π–Ω—ã–º –∫–ª–∏–∫–æ–º –ø–æ –∫–æ–ª–æ–Ω–∫–µ '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç'.\n3. –ì–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª modloader.ini –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π.\n4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –∏ –∏–º–ø–æ—Ä—Ç–∞/—ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö.",
    "contact_support_subject": "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ GTA SA Modloader Priority Editor",
    "open_ini_file_title": "–û—Ç–∫—Ä—ã—Ç—å INI —Ñ–∞–π–ª",
    "theme_changed_to": "–¢–µ–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {0}",
    "language_menu": "–Ø–∑—ã–∫",
    "language_en": "English",
    "language_ru": "–†—É—Å—Å–∫–∏–π",
    "priority_changed_log": "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –º–æ–¥–∞ '{0}' –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {1}.",
    "mod_deleted_confirm_title": "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è",
    "mod_deleted_confirm": "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å '{0}' –∏–∑ —Å–ø–∏—Å–∫–∞? –≠—Ç–æ –ù–ï —É–¥–∞–ª–∏—Ç –º–æ–¥ –∏–∑ –≤–∞—à–µ–π —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã.",
    "multiple_mods_deleted_confirm": "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å {0} –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–æ–¥–∞(–æ–≤) –∏–∑ —Å–ø–∏—Å–∫–∞? –≠—Ç–æ –ù–ï —É–¥–∞–ª–∏—Ç –∏—Ö –∏–∑ –≤–∞—à–µ–π —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã.",
    "delete_all_mods_confirm_title": "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –º–æ–¥–æ–≤",
    "delete_all_mods_confirm": "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï –º–æ–¥—ã –∏–∑ —Å–ø–∏—Å–∫–∞? –≠—Ç–æ –ù–ï —É–¥–∞–ª–∏—Ç –º–æ–¥—ã –∏–∑ –≤–∞—à–µ–π —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã.",
    "mod_deleted_log": "–ú–æ–¥ '{0}' —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞.",
    "all_mods_deleted_log": "–í—Å–µ –º–æ–¥—ã —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–ø–∏—Å–∫–∞.",
    "loading_mods_from": "–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–æ–≤ –∏–∑: {0}",
    "scanning_modloader_folder": "–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ modloader: {0}",
    "found_mod_folder": "–ù–∞–π–¥–µ–Ω –º–æ–¥: {0}",
    "skipping_entry": "–ü—Ä–æ–ø—É—Å–∫ –∑–∞–ø–∏—Å–∏ (–Ω–µ –ø–∞–ø–∫–∞ –∏–ª–∏ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–π –ø—Ä–µ—Ñ–∏–∫—Å): {0}",
    "no_valid_mod_folders": "–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞–ø–æ–∫ –º–æ–¥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
    "no_mods_to_export": "–ù–µ—Ç –º–æ–¥–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞. –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.",
    "file_not_found": "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {0}",
    "invalid_priority_value": "–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –¥–ª—è –º–æ–¥–∞ '{0}' –≤ INI: '{1}'. –ü—Ä–æ–ø—É—â–µ–Ω–æ.",
    "mod_deleted_count": "–£–¥–∞–ª–µ–Ω–æ {0} –º–æ–¥(–æ–≤) –∏–∑ —Å–ø–∏—Å–∫–∞.",
    "priority_auto_assigned": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {0} –¥–ª—è –º–æ–¥–∞ '{1}'",
    "priority_from_mod_ini": "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç {0} –¥–ª—è –º–æ–¥–∞ '{1}' –∏–∑–≤–ª–µ—á–µ–Ω –∏–∑ INI —Ñ–∞–π–ª–∞ –º–æ–¥–∞.",
    "search_syntax_help": "–°–∏–Ω—Ç–∞–∫—Å–∏—Å –ø–æ–∏—Å–∫–∞: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ | –¥–ª—è –ò–õ–ò, - –¥–ª—è –ù–ï, p: –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'mod1 | mod2 -mod3 p:>50').",
    "search_applied": "–ü–æ–∏—Å–∫ –ø—Ä–∏–º–µ–Ω–µ–Ω: '{0}'. –ù–∞–π–¥–µ–Ω–æ –º–æ–¥–æ–≤: {1}.",
    "invalid_search_syntax": "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –ø–æ–∏—Å–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–ø—Ä–æ—Å.",
    "yes_button": "–î–∞",  
    "no_button": "–ù–µ—Ç",
    "no_mods_selected_for_deletion": "–ú–æ–¥—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω—ã.",
    "save_button": "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
    "edit_priority_title": "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç",
    "info_title": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
}

# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
localization = Localization({"ru": LANG_RU, "en": LANG_EN})

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
localization.set_language("ru")

# =============================================================================
# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
# –°–æ–¥–µ—Ä–∂–∞—Ç –æ–±—â–∏–µ –ø–æ–ª–µ–∑–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é –∫ –∫–ª–∞—Å—Å—É GUI.
# =============================================================================
def is_valid_priority(priority):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã–º (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 99)."""
    return isinstance(priority, int) and 0 <= priority <= 99

# =============================================================================
# --- –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ ---
# –≠—Ç–æ—Ç –∫–ª–∞—Å—Å —É–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ–º–∏ –∞—Å–ø–µ–∫—Ç–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏ –ª–æ–≥–∏–∫–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
# =============================================================================
class ModPriorityGUI(tk.Tk):
    def __init__(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –µ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã.
        """
        super().__init__()

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –∏–∫–æ–Ω–æ–∫.
        # –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é —Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞, —Ç–∞–∫ –∏ –ø–æ—Å–ª–µ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ PyInstaller.
        self.program_root_dir = os.path.dirname(sys.executable) if getattr(sys, 'frozen', False) else \
                                 os.path.abspath(os.path.dirname(sys.argv[0]))

        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—É—Ç–∏ modloader, –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–∏—Å–∫–∞, —Ç–µ–º—ã –∏ —è–∑—ã–∫–∞).
        self.config_file = os.path.join(self.program_root_dir, "config.ini")
        self.app_config = configparser.ConfigParser()
        self.load_app_config()

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø—É—Ç—å –∏–ª–∏ –ø—É—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
        # –ï—Å–ª–∏ –ø—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥–µ, —Ç–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è "modloader"
        # –≤–Ω—É—Ç—Ä–∏ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã.
        self.modloader_dir = self.app_config.get("Paths", "modloader_path",
                                                 fallback=os.path.join(self.program_root_dir, DEFAULT_MODLOADER_SUBDIR))
        # –ü—É—Ç—å –¥–ª—è modloader.ini —Ç–µ–ø–µ—Ä—å –≤—Å–µ–≥–¥–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–∞–ø–∫–µ modloader, –∫–æ—Ç–æ—Ä—É—é –≤—ã–±—Ä–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.
        self.output_ini_path = os.path.join(self.modloader_dir, OUTPUT_FILE_NAME) 

        self.ini_config_data = configparser.ConfigParser()

        # –ù–∞—á–∞–ª—å–Ω—ã–π —è–∑—ã–∫, –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ –ø–æ–∑–∂–µ.
        self.current_lang = localization.language_dict[localization.language] 
        self.title(self.current_lang["app_title"])
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞.
        self.geometry("820x700") 
        self.resizable(True, True) # –†–∞–∑—Ä–µ—à–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞.

        self.mods = [] # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –º–æ–¥–æ–≤.
        self.filtered_mods = [] # –°–ø–∏—Å–æ–∫ –º–æ–¥–æ–≤ –ø–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ–∏—Å–∫–∞.

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º —Ç–µ–º—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ –∏–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–∏—Å—Ç–µ–º–Ω—ã–π.
        self.theme_mode = tk.StringVar(value=self.app_config.get("Theme", "mode", fallback="system"))
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —è–∑—ã–∫ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ –∏–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∏–π.
        self.language_mode = tk.StringVar(value=self.app_config.get("Language", "mode", fallback="ru"))

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —à—Ä–∏—Ñ—Ç—ã –°–†–ê–ó–£, —á—Ç–æ–±—ã –æ–Ω–∏ –±—ã–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏–¥–∂–µ—Ç–æ–≤.
        self.font_main = ("Segoe UI", 11) 
        self.font_small = ("Segoe UI", 10, "italic") 

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ttk.Style –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –≤–∏–¥–∂–µ—Ç–æ–≤ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º.
        self.style = ttk.Style(self)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ü–≤–µ—Ç–æ–≤ –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤—ã—Ö –æ–∫–æ–Ω –∏ –ª–æ–≥–∞.
        # –≠—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è –±—É–¥—É—Ç –æ–±–Ω–æ–≤–ª–µ–Ω—ã —Ñ—É–Ω–∫—Ü–∏–µ–π set_theme.
        self.dialog_bg = "#FFFFFF" 
        self.dialog_fg = "#222222" 
        self.dialog_btn_bg = "#E0E0E0" 
        self.dialog_btn_fg = "#222222" 
        self.dialog_error_fg = "#FF0000" 
        self.log_current_bg = "#FFFFFF" # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è —Ñ–æ–Ω–∞ –ª–æ–≥–∞
        self.log_current_fg = "#222222" # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ —Ç–µ–∫—Å—Ç–∞ –ª–æ–≥–∞

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ. initial_setup=True –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –∑–∞–ø–∏—Å—å –≤ –ª–æ–≥ –¥–æ –µ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è.
        # –¢–µ–ø–µ—Ä—å set_theme –±—É–¥–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞—Ç—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π log_text
        self.set_theme(initial_setup=True) 

        # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –º–µ–Ω—é –∏ –≤–∏–¥–∂–µ—Ç—ã, —á—Ç–æ–±—ã self.log_text —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª
        self.create_menu() # –°–æ–∑–¥–∞–µ–º –º–µ–Ω—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
        self.create_widgets() # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–∏–¥–∂–µ—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.

        # –ü–æ–∏—Å–∫ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–∫–æ–Ω–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
        self._set_app_icon()

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —è–∑—ã–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
        self.set_language(self.language_mode.get(), initial_setup=True) 

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞.
        last_search_query = self.app_config.get("Search", "last_query", fallback="")
        self.search_var.set(last_search_query)

        self.load_mods_and_assign_priorities() # –ü–µ—Ä–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
        self.protocol("WM_DELETE_WINDOW", self.on_closing)

    def _set_app_icon(self):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏–∫–æ–Ω–∫—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ icon.ico."""
        icon_path_candidates = [
            os.path.join(os.getcwd(), 'icon.ico'), # –¢–µ–∫—É—â–∞—è —Ä–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è.
            os.path.join(self.program_root_dir, 'icon.ico'), # –ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã.
        ]
        if getattr(sys, 'frozen', False): # –î–ª—è —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö PyInstaller –ø–∞–∫–µ—Ç–æ–≤.
            # PyInstaller –∫–ª–∞–¥–µ—Ç —Ñ–∞–π–ª—ã –≤ sys._MEIPASS
            icon_path_candidates.append(os.path.join(sys._MEIPASS, 'icon.ico'))

        icon_loaded = False
        for icon_path in icon_path_candidates:
            if os.path.exists(icon_path):
                try:
                    self.iconbitmap(icon_path)
                    icon_loaded = True
                    break
                except tk.TclError as e:
                    print(f"WARNING: Failed to load icon from '{icon_path}'. Details: {e}")
                except Exception as e:
                    print(f"WARNING: An unexpected error occurred while loading icon '{icon_path}': {e}")
            
        if not icon_loaded:
            print("INFO: No 'icon.ico' found or could not be loaded. Running without custom icon.")

    def on_closing(self):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
        """
        self.save_app_config()
        self.destroy() # –ó–∞–∫—Ä—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.

    def load_app_config(self):
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ config.ini.
        """
        if os.path.exists(self.config_file):
            try:
                self.app_config.read(self.config_file, encoding='utf-8')
            except Exception as e:
                # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —á—Ç–µ–Ω–∏—è, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å, —Ç–∞–∫ –∫–∞–∫ –ª–æ–≥ –µ—â–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å–µ–∫—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ –∫–æ–Ω—Ñ–∏–≥–µ, —Å–æ–∑–¥–∞–µ–º –∏—Ö, –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.
        for section in ["Paths", "Search", "Theme", "Language"]:
            if not self.app_config.has_section(section):
                self.app_config.add_section(section)

    def save_app_config(self):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ —Ñ–∞–π–ª config.ini.
        """
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∫–æ–Ω—Ñ–∏–≥–∞.
        self.app_config.set("Search", "last_query", self.search_var.get())
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–º—ã –∏ —è–∑—ã–∫–∞.
        self.app_config.set("Theme", "mode", self.theme_mode.get())
        self.app_config.set("Language", "mode", self.language_mode.get())
        try:
            with open(self.config_file, 'w', encoding='utf-8') as configfile:
                self.app_config.write(configfile)
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")

    def set_language(self, lang_code, initial_setup=False):
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.
        :param lang_code: –ö–æ–¥ —è–∑—ã–∫–∞ ("en" –¥–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ, "ru" –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ).
        :param initial_setup: –ï—Å–ª–∏ True, —Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ,
                              –∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥ –Ω–µ –±—É–¥—É—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫.
        """
        localization.set_language(lang_code)
        self.current_lang = localization.language_dict[localization.language] # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
        self.update_ui_texts() # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —Ç–µ–∫—Å—Ç—ã –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ.
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ log_text —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–µ–∂–¥–µ —á–µ–º –ø—ã—Ç–∞—Ç—å—Å—è —á—Ç–æ-—Ç–æ –≤ –Ω–µ–≥–æ –∑–∞–ø–∏—Å–∞—Ç—å,
        # –∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞.
        if hasattr(self, 'log_text') and not initial_setup: 
            self.log(f"{self.current_lang['language_menu']}: {self.current_lang[f'language_{lang_code}']}", add_timestamp=False)

    def update_ui_texts(self):
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —è–∑—ã–∫–æ–º.
        """
        self.title(self.current_lang["app_title"])

        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–¥–ø–∏—Å–∏ –≤ –º–µ–Ω—é. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ menubar, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ.
        if hasattr(self, 'menubar'): 
            menu_labels = {
                "file_menu": self.file_menu,
                "edit_menu": self.edit_menu,
                "settings_menu": self.settings_menu,
                "help_menu": self.help_menu,
            }
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ—Ä–Ω–µ–≤—ã—Ö –º–µ–Ω—é
            for i, (key, menu_obj) in enumerate(menu_labels.items()):
                self.menubar.entryconfig(i + 1, label=self.current_lang[key])

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ–¥–º–µ–Ω—é "–§–∞–π–ª"
            self.file_menu.entryconfig(0, label=self.current_lang["file_open"])
            self.file_menu.entryconfig(1, label=self.current_lang["file_save"])
            self.file_menu.entryconfig(2, label=self.current_lang["file_save_as"])
            self.file_menu.entryconfig(4, label=self.current_lang["file_exit"])

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ–¥–º–µ–Ω—é "–ü—Ä–∞–≤–∫–∞"
            self.edit_menu.entryconfig(0, label=self.current_lang["edit_import"])
            self.edit_menu.entryconfig(1, label=self.current_lang["edit_export_csv"])
            self.edit_menu.entryconfig(3, label=self.current_lang["edit_reset_priorities"])
            self.edit_menu.entryconfig(4, label=self.current_lang["edit_restore_defaults"])
            self.edit_menu.entryconfig(5, label=self.current_lang["edit_delete_mod"])
            self.edit_menu.entryconfig(6, label=self.current_lang["delete_all_mods"])

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ–¥–º–µ–Ω—é "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
            self.settings_menu.entryconfig(0, label=self.current_lang["theme_menu"])  
            self.theme_menu.entryconfig(0, label=self.current_lang["theme_system"])
            self.theme_menu.entryconfig(1, label=self.current_lang["theme_dark"])
            self.theme_menu.entryconfig(2, label=self.current_lang["theme_light"])

            self.settings_menu.entryconfig(1, label=self.current_lang["language_menu"])
            self.language_menu.entryconfig(0, label=self.current_lang["language_en"])
            self.language_menu.entryconfig(1, label=self.current_lang["language_ru"])

            self.settings_menu.entryconfig(2, label=self.current_lang["settings_modloader_path"])

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ–¥–º–µ–Ω—é "–ü–æ–º–æ—â—å"
            self.help_menu.entryconfig(0, label=self.current_lang["help_about"])
            self.help_menu.entryconfig(1, label=self.current_lang["help_author"])
            self.help_menu.entryconfig(2, label=self.current_lang["help_updates"])
            self.help_menu.entryconfig(3, label=self.current_lang["help_help"]) 
            self.help_menu.entryconfig(4, label=self.current_lang["help_contact"]) 


        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç—ã –≤–∏–¥–∂–µ—Ç–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç.
        if hasattr(self, 'search_label'):
            self.search_label.config(text=self.current_lang["search_mod"])
        if hasattr(self, 'update_button'):
            self.update_button.config(text=self.current_lang["update_mod_list"])
        if hasattr(self, 'generate_button'):
            self.generate_button.config(text=self.current_lang["generate_ini"])
        if hasattr(self, 'tree'):
            self.tree.heading("mod_name", text=self.current_lang["mod_column"])
            self.tree.heading("priority", text=self.current_lang["priority_column"])
        if hasattr(self, 'log_label'):
            self.log_label.config(text=self.current_lang["log_label"])
        if hasattr(self, 'clear_log_button'):
            self.clear_log_button.config(text=self.current_lang["clear_log"])
        if hasattr(self, 'author_label'):
            self.author_label.config(text=self.current_lang["author_label"])
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–æ–∫ "–í—ã–¥–µ–ª–∏—Ç—å –≤—Å—ë" –∏ "–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤—Å—ë".
        if hasattr(self, 'select_all_log_button'):
            self.select_all_log_button.config(text=self.current_lang["select_all_log"])
        if hasattr(self, 'copy_all_log_button'):
            self.copy_all_log_button.config(text=self.current_lang["copy_all_log"])

    def set_theme(self, initial_setup=False):
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–º—É –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (—Å–≤–µ—Ç–ª–∞—è/—Ç–µ–º–Ω–∞—è/—Å–∏—Å—Ç–µ–º–Ω–∞—è).
        :param initial_setup: –ï—Å–ª–∏ True, —Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ,
                              —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–º –≤–∏–¥–∂–µ—Ç–∞–º.
        """
        mode = self.theme_mode.get()
        dark = False
        if mode == "system":
            dark = is_windows_dark_theme() # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é —Ç–µ–º—É Windows.
        elif mode == "dark":
            dark = True

        # –®—Ä–∏—Ñ—Ç—ã —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –≤ __init__
        # self.font_main = ("Segoe UI", 11) 
        # self.font_small = ("Segoe UI", 10, "italic") 

        self.style.theme_use('clam') # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–º—É 'clam' –∫–∞–∫ –æ—Å–Ω–æ–≤—É –¥–ª—è –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏.

        if dark:
            # –¶–≤–µ—Ç–∞ –¥–ª—è —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã.
            bg = "#121212" # –û–±—â–∏–π —Ñ–æ–Ω.
            fg = "#E0E0E0" # –û–±—â–∏–π —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞.
            entry_bg = "#1E1E1E" # –§–æ–Ω –ø–æ–ª–µ–π –≤–≤–æ–¥–∞.
            entry_fg = "#E0E0E0" # –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –ø–æ–ª–µ–π –≤–≤–æ–¥–∞.
            btn_bg = "#333333" # –§–æ–Ω –∫–Ω–æ–ø–æ–∫.
            btn_fg = "#FFFFFF" # –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–æ–∫.
            sel_bg = "#555555" # –§–æ–Ω –≤—ã–¥–µ–ª–µ–Ω–∏—è.
            sel_fg = "#FFFFFF" # –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –≤—ã–¥–µ–ª–µ–Ω–∏—è.
            self.log_current_bg = "#212121" # –§–æ–Ω –ª–æ–≥–∞.
            self.log_current_fg = "#E0E0E0" # –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –ª–æ–≥–∞.
            tree_bg = "#1E1E1E" # –§–æ–Ω —Ç–∞–±–ª–∏—Ü—ã.
            tree_fg = "#E0E0E0" # –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ —Ç–∞–±–ª–∏—Ü—ã.
            tree_heading_bg = "#444444" # –§–æ–Ω –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Ç–∞–±–ª–∏—Ü—ã.
            tree_heading_fg = "#FFFFFF" # –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Ç–∞–±–ª–∏—Ü—ã.
            border_color = "#444444" # –¶–≤–µ—Ç –≥—Ä–∞–Ω–∏—Ü—ã.
            self.dialog_bg = "#282828" # –§–æ–Ω –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤.
            self.dialog_fg = "#E0E0E0" # –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤.
            self.dialog_btn_bg = "#3A3A3A" # –§–æ–Ω –∫–Ω–æ–ø–æ–∫ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤.
            self.dialog_btn_fg = "#E0E0E0" # –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–æ–∫ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤.
            self.dialog_error_fg = "#FF6666" # –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –æ—à–∏–±–æ–∫ –¥–ª—è —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã.
            menu_bg = "#333333" # –§–æ–Ω –º–µ–Ω—é.
            menu_fg = "#E0E0E0" # –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –º–µ–Ω—é.
            menu_active_bg = "#555555" # –§–æ–Ω –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –º–µ–Ω—é.
            menu_active_fg = "#FFFFFF" # –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –º–µ–Ω—é.

        else:
            # –¶–≤–µ—Ç–∞ –¥–ª—è —Å–≤–µ—Ç–ª–æ–π —Ç–µ–º—ã.
            bg = "#F0F0F0"
            fg = "#222222"
            entry_bg = "#FFFFFF"
            entry_fg = "#000000"
            btn_bg = "#0078D7" 
            btn_fg = "#FFFFFF"
            sel_bg = "#ADD8E6" 
            sel_fg = "#000000"
            self.log_current_bg = "#FFFFFF"
            self.log_current_fg = "#222222"
            tree_bg = "#FFFFFF"
            tree_fg = "#222222"
            tree_heading_bg = "#E0E0E0"
            tree_heading_fg = "#000000"
            border_color = "#CCCCCC"
            self.dialog_bg = "#FFFFFF"
            self.dialog_fg = "#222222"
            self.dialog_btn_bg = "#E0E0E0"
            self.dialog_btn_fg = "#222222"
            self.dialog_error_fg = "#FF0000"
            menu_bg = "#F0F0F0"
            menu_fg = "#222222"
            menu_active_bg = "#ADD8E6"
            menu_active_fg = "#000000"

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏.
        self.configure(bg=bg)
        self.style.configure(".", background=bg, foreground=fg, font=self.font_main)
        self.style.configure("TFrame", background=bg)
        self.style.configure("TLabel", background=bg, foreground=fg)
        
        # –°—Ç–∏–ª–∏ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫.
        self.style.configure("TButton", background=btn_bg, foreground=btn_fg, font=self.font_main, borderwidth=0)
        self.style.map("TButton",
                        background=[('active', sel_bg), ('pressed', sel_bg)], # –ò—Å–ø–æ–ª—å–∑—É–µ–º sel_bg –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π/–Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–∏.
                        foreground=[('active', sel_fg), ('pressed', sel_fg)],
                        bordercolor=[('focus', border_color)],
                        focusthickness=[('focus', 1)])

        # –°—Ç–∏–ª–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã (Treeview).
        self.style.configure("Treeview",
                              background=tree_bg,
                              fieldbackground=tree_bg,
                              foreground=tree_fg,
                              bordercolor=border_color,
                              font=self.font_main,
                              rowheight=25) # –ù–µ–º–Ω–æ–≥–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É —Å—Ç—Ä–æ–∫ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏.
        self.style.map('Treeview',
                        background=[('selected', sel_bg)],
                        foreground=[('selected', sel_fg)])
        self.style.configure("Treeview.Heading",
                              background=tree_heading_bg,
                              foreground=tree_heading_fg,
                              font=(self.font_main[0], 12, 'bold'))
        self.style.map("Treeview.Heading",
                        background=[('active', tree_heading_bg)], # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏.
                        foreground=[('active', tree_heading_fg)])


        # –°—Ç–∏–ª–∏ –¥–ª—è –ø–æ–ª–µ–π –≤–≤–æ–¥–∞ (Entry).
        self.style.configure("TEntry",
                             fieldbackground=entry_bg,
                             foreground=entry_fg,
                             bordercolor=border_color,
                             font=self.font_main)
        self.style.map("TEntry",
                       fieldbackground=[('focus', entry_bg)],
                       foreground=[('focus', entry_fg)])

        # –°—Ç–∏–ª–∏ –¥–ª—è ScrolledText (–ª–æ–≥–∞).
        if hasattr(self, 'log_text'): # –¢–µ–ø–µ—Ä—å —ç—Ç–æ—Ç –±–ª–æ–∫ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–µ–º—ã
            self.log_text.config(bg=self.log_current_bg, fg=self.log_current_fg, font=self.font_main)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç–∞ –º–µ–Ω—é, –µ—Å–ª–∏ –æ–Ω–æ —É–∂–µ —Å–æ–∑–¥–∞–Ω–æ.
        if hasattr(self, 'menubar'):
            self.menubar.config(bg=menu_bg, fg=menu_fg)
            for menu in [self.file_menu, self.edit_menu, self.settings_menu, self.theme_menu, self.language_menu, self.help_menu]:
                menu.config(bg=menu_bg, fg=menu_fg,
                            activebackground=menu_active_bg,
                            activeforeground=menu_active_fg)
        
        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ª–æ–≥.
        if not initial_setup and hasattr(self, 'log_text'):
            self.log(f"{self.current_lang['theme_menu']}: {self.current_lang[f'theme_{mode}']}", add_timestamp=False)

    def create_menu(self):
        """–°–æ–∑–¥–∞–µ—Ç –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
        self.menubar = tk.Menu(self)
        self.config(menu=self.menubar)

        # –ú–µ–Ω—é "–§–∞–π–ª"
        self.file_menu = tk.Menu(self.menubar, tearoff=0)
        self.menubar.add_cascade(label=self.current_lang["file_menu"], menu=self.file_menu)
        self.file_menu.add_command(label=self.current_lang["file_open"], command=self.open_file_dialog)
        self.file_menu.add_command(label=self.current_lang["file_save"], command=self.generate_modloader_ini)
        self.file_menu.add_command(label=self.current_lang["file_save_as"], command=lambda: self.save_file_dialog(save_as=True))
        self.file_menu.add_separator()
        self.file_menu.add_command(label=self.current_lang["file_exit"], command=self.on_closing)

        # –ú–µ–Ω—é "–ü—Ä–∞–≤–∫–∞"
        self.edit_menu = tk.Menu(self.menubar, tearoff=0)
        self.menubar.add_cascade(label=self.current_lang["edit_menu"], menu=self.edit_menu)
        self.edit_menu.add_command(label=self.current_lang["edit_import"], command=self.import_priorities_from_file)
        self.edit_menu.add_command(label=self.current_lang["edit_export_csv"], command=self.export_priorities_to_csv)
        self.edit_menu.add_separator()
        self.edit_menu.add_command(label=self.current_lang["edit_reset_priorities"], command=self.reset_all_priorities)
        self.edit_menu.add_command(label=self.current_lang["edit_restore_defaults"], command=self.restore_standard_priorities)
        self.edit_menu.add_command(label=self.current_lang["edit_delete_mod"], command=self.delete_selected_mods)
        self.edit_menu.add_command(label=self.current_lang["delete_all_mods"], command=self.delete_all_mods)

        # –ú–µ–Ω—é "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
        self.settings_menu = tk.Menu(self.menubar, tearoff=0)
        self.menubar.add_cascade(label=self.current_lang["settings_menu"], menu=self.settings_menu)

        # –ü–æ–¥–º–µ–Ω—é "–¢–µ–º–∞"
        self.theme_menu = tk.Menu(self.settings_menu, tearoff=0)
        self.settings_menu.add_cascade(label=self.current_lang["theme_menu"], menu=self.theme_menu)
        self.theme_mode.trace_add("write", lambda *args: self.set_theme())
        self.theme_menu.add_radiobutton(label=self.current_lang["theme_system"], variable=self.theme_mode, value="system")
        self.theme_menu.add_radiobutton(label=self.current_lang["theme_dark"], variable=self.theme_mode, value="dark")
        self.theme_menu.add_radiobutton(label=self.current_lang["theme_light"], variable=self.theme_mode, value="light")

        # –ü–æ–¥–º–µ–Ω—é "–Ø–∑—ã–∫"
        self.language_menu = tk.Menu(self.settings_menu, tearoff=0)
        self.settings_menu.add_cascade(label=self.current_lang["language_menu"], menu=self.language_menu)
        self.language_mode.trace_add("write", lambda *args: self.set_language(self.language_mode.get()))
        self.language_menu.add_radiobutton(label=self.current_lang["language_en"], variable=self.language_mode, value="en")
        self.language_menu.add_radiobutton(label=self.current_lang["language_ru"], variable=self.language_mode, value="ru")

        self.settings_menu.add_command(label=self.current_lang["settings_modloader_path"], command=self.browse_modloader_path)

        # –ú–µ–Ω—é "–ü–æ–º–æ—â—å"
        self.help_menu = tk.Menu(self.menubar, tearoff=0)
        self.menubar.add_cascade(label=self.current_lang["help_menu"], menu=self.help_menu)
        self.help_menu.add_command(label=self.current_lang["help_about"], command=self.about_program)
        self.help_menu.add_command(label=self.current_lang["help_author"], command=self.about_author)
        self.help_menu.add_command(label=self.current_lang["help_updates"], command=self.check_for_updates)
        self.help_menu.add_command(label=self.current_lang["help_help"], command=self.show_help)
        self.help_menu.add_command(label=self.current_lang["help_contact"], command=self.contact_support)

    def create_widgets(self):
        """
        –°–æ–∑–¥–∞–µ—Ç –∏ —Ä–∞–∑–º–µ—â–∞–µ—Ç –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–∏–¥–∂–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.
        """
        # –§—Ä–µ–π–º –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        top_frame = ttk.Frame(self, padding="10")
        top_frame.pack(fill="x", pady=(5, 0))

        self.search_label = ttk.Label(top_frame, text=self.current_lang["search_mod"])
        self.search_label.pack(side="left", padx=(0, 5))

        self.search_var = tk.StringVar()
        self.search_entry = ttk.Entry(top_frame, textvariable=self.search_var, width=40)
        self.search_entry.pack(side="left", expand=True, fill="x", padx=(0, 10))
        self.search_entry.bind("<KeyRelease>", self.apply_search_filter) # –ü—Ä–∏–≤—è–∑–∫–∞ –∫ —Å–æ–±—ã—Ç–∏—é –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è –∫–ª–∞–≤–∏—à–∏ –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞.

        self.update_button = ttk.Button(top_frame, text=self.current_lang["update_mod_list"], command=self.load_mods_and_assign_priorities)
        self.update_button.pack(side="left", padx=(0, 5))

        self.generate_button = ttk.Button(top_frame, text=self.current_lang["generate_ini"], command=self.generate_modloader_ini)
        self.generate_button.pack(side="left")

        # –§—Ä–µ–π–º –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –º–æ–¥–æ–≤
        tree_frame = ttk.Frame(self, padding="10")
        tree_frame.pack(fill="both", expand=True)

        # –°–æ–∑–¥–∞–Ω–∏–µ Treeview (—Ç–∞–±–ª–∏—Ü—ã) –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–æ–¥–æ–≤
        self.tree = ttk.Treeview(tree_frame, columns=("mod_name", "priority"), show="headings")
        self.tree.heading("mod_name", text=self.current_lang["mod_column"])
        self.tree.heading("priority", text=self.current_lang["priority_column"])
        self.tree.column("mod_name", width=300, anchor="w")
        self.tree.column("priority", width=100, anchor="center")
        self.tree.pack(side="left", fill="both", expand=True)

        # –°–∫—Ä–æ–ª–ª–±–∞—Ä –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
        tree_scrollbar = ttk.Scrollbar(tree_frame, orient="vertical", command=self.tree.yview)
        tree_scrollbar.pack(side="right", fill="y")
        self.tree.configure(yscrollcommand=tree_scrollbar.set)

        self.tree.bind("<Double-1>", self.on_double_click_tree) # –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏—è –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞.
        self.tree.bind("<Delete>", self.delete_selected_mods_event) # –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏—è –Ω–∞–∂–∞—Ç–∏—è Delete –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –º–æ–¥–æ–≤.

        # –§—Ä–µ–π–º –¥–ª—è –ª–æ–≥–∞ –∏ –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–æ–º
        log_frame = ttk.Frame(self, padding="10")
        log_frame.pack(fill="both", expand=False)

        log_buttons_frame = ttk.Frame(log_frame)
        log_buttons_frame.pack(fill="x", pady=(0, 5))

        self.log_label = ttk.Label(log_buttons_frame, text=self.current_lang["log_label"])
        self.log_label.pack(side="left", padx=(0, 5))

        self.clear_log_button = ttk.Button(log_buttons_frame, text=self.current_lang["clear_log"], command=self.clear_log)
        self.clear_log_button.pack(side="right")
        
        self.copy_all_log_button = ttk.Button(log_buttons_frame, text=self.current_lang["copy_all_log"], command=self.copy_log_content)
        self.copy_all_log_button.pack(side="right", padx=(0, 5))

        self.select_all_log_button = ttk.Button(log_buttons_frame, text=self.current_lang["select_all_log"], command=self.select_all_log_content)
        self.select_all_log_button.pack(side="right", padx=(0, 5))


        self.log_text = scrolledtext.ScrolledText(log_frame, wrap="word", height=10)
        self.log_text.pack(fill="both", expand=True)
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç–∞ –ª–æ–≥–∞ —Å—Ä–∞–∑—É –ø—Ä–∏ –µ–≥–æ —Å–æ–∑–¥–∞–Ω–∏–∏, –∏—Å–ø–æ–ª—å–∑—É—è —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã.
        self.log_text.config(state="disabled", bg=self.log_current_bg, fg=self.log_current_fg, font=self.font_main)

        # –õ–µ–π–±–ª –∞–≤—Ç–æ—Ä–∞
        self.author_label = ttk.Label(self, text=self.current_lang["author_label"], font=self.font_small, anchor="center")
        self.author_label.pack(fill="x", pady=(5, 10))

    def on_double_click_tree(self, event):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞ –ø–æ —Å—Ç—Ä–æ–∫–µ Treeview –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞.
        """
        item_id = self.tree.identify_row(event.y)
        if not item_id:
            return

        column = self.tree.identify_column(event.x)
        # –†–∞–∑—Ä–µ—à–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–æ–ª–æ–Ω–∫–∏ "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç" (column #2).
        if column == "#2": 
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –º–æ–¥–∞.
            mod_data = self.tree.item(item_id, 'values')
            mod_name = mod_data[0]
            current_priority = mod_data[1]

            # –°–æ–∑–¥–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞.
            self.edit_priority_window = tk.Toplevel(self)
            self.edit_priority_window.title(localization.get_text("edit_priority_title")) # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
            self.edit_priority_window.transient(self) # –î–µ–ª–∞–µ—Ç –æ–∫–Ω–æ –¥–æ—á–µ—Ä–Ω–∏–º –ø–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—é –∫ –≥–ª–∞–≤–Ω–æ–º—É –æ–∫–Ω—É.
            self.edit_priority_window.grab_set() # –ë–ª–æ–∫–∏—Ä—É–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –¥—Ä—É–≥–∏–º–∏ –æ–∫–Ω–∞–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
            self.edit_priority_window.focus_set() # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–æ–∫—É—Å –Ω–∞ —ç—Ç–æ –æ–∫–Ω–æ.

            # –†–∞–∑–º–µ—â–∞–µ–º –æ–∫–Ω–æ –ø–æ —Ü–µ–Ω—Ç—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞.
            self.edit_priority_window.update_idletasks()
            main_x = self.winfo_x()
            main_y = self.winfo_y()
            main_width = self.winfo_width()
            main_height = self.winfo_height()

            win_width = self.edit_priority_window.winfo_width()
            win_height = self.edit_priority_window.winfo_height()

            x = main_x + (main_width // 2) - (win_width // 2)
            y = main_y + (main_height // 2) - (win_height // 2)
            self.edit_priority_window.geometry(f"+{x}+{y}")

            # –í–∏–¥–∂–µ—Ç—ã –≤–Ω—É—Ç—Ä–∏ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–≥–æ –æ–∫–Ω–∞.
            ttk.Label(self.edit_priority_window, text=f"{localization.get_text('mod_column')}: {mod_name}",
                      background=self.dialog_bg, foreground=self.dialog_fg).pack(pady=5) # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º Spinbox –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –æ—Ç 0 –¥–æ 99.
            self.priority_spinbox = ttk.Spinbox(self.edit_priority_window, from_=0, to=99,
                                                 width=5, font=self.font_main)
            self.priority_spinbox.set(current_priority)
            self.priority_spinbox.pack(pady=5)
            self.priority_spinbox.focus_set() # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–∫—É—Å –Ω–∞ Spinbox.
            self.priority_spinbox.bind("<Return>", lambda event: self.save_new_priority(item_id)) # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ Enter.

            save_button = ttk.Button(self.edit_priority_window, text=localization.get_text("save_button"),
                                     command=lambda: self.save_new_priority(item_id)) # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
            save_button.pack(pady=5)

            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ –∫ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–º—É –æ–∫–Ω—É.
            self.edit_priority_window.configure(bg=self.dialog_bg)
            # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π –∫ Spinbox
            self.style.configure("TSpinbox", fieldbackground=self.dialog_btn_bg, foreground=self.dialog_btn_fg)
            self.style.map("TSpinbox",
                            fieldbackground=[('focus', self.dialog_btn_bg)],
                            foreground=[('focus', self.dialog_btn_fg)])


    def save_new_priority(self, item_id):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –º–æ–¥–∞, –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
        """
        try:
            new_priority_str = self.priority_spinbox.get()
            # –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å ValueError
            if not new_priority_str:
                raise ValueError(self.current_lang["priority_value_error"])
            
            new_priority = int(new_priority_str)
            if not is_valid_priority(new_priority):
                raise ValueError(self.current_lang["priority_value_error"])

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤ —Å–ø–∏—Å–∫–µ self.mods
            mod_name = self.tree.item(item_id, 'values')[0]
            for mod in self.mods:
                if mod["name"] == mod_name:
                    mod["priority"] = new_priority
                    self.log(self.current_lang["priority_changed_log"].format(mod_name, new_priority))
                    break

            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ Treeview
            self.tree.item(item_id, values=(mod_name, new_priority))
            self.edit_priority_window.destroy()
        except ValueError as e:
            messagebox.showerror(self.current_lang["priority_value_error_title"], str(e),
                                 parent=self.edit_priority_window) # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ –¥–æ—á–µ—Ä–Ω–µ–º—É –æ–∫–Ω—É.
        except Exception as e:
            messagebox.showerror(self.current_lang["priority_value_error_title"],
                                 f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", parent=self.edit_priority_window)


    def log(self, message, add_timestamp=True):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –ª–æ–≥–∞.
        :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.
        :param add_timestamp: –ï—Å–ª–∏ True, –¥–æ–±–∞–≤–ª—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –∫ —Å–æ–æ–±—â–µ–Ω–∏—é.
        """
        self.log_text.config(state="normal") # –†–∞–∑—Ä–µ—à–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞.
        timestamp = datetime.now().strftime("%H:%M:%S")
        if add_timestamp:
            self.log_text.insert(tk.END, f"[{timestamp}] {message}\n")
        else:
            self.log_text.insert(tk.END, f"{message}\n")
        self.log_text.see(tk.END) # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –ª–æ–≥ –¥–æ –∫–æ–Ω—Ü–∞.
        self.log_text.config(state="disabled") # –ó–∞–ø—Ä–µ—â–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–Ω–æ–≤–∞.

    def clear_log(self):
        """–û—á–∏—â–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è –ª–æ–≥–∞."""
        self.log_text.config(state="normal")
        self.log_text.delete(1.0, tk.END)
        self.log_text.config(state="disabled")
        self.log(self.current_lang["clear_log"], add_timestamp=False)

    def select_all_log_content(self):
        """–í—ã–¥–µ–ª—è–µ—Ç –≤–µ—Å—å —Ç–µ–∫—Å—Ç –≤ –ª–æ–≥–µ."""
        self.log_text.tag_add("sel", "1.0", tk.END)
        self.log_text.mark_set(tk.INSERT, "1.0")
        self.log_text.see(tk.INSERT)

    def copy_log_content(self):
        """–ö–æ–ø–∏—Ä—É–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π –∏–ª–∏ –≤–µ—Å—å —Ç–µ–∫—Å—Ç –ª–æ–≥–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞."""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            selected_text = self.log_text.selection_get()
            self.clipboard_clear()
            self.clipboard_append(selected_text)
        except tk.TclError:
            # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –≤—ã–¥–µ–ª–µ–Ω, –∫–æ–ø–∏—Ä—É–µ–º –≤–µ—Å—å –ª–æ–≥
            full_text = self.log_text.get(1.0, tk.END).strip()
            if full_text:
                self.clipboard_clear()
                self.clipboard_append(full_text)
            else:
                self.log("–õ–æ–≥ –ø—É—Å—Ç, –Ω–µ—á–µ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å.")
        self.log("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ª–æ–≥–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞.", add_timestamp=False)


    def load_mods_and_assign_priorities(self):
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–æ–¥—ã –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–∏ modloader –∏ –Ω–∞–∑–Ω–∞—á–∞–µ—Ç –∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã.
        –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –º–æ–≥—É—Ç –±—ã—Ç—å –≤–∑—è—Ç—ã –∏–∑ custom_priorities, –∏–∑ modloader.ini,
        –∏–∑ .ini —Ñ–∞–π–ª–æ–≤ –≤–Ω—É—Ç—Ä–∏ –ø–∞–ø–æ–∫ –º–æ–¥–æ–≤, –∏–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
        """
        self.log(self.current_lang["loading_mods_from"].format(self.modloader_dir))
        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –º–æ–¥–æ–≤ –∏ Treeview –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π –Ω–æ–≤—ã—Ö.
        self.mods = [] 
        self.tree.delete(*self.tree.get_children()) # –ë–æ–ª–µ–µ –ø–∏—Ç–æ–Ω–∏—á–µ—Å–∫–∏–π —Å–ø–æ—Å–æ–± –æ—á–∏—Å—Ç–∫–∏ Treeview.

        if not os.path.isdir(self.modloader_dir):
            self.log(self.current_lang["modloader_folder_not_found"].format(self.modloader_dir))
            return

        self.log(self.current_lang["scanning_modloader_folder"].format(self.modloader_dir))
        
        # –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∏–∑ modloader.ini
        ini_priorities = self._load_priorities_from_modloader_ini(self.output_ini_path)

        found_mod_count = 0
        for entry_name in os.listdir(self.modloader_dir):
            full_path = os.path.join(self.modloader_dir, entry_name)
            
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ-–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏ –ø–∞–ø–∫–∏, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å '.' –∏–ª–∏ '_'
            if not os.path.isdir(full_path) or entry_name.startswith('.') or entry_name.startswith('_'):
                self.log(self.current_lang["skipping_entry"].format(entry_name))
                continue

            mod_priority = 0 # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
            
            # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º custom_priorities (–≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
            if entry_name.lower() in custom_priorities:
                mod_priority = custom_priorities[entry_name.lower()]
                self.log(self.current_lang["priority_auto_assigned"].format(mod_priority, entry_name))
            
            # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º modloader.ini
            elif entry_name in ini_priorities:
                mod_priority = ini_priorities[entry_name]
                self.log(self.current_lang["priority_from_mod_ini"].format(mod_priority, entry_name))
            
            # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º .ini —Ñ–∞–π–ª –≤–Ω—É—Ç—Ä–∏ –ø–∞–ø–∫–∏ –º–æ–¥–∞
            else:
                mod_ini_path = os.path.join(full_path, "modinfo.ini") # –ü—Ä–∏–º–µ—Ä –∏–º–µ–Ω–∏ ini-—Ñ–∞–π–ª–∞ –º–æ–¥–∞.
                if os.path.exists(mod_ini_path):
                    mod_ini_config = configparser.ConfigParser()
                    try:
                        mod_ini_config.read(mod_ini_path, encoding='utf-8')
                        if mod_ini_config.has_section("Modloader") and "Priority" in mod_ini_config["Modloader"]:
                            try:
                                p_val = int(mod_ini_config["Modloader"]["Priority"])
                                if is_valid_priority(p_val):
                                    mod_priority = p_val
                                else:
                                    self.log(self.current_lang["invalid_priority_value"].format(entry_name, mod_ini_config["Modloader"]["Priority"]))
                            except ValueError:
                                self.log(self.current_lang["invalid_priority_value"].format(entry_name, mod_ini_config["Modloader"]["Priority"]))
                                # mod_priority –æ—Å—Ç–∞–µ—Ç—Å—è 0
                    except Exception as e:
                        self.log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è INI —Ñ–∞–π–ª–∞ –º–æ–¥–∞ '{entry_name}': {e}. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ 0.")
            
            self.mods.append({"name": entry_name, "path": full_path, "priority": mod_priority})
            self.log(self.current_lang["found_mod_folder"].format(entry_name))
            found_mod_count += 1
        
        if not self.mods:
            self.log(self.current_lang["no_valid_mod_folders"])
            self.log(self.current_lang["mods_not_found"].format(self.modloader_dir))
            # –ù–µ –≤—ã–∑—ã–≤–∞–µ–º apply_search_filter, —Ç–∞–∫ –∫–∞–∫ Treeview —É–∂–µ –æ—á–∏—â–µ–Ω,
            # –∏ –Ω–µ—Ç –º–æ–¥–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
            return

        self.log(self.current_lang["mods_loaded"].format(found_mod_count))
        self.check_priority_conflicts()
        self.apply_search_filter() # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–æ–≤.


    def _load_priorities_from_modloader_ini(self, ini_path):
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –º–æ–¥–æ–≤ –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ modloader.ini.
        –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ load_mods_and_assign_priorities.
        :param ini_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É modloader.ini.
        :return: –°–ª–æ–≤–∞—Ä—å —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏ –º–æ–¥–æ–≤.
        """
        priorities = {}
        if os.path.exists(ini_path):
            config = configparser.ConfigParser()
            try:
                config.read(ini_path, encoding='utf-8')
                if "Profiles.Default.Priority" in config:
                    for mod_name, priority_str in config["Profiles.Default.Priority"].items():
                        try:
                            priority_val = int(priority_str)
                            if is_valid_priority(priority_val):
                                priorities[mod_name] = priority_val
                            else:
                                self.log(self.current_lang["invalid_priority_value"].format(mod_name, priority_str))
                        except ValueError:
                            self.log(self.current_lang["invalid_priority_value"].format(mod_name, priority_str))
                else:
                    self.log(self.current_lang["no_priority_sections"])
            except Exception as e:
                self.log(self.current_lang["file_read_error"].format(e))
        return priorities

    def check_priority_conflicts(self):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ (–Ω–µ—Å–∫–æ–ª—å–∫–æ –º–æ–¥–æ–≤ —Å –æ–¥–Ω–∏–º –∏ —Ç–µ–º –∂–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º).
        """
        priority_map = {}
        for mod in self.mods:
            priority = mod["priority"]
            if priority not in priority_map:
                priority_map[priority] = []
            priority_map[priority].append(mod["name"])
        
        conflicts_found = False
        conflict_messages = []
        for priority, mod_list in priority_map.items():
            if len(mod_list) > 1:
                conflict_messages.append(self.current_lang["priority_conflict_detail"].format(priority, ", ".join(mod_list)))
                conflicts_found = True
        
        if conflicts_found:
            self.log(self.current_lang["priority_conflicts_found"])
            for msg in conflict_messages:
                self.log(msg)
        else:
            self.log(self.current_lang["no_priority_conflicts"])

    def generate_modloader_ini(self, save_as=False):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–∞–π–ª modloader.ini —Å —Ç–µ–∫—É—â–∏–º–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏.
        :param save_as: –ï—Å–ª–∏ True, –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫".
        """
        if not self.mods:
            messagebox.showinfo(self.current_lang["info_title"], self.current_lang["no_mods_to_generate"]) # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
            return

        target_path = self.output_ini_path
        if save_as:
            file_path = filedialog.asksaveasfilename(
                defaultextension=".ini",
                filetypes=[("INI files", "*.ini"), ("All files", "*.*")],
                initialfile=OUTPUT_FILE_NAME,
                title=self.current_lang["file_save_as"]
            )
            if file_path:
                target_path = file_path
            else:
                return # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ.

        config = configparser.ConfigParser()
        # –°–æ–∑–¥–∞–µ–º —Å–µ–∫—Ü–∏—é, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç.
        if not config.has_section("Profiles.Default.Priority"):
            config.add_section("Profiles.Default.Priority")

        for mod in self.mods:
            config["Profiles.Default.Priority"][mod["name"]] = str(mod["priority"])

        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é, –µ—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
        if os.path.exists(target_path):
            backup_path = target_path + ".bak"
            try:
                shutil.copy2(target_path, backup_path)
                self.log(self.current_lang["backup_created"].format(backup_path))
            except Exception as e:
                self.log(self.current_lang["backup_error"].format(e))

        try:
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
            os.makedirs(os.path.dirname(target_path), exist_ok=True)
            with open(target_path, 'w', encoding='utf-8') as configfile:
                config.write(configfile)
            self.log(self.current_lang["file_saved_success"].format(target_path))
            messagebox.showinfo(self.current_lang["file_save"], self.current_lang["file_saved_info"].format(os.path.basename(target_path)))
        except Exception as e:
            self.log(self.current_lang["file_save_error"].format(e))
            messagebox.showerror(self.current_lang["file_save_error"], self.current_lang["file_save_error_details"].format(e))

    def open_file_dialog(self):
        """
        –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤—ã–±–æ—Ä–∞ INI —Ñ–∞–π–ª–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤.
        """
        file_path = filedialog.askopenfilename(
            defaultextension=".ini",
            filetypes=[("INI files", "*.ini"), ("All files", "*.*")],
            title=self.current_lang["open_ini_file_title"]
        )
        if file_path:
            self.import_priorities_from_file(file_path)

    def save_file_dialog(self, save_as=False):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–∞–π–ª modloader.ini, –∏—Å–ø–æ–ª—å–∑—É—è –¥–∏–∞–ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è, –µ—Å–ª–∏ save_as=True.
        –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è generate_modloader_ini.
        """
        self.generate_modloader_ini(save_as=save_as)

    def import_priorities_from_file(self, file_path=None):
        """
        –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ INI —Ñ–∞–π–ª–∞.
        :param file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞. –ï—Å–ª–∏ None, –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞.
        """
        if file_path is None:
            file_path = filedialog.askopenfilename(
                defaultextension=".ini",
                filetypes=[("INI files", "*.ini"), ("All files", "*.*")],
                title=self.current_lang["edit_import"]
            )
            if not file_path:
                return # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª.

        if not os.path.exists(file_path):
            self.log(self.current_lang["file_not_found"].format(file_path))
            messagebox.showerror(self.current_lang["file_read_error"], self.current_lang["file_not_found"].format(file_path))
            return

        config = configparser.ConfigParser()
        try:
            config.read(file_path, encoding='utf-8')
            
            if "Profiles.Default.Priority" not in config:
                self.log(self.current_lang["no_priority_sections"])
                messagebox.showinfo(self.current_lang["edit_import"], self.current_lang["no_priority_sections"])
                return

            imported_count = 0
            for mod_name, priority_str in config["Profiles.Default.Priority"].items():
                try:
                    priority = int(priority_str)
                    if not is_valid_priority(priority):
                        raise ValueError("Invalid priority range")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –º–æ–¥–∞ –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π.
                    # –ü–æ–∏—Å–∫ –º–æ–¥–∞ –≤ —Å–ø–∏—Å–∫–µ self.mods
                    mod_found = next((mod for mod in self.mods if mod["name"].lower() == mod_name.lower()), None)
                    if mod_found:
                        mod_found["priority"] = priority
                    else:
                        # –ï—Å–ª–∏ –º–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–∫—É—â–µ–º —Å–ø–∏—Å–∫–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ.
                        # path –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º, –µ—Å–ª–∏ –º–æ–¥ –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω –≤ modloader_dir.
                        self.mods.append({"name": mod_name, "path": "", "priority": priority}) 
                    imported_count += 1
                except ValueError:
                    self.log(self.current_lang["invalid_priority_value"].format(mod_name, priority_str))
            
            self.apply_search_filter() # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ Treeview.
            self.check_priority_conflicts() # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞.
            self.log(self.current_lang["priorities_imported"].format(os.path.basename(file_path)))
            messagebox.showinfo(self.current_lang["edit_import"], self.current_lang["priorities_imported"].format(os.path.basename(file_path)))

        except Exception as e:
            self.log(self.current_lang["file_read_error"].format(e))
            messagebox.showerror(self.current_lang["file_read_error"], f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª:\n{e}")

    def export_priorities_to_csv(self):
        """
        –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –º–æ–¥–æ–≤ –≤ CSV —Ñ–∞–π–ª.
        """
        if not self.mods:
            messagebox.showinfo(self.current_lang["info_title"], self.current_lang["no_mods_to_export"]) # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
            self.log(self.current_lang["no_mods_to_export"])
            return

        file_path = filedialog.asksaveasfilename(
            defaultextension=".csv",
            filetypes=[("CSV files", "*.csv"), ("All files", "*.*")],
            initialfile="mod_priorities.csv",
            title=self.current_lang["edit_export_csv"]
        )
        if file_path:
            try:
                with open(file_path, 'w', newline='', encoding='utf-8') as csvfile:
                    fieldnames = ["Mod Name", "Priority"]
                    writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
                    writer.writeheader()
                    for mod in self.mods:
                        writer.writerow({"Mod Name": mod["name"], "Priority": mod["priority"]})
                self.log(self.current_lang["export_csv_complete"].format(file_path))
                messagebox.showinfo(self.current_lang["edit_export_csv"], self.current_lang["export_csv_info"].format(os.path.basename(file_path)))
            except Exception as e:
                self.log(self.current_lang["export_csv_error"].format(e))
                messagebox.showerror(self.current_lang["export_csv_error"], self.current_lang["export_csv_error_details"].format(e))

    def reset_all_priorities(self):
        """
        –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –≤—Å–µ—Ö –º–æ–¥–æ–≤ –Ω–∞ 0 –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.
        """
        if messagebox.askyesno(self.current_lang["reset_priorities_confirm_title"], self.current_lang["reset_priorities_confirm"]):
            for mod in self.mods:
                mod["priority"] = 0
            self.apply_search_filter() # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ.
            self.log(self.current_lang["priorities_reset"])
            self.check_priority_conflicts() # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞.

    def restore_standard_priorities(self):
        """
        –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É—è custom_priorities,
        –∑–∞—Ç–µ–º modloader.ini, –∑–∞—Ç–µ–º .ini –º–æ–¥–∞, –∑–∞—Ç–µ–º 0.
        """
        if messagebox.askyesno(self.current_lang["restore_defaults_confirm_title"], self.current_lang["restore_defaults_confirm"]):
            self.load_mods_and_assign_priorities() # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—ã –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤.
            self.log(self.current_lang["priorities_restored"])


    def delete_selected_mods_event(self, event=None):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à–∏ Delete –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–æ–¥–æ–≤.
        """
        self.delete_selected_mods()

    def delete_selected_mods(self):
        """
        –£–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –º–æ–¥—ã –∏–∑ —Å–ø–∏—Å–∫–∞.
        """
        selected_items = self.tree.selection()
        if not selected_items:
            messagebox.showinfo(self.current_lang["info_title"], self.current_lang["no_mods_selected_for_deletion"]) # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
            return

        mods_to_delete_names = [self.tree.item(item_id, 'values')[0] for item_id in selected_items]

        if len(mods_to_delete_names) == 1:
            confirm_message = self.current_lang["mod_deleted_confirm"].format(mods_to_delete_names[0])
        else:
            confirm_message = self.current_lang["multiple_mods_deleted_confirm"].format(len(mods_to_delete_names))

        if messagebox.askyesno(self.current_lang["mod_deleted_confirm_title"], confirm_message):
            # –£–¥–∞–ª—è–µ–º –º–æ–¥—ã –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ self.mods
            self.mods = [mod for mod in self.mods if mod["name"] not in mods_to_delete_names]
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ Treeview
            self.apply_search_filter() 
            self.log(self.current_lang["mod_deleted_count"].format(len(mods_to_delete_names)))
            for mod_name in mods_to_delete_names:
                self.log(self.current_lang["mod_deleted_log"].format(mod_name))

    def delete_all_mods(self):
        """
        –£–¥–∞–ª—è–µ—Ç –≤—Å–µ –º–æ–¥—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.
        """
        if not self.mods:
            messagebox.showinfo(self.current_lang["info_title"], self.current_lang["no_mods_to_generate"]) # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
            return

        if messagebox.askyesno(self.current_lang["delete_all_mods_confirm_title"], self.current_lang["delete_all_mods_confirm"]):
            self.mods = [] # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–æ–≤.
            self.apply_search_filter() # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ.
            self.log(self.current_lang["all_mods_deleted_log"])

    def browse_modloader_path(self):
        """
        –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏ modloader –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—É—Ç—å.
        """
        folder_selected = filedialog.askdirectory(title=self.current_lang["settings_modloader_path"])
        if folder_selected:
            self.modloader_dir = folder_selected
            self.output_ini_path = os.path.join(self.modloader_dir, OUTPUT_FILE_NAME)
            self.app_config.set("Paths", "modloader_path", self.modloader_dir)
            self.save_app_config()
            self.log(self.current_lang["modloader_path_changed"].format(self.modloader_dir))
            self.load_mods_and_assign_priorities() # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—ã –∏–∑ –Ω–æ–≤–æ–≥–æ –ø—É—Ç–∏.

    def about_program(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ."""
        messagebox.showinfo(self.current_lang["about_title"], self.current_lang["about_message"])

    def about_author(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Ä–µ."""
        messagebox.showinfo(self.current_lang["author_title"], self.current_lang["author_message"])

    def check_for_updates(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π."""
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–µ—Ä—Å–∏–∏ –Ω–∞ GitHub/—Å–µ—Ä–≤–µ—Ä–µ.
        # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ.
        messagebox.showinfo(self.current_lang["updates_title"], self.current_lang["updates_message"])
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–∫—Ä—ã—Ç–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ GitHub Releases:
        # webbrowser.open(GITHUB_REPO_URL)

    def show_help(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –ø—Ä–æ–≥—Ä–∞–º–º—ã."""
        messagebox.showinfo(self.current_lang["help_title"], self.current_lang["help_message"])

    def contact_support(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–æ—á—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Å–≤—è–∑–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."""
        subject = self.current_lang["contact_support_subject"]
        body = f"\n\n--- Information for Support ---\nApp Version: {APP_VERSION}\nOS: {sys.platform}\n"
        webbrowser.open(f"mailto:{AUTHOR_EMAIL}?subject={subject}&body={body}")

    def parse_search_query(self, query):
        """
        –ü–∞—Ä—Å–∏—Ç –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å, —Ä–∞–∑–±–∏–≤–∞—è –µ–≥–æ –Ω–∞ –≤–∫–ª—é—á–∞—é—â–∏–µ, –∏—Å–∫–ª—é—á–∞—é—â–∏–µ –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —É—Å–ª–æ–≤–∏—è.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π, –∫–∞–∂–¥—ã–π –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –æ–ø–∏—Å—ã–≤–∞–µ—Ç —É—Å–ª–æ–≤–∏–µ –ø–æ–∏—Å–∫–∞.
        –ü—Ä–∏–º–µ—Ä—ã —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞:
        - "mod1 mod2": –≤–∫–ª—é—á–∞–µ—Ç 'mod1' –ò 'mod2' (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é AND –¥–ª—è –ø—Ä–æ–±–µ–ª–æ–≤)
        - "mod1 | mod2": –≤–∫–ª—é—á–∞–µ—Ç 'mod1' –ò–õ–ò 'mod2'
        - "-mod3": –∏—Å–∫–ª—é—á–∞–µ—Ç 'mod3'
        - "p:>50": –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –±–æ–ª—å—à–µ 50
        - "p:=20": –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ä–∞–≤–µ–Ω 20
        """
        terms = []
        # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞:
        # –ò—â–µ–º –ª–∏–±–æ —Å–ª–æ–≤–∞/—Ñ—Ä–∞–∑—ã –≤ –∫–∞–≤—ã—á–∫–∞—Ö, –ª–∏–±–æ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ —Å '|', –ª–∏–±–æ –æ–¥–∏–Ω–æ—á–Ω—ã–µ —Å–ª–æ–≤–∞,
        # –ª–∏–±–æ —É—Å–ª–æ–≤–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ (p:–æ–ø–µ—Ä–∞—Ç–æ—Ä—á–∏—Å–ª–æ).
        parts = re.findall(r'"([^"]*)"|(\S*p:[<>=!]+\d+)\S*|(\S+)', query.lower())

        for p_quoted, p_priority, p_word in parts:
            if p_quoted: # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ—Ä–∞–∑ –≤ –∫–∞–≤—ã—á–∫–∞—Ö (–µ—Å–ª–∏ –±—ã –æ–Ω–∏ –±—ã–ª–∏ –Ω—É–∂–Ω—ã –¥–ª—è "AND" –ø–æ–∏—Å–∫–∞)
                terms.append({'type': 'include', 'value': p_quoted})
            elif p_priority: # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ª–æ–≤–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
                priority_part = p_priority[2:] # –£–¥–∞–ª—è–µ–º 'p:'
                match = re.match(r'([<>=!]+)(\d+)', priority_part)
                if match:
                    operator = match.group(1)
                    value = int(match.group(2))
                    terms.append({'type': 'priority', 'operator': operator, 'value': value})
                else:
                    self.log(self.current_lang["invalid_search_syntax"])
                    return [] # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –Ω–µ–≤–µ—Ä–µ–Ω.
            elif p_word: # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–ª–æ–≤ –∏–ª–∏ OR-—É—Å–ª–æ–≤–∏–π
                if p_word.startswith('-'): # –ò—Å–∫–ª—é—á–∞—é—â–∏–π —Ç–µ—Ä–º–∏–Ω
                    terms.append({'type': 'exclude', 'value': p_word[1:]})
                elif '|' in p_word: # OR-—É—Å–ª–æ–≤–∏–µ
                    or_values = [v.strip() for v in p_word.split('|') if v.strip()]
                    if or_values:
                        terms.append({'type': 'include_or', 'values': or_values})
                else: # –û–±—ã—á–Ω—ã–π –≤–∫–ª—é—á–∞—é—â–∏–π —Ç–µ—Ä–º–∏–Ω
                    terms.append({'type': 'include', 'value': p_word})
        return terms


    def apply_search_filter(self, event=None):
        """
        –ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ–∏–ª—å—Ç—Ä –ø–æ–∏—Å–∫–∞ –∫ —Å–ø–∏—Å–∫—É –º–æ–¥–æ–≤ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç Treeview.
        """
        search_query = self.search_var.get().strip()
        self.filtered_mods = []

        # –û—á–∏—â–∞–µ–º Treeview –ø–µ—Ä–µ–¥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.
        self.tree.delete(*self.tree.get_children())

        if not search_query:
            # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø–æ–∏—Å–∫–∞ –ø—É—Å—Ç–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –º–æ–¥—ã.
            self.filtered_mods = sorted(self.mods, key=lambda x: x['name'].lower())
            for mod in self.filtered_mods:
                self.tree.insert("", "end", values=(mod["name"], mod["priority"]))
            self.log(f"–ü–æ–∏—Å–∫ —Å–±—Ä–æ—à–µ–Ω. –û—Ç–æ–±—Ä–∞–∂–µ–Ω–æ –º–æ–¥–æ–≤: {len(self.filtered_mods)}.")
            return

        parsed_terms = self.parse_search_query(search_query)
        if not parsed_terms: # –ï—Å–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑-–∑–∞ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞).
            # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —É–∂–µ –±—É–¥–µ—Ç –≤ –ª–æ–≥–µ –∏–∑ parse_search_query
            return

        # –§–∏–ª—å—Ç—Ä—É–µ–º –º–æ–¥—ã
        for mod in self.mods:
            if self._mod_matches_search_terms(mod, parsed_terms):
                self.filtered_mods.append(mod)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥—ã –ø–æ –∏–º–µ–Ω–∏.
        self.filtered_mods.sort(key=lambda x: x['name'].lower())

        # –í—Å—Ç–∞–≤–ª—è–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥—ã –≤ Treeview
        for mod in self.filtered_mods:
            self.tree.insert("", "end", values=(mod["name"], mod["priority"]))
        
        self.log(self.current_lang["search_applied"].format(search_query, len(self.filtered_mods)))

    def _mod_matches_search_terms(self, mod, search_terms):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –º–æ–¥ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–æ–∏—Å–∫–æ–≤—ã–º —É—Å–ª–æ–≤–∏—è–º.
        :param mod: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –º–æ–¥–∞ (–∏–º—è, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç).
        :param search_terms: –°–ø–∏—Å–æ–∫ —Å–ø–∞—Ä—Å–µ–Ω–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤—ã—Ö —É—Å–ª–æ–≤–∏–π.
        :return: True, –µ—Å–ª–∏ –º–æ–¥ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤—Å–µ–º —É—Å–ª–æ–≤–∏—è–º, –∏–Ω–∞—á–µ False.
        """
        mod_name_lower = mod['name'].lower()
        mod_priority = mod['priority']

        # –§–ª–∞–≥–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–∞–ª–∏—á–∏—è –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —É—Å–ª–æ–≤–∏–π
        has_direct_includes = False # –ï—Å—Ç—å –ª–∏ –æ–±—ã—á–Ω—ã–µ –≤–∫–ª—é—á–∞—é—â–∏–µ —É—Å–ª–æ–≤–∏—è (–Ω–µ OR)
        direct_includes_match = True # –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –ª–∏ –≤—Å–µ –æ–±—ã—á–Ω—ã–µ –≤–∫–ª—é—á–∞—é—â–∏–µ —É—Å–ª–æ–≤–∏—è
        
        has_or_includes = False # –ï—Å—Ç—å –ª–∏ OR-—É—Å–ª–æ–≤–∏—è
        or_includes_match = True # –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∏–∑ OR-—É—Å–ª–æ–≤–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é True, –µ—Å–ª–∏ OR –Ω–µ—Ç)

        for term in search_terms:
            if term['type'] == 'include':
                has_direct_includes = True
                if term['value'] not in mod_name_lower:
                    direct_includes_match = False
                    break # –ù–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–±—ã—á–Ω–æ–º—É –≤–∫–ª—é—á–∞—é—â–µ–º—É —É—Å–ª–æ–≤–∏—é
            elif term['type'] == 'exclude':
                if term['value'] in mod_name_lower:
                    return False # –ú–æ–¥ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏—Å–∫–ª—é—á–∞—é—â–∏–π —Ç–µ—Ä–º–∏–Ω
            elif term['type'] == 'priority':
                if not self._filter_priority(mod_priority, term):
                    return False # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç
            elif term['type'] == 'include_or':
                has_or_includes = True
                # –î–ª—è OR-—É—Å–ª–æ–≤–∏–π –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–µ—Ä–º–∏–Ω —Å–æ–≤–ø–∞–ª.
                # –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω –Ω–µ —Å–æ–≤–ø–∞–ª, —Ç–æ or_includes_match —Å—Ç–∞–Ω–µ—Ç False.
                if not any(or_value in mod_name_lower for or_value in term['values']):
                    or_includes_match = False
                    # –ï—Å–ª–∏ OR-—É—Å–ª–æ–≤–∏–µ –Ω–µ —Å–æ–≤–ø–∞–ª–æ, –∏ —ç—Ç–æ –±—ã–ª–æ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ OR-—É—Å–ª–æ–≤–∏–µ,
                    # –∏–ª–∏ –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ —á–∞—Å—Ç—å—é –≥—Ä—É–ø–ø—ã OR-—É—Å–ª–æ–≤–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –≤—Å–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω—ã,
                    # —Ç–æ –º–æ–¥ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç.
                    # –¢.–µ. –µ—Å–ª–∏ –µ—Å—Ç—å 'A | B' –ò 'C | D', —Ç–æ –º–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å 'A' –∏–ª–∏ 'B' –ò 'C' –∏–ª–∏ 'D'.
                    # –ü–æ—ç—Ç–æ–º—É, –µ—Å–ª–∏ –æ–¥–Ω–æ OR-—É—Å–ª–æ–≤–∏–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç, —Ç–æ –º–æ–¥ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç.
                    return False

        # –ï—Å–ª–∏ –±—ã–ª–∏ –ø—Ä—è–º—ã–µ –≤–∫–ª—é—á–∞—é—â–∏–µ —É—Å–ª–æ–≤–∏—è, –∏ –Ω–µ –≤—Å–µ –æ–Ω–∏ —Å–æ–≤–ø–∞–ª–∏
        if has_direct_includes and not direct_includes_match:
            return False
        
        # –ï—Å–ª–∏ –±—ã–ª–∏ OR-—É—Å–ª–æ–≤–∏—è, –∏ –Ω–∏ –æ–¥–Ω–æ –∏–∑ –Ω–∏—Ö –Ω–µ —Å–æ–≤–ø–∞–ª–æ (—Ö–æ—Ç—è —ç—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ —É–∂–µ —Å–¥–µ–ª–∞–Ω–∞ –≤–Ω—É—Ç—Ä–∏ —Ü–∏–∫–ª–∞)
        # –≠—Ç–æ—Ç if –±–ª–æ–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑–±—ã—Ç–æ—á–µ–Ω, —Ç–∞–∫ –∫–∞–∫ `return False` —É–∂–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç.
        # if has_or_includes and not or_includes_match:
        #     return False

        return True # –ú–æ–¥ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤—Å–µ–º —É—Å–ª–æ–≤–∏—è–º

    def _filter_priority(self, priority, priority_filter):
        """
        –§–∏–ª—å—Ç—Ä—É–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –º–æ–¥–∞ –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É —Ñ–∏–ª—å—Ç—Ä—É.
        :param priority: –¢–µ–∫—É—â–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –º–æ–¥–∞.
        :param priority_filter: –°–ª–æ–≤–∞—Ä—å —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º –∏ –∑–Ω–∞—á–µ–Ω–∏–µ–º –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞.
        :return: True, –µ—Å–ª–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∏–ª—å—Ç—Ä—É, –∏–Ω–∞—á–µ False.
        """
        if not priority_filter: # –ï—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –æ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç.
            return True

        op = priority_filter['operator']
        val = priority_filter['value']

        if op == '>':
            return priority > val
        elif op == '<':
            return priority < val
        elif op == '=' or op == '==': # –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ '=='
            return priority == val
        elif op == '>=':
            return priority >= val
        elif op == '<=':
            return priority <= val
        elif op == '!=':
            return priority != val
        else:
            # –≠—Ç–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å, –µ—Å–ª–∏ parse_search_query —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ.
            # –ù–æ –Ω–∞ —Å–ª—É—á–∞–π —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∏–ª–∏ –æ—à–∏–±–∫–∏, –ª—É—á—à–µ –∏–º–µ—Ç—å.
            self.log(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞: {op}")
            return False


# =============================================================================
# --- –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.
# =============================================================================
if __name__ == "__main__":
    app = ModPriorityGUI()
    app.mainloop()